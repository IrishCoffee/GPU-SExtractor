!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACLOCAL	Makefile	/^ACLOCAL = ${SHELL} \/home\/zhao\/cuda-workspace\/sextractor-dev\/autoconf\/missing --run aclocal-1.10$/;"	m
ACLOCAL	fits/Makefile	/^ACLOCAL = ${SHELL} \/home\/zhao\/cuda-workspace\/sextractor\/autoconf\/missing --run aclocal-1.10$/;"	m
ACLOCAL	levmar/Makefile	/^ACLOCAL = ${SHELL} \/home\/zhao\/cuda-workspace\/sextractor\/autoconf\/missing --run aclocal-1.10$/;"	m
ACLOCAL	wcs/Makefile	/^ACLOCAL = ${SHELL} \/home\/zhao\/cuda-workspace\/sextractor\/autoconf\/missing --run aclocal-1.10$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	fits/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	levmar/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	wcs/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
AFILE	prefs.h	/^typedef enum	{IMAGE, AFILE}			back_origintype;$/;"	e	enum:__anon36
ALIGN16	types.h	30;"	d
ALIGN16	types.h	32;"	d
ALIGN16	types.h	34;"	d
ALIGN16	types.h	36;"	d
AMTAR	Makefile	/^AMTAR = ${SHELL} \/home\/zhao\/cuda-workspace\/sextractor-dev\/autoconf\/missing --run tar$/;"	m
AMTAR	fits/Makefile	/^AMTAR = ${SHELL} \/home\/zhao\/cuda-workspace\/sextractor\/autoconf\/missing --run tar$/;"	m
AMTAR	levmar/Makefile	/^AMTAR = ${SHELL} \/home\/zhao\/cuda-workspace\/sextractor\/autoconf\/missing --run tar$/;"	m
AMTAR	wcs/Makefile	/^AMTAR = ${SHELL} \/home\/zhao\/cuda-workspace\/sextractor\/autoconf\/missing --run tar$/;"	m
AM_RECURSIVE_TARGETS	Makefile	/^AM_RECURSIVE_TARGETS = $(RECURSIVE_TARGETS:-recursive=) \\$/;"	m
ANALYSE_FAST	cuda/cudatypes.h	67;"	d
ANALYSE_FAST	types.h	59;"	d
ANALYSE_FULL	cuda/cudatypes.h	68;"	d
ANALYSE_FULL	types.h	60;"	d
ANALYSE_ROBUST	cuda/cudatypes.h	69;"	d
ANALYSE_ROBUST	types.h	61;"	d
APER_OVERSAMP	photom.h	19;"	d
AR	fits/Makefile	/^AR = ar$/;"	m
AR	levmar/Makefile	/^AR = ar$/;"	m
AR	wcs/Makefile	/^AR = ar$/;"	m
ARCMIN	fitswcs.h	27;"	d
ARCSEC	astrom.h	26;"	d
ARCSEC	fitswcs.h	28;"	d
ARFLAGS	fits/Makefile	/^ARFLAGS = cru$/;"	m
ARFLAGS	levmar/Makefile	/^ARFLAGS = cru$/;"	m
ARFLAGS	wcs/Makefile	/^ARFLAGS = cru$/;"	m
ASCII	prefs.h	/^typedef enum	{CAT_NONE, ASCII, ASCII_HEAD, ASCII_SKYCAT, ASCII_VO,$/;"	e	enum:__anon32
ASCII_HEAD	prefs.h	/^typedef enum	{CAT_NONE, ASCII, ASCII_HEAD, ASCII_SKYCAT, ASCII_VO,$/;"	e	enum:__anon32
ASCII_SKYCAT	prefs.h	/^typedef enum	{CAT_NONE, ASCII, ASCII_HEAD, ASCII_SKYCAT, ASCII_VO,$/;"	e	enum:__anon32
ASCII_VO	prefs.h	/^typedef enum	{CAT_NONE, ASCII, ASCII_HEAD, ASCII_SKYCAT, ASCII_VO,$/;"	e	enum:__anon32
ASSOCSELEC_ALL	prefs.h	/^typedef enum	{ASSOCSELEC_ALL, ASSOCSELEC_MATCHED, ASSOCSELEC_NOMATCHED}$/;"	e	enum:__anon40
ASSOCSELEC_MATCHED	prefs.h	/^typedef enum	{ASSOCSELEC_ALL, ASSOCSELEC_MATCHED, ASSOCSELEC_NOMATCHED}$/;"	e	enum:__anon40
ASSOCSELEC_NOMATCHED	prefs.h	/^typedef enum	{ASSOCSELEC_ALL, ASSOCSELEC_MATCHED, ASSOCSELEC_NOMATCHED}$/;"	e	enum:__anon40
ASSOC_BUFINC	assoc.h	19;"	d
ASSOC_FIRST	prefs.h	/^typedef enum	{ASSOC_FIRST, ASSOC_NEAREST, ASSOC_MEAN, ASSOC_MAGMEAN,$/;"	e	enum:__anon39
ASSOC_MAGMEAN	prefs.h	/^typedef enum	{ASSOC_FIRST, ASSOC_NEAREST, ASSOC_MEAN, ASSOC_MAGMEAN,$/;"	e	enum:__anon39
ASSOC_MAGSUM	prefs.h	/^	 ASSOC_SUM, ASSOC_MAGSUM, ASSOC_MIN, ASSOC_MAX} assoctype;$/;"	e	enum:__anon39
ASSOC_MAX	prefs.h	/^	 ASSOC_SUM, ASSOC_MAGSUM, ASSOC_MIN, ASSOC_MAX} assoctype;$/;"	e	enum:__anon39
ASSOC_MEAN	prefs.h	/^typedef enum	{ASSOC_FIRST, ASSOC_NEAREST, ASSOC_MEAN, ASSOC_MAGMEAN,$/;"	e	enum:__anon39
ASSOC_MIN	prefs.h	/^	 ASSOC_SUM, ASSOC_MAGSUM, ASSOC_MIN, ASSOC_MAX} assoctype;$/;"	e	enum:__anon39
ASSOC_NEAREST	prefs.h	/^typedef enum	{ASSOC_FIRST, ASSOC_NEAREST, ASSOC_MEAN, ASSOC_MAGMEAN,$/;"	e	enum:__anon39
ASSOC_SUM	prefs.h	/^	 ASSOC_SUM, ASSOC_MAGSUM, ASSOC_MIN, ASSOC_MAX} assoctype;$/;"	e	enum:__anon39
ATLAS_CFLAGS	Makefile	/^ATLAS_CFLAGS = $/;"	m
ATLAS_CFLAGS	fits/Makefile	/^ATLAS_CFLAGS = $/;"	m
ATLAS_CFLAGS	levmar/Makefile	/^ATLAS_CFLAGS = $/;"	m
ATLAS_CFLAGS	wcs/Makefile	/^ATLAS_CFLAGS = $/;"	m
ATLAS_ERROR	Makefile	/^ATLAS_ERROR = $/;"	m
ATLAS_ERROR	fits/Makefile	/^ATLAS_ERROR = $/;"	m
ATLAS_ERROR	levmar/Makefile	/^ATLAS_ERROR = $/;"	m
ATLAS_ERROR	wcs/Makefile	/^ATLAS_ERROR = $/;"	m
ATLAS_LIB	Makefile	/^ATLAS_LIB = -L\/usr\/local\/atlas\/lib -llapack -lptcblas -lcblas -latlas$/;"	m
ATLAS_LIB	fits/Makefile	/^ATLAS_LIB = -L\/usr\/local\/atlas\/lib -llapack -lptcblas -lcblas -latlas$/;"	m
ATLAS_LIB	levmar/Makefile	/^ATLAS_LIB = -L\/usr\/local\/atlas\/lib -llapack -lptcblas -lcblas -latlas$/;"	m
ATLAS_LIB	wcs/Makefile	/^ATLAS_LIB = -L\/usr\/local\/atlas\/lib -llapack -lptcblas -lcblas -latlas$/;"	m
ATLAS_LIBPATH	Makefile	/^ATLAS_LIBPATH = -L\/usr\/local\/atlas\/lib$/;"	m
ATLAS_LIBPATH	fits/Makefile	/^ATLAS_LIBPATH = -L\/usr\/local\/atlas\/lib$/;"	m
ATLAS_LIBPATH	levmar/Makefile	/^ATLAS_LIBPATH = -L\/usr\/local\/atlas\/lib$/;"	m
ATLAS_LIBPATH	wcs/Makefile	/^ATLAS_LIBPATH = -L\/usr\/local\/atlas\/lib$/;"	m
ATLAS_POTRF	levmar/Axb_core.c	830;"	d	file:
ATLAS_POTRS	levmar/Axb_core.c	831;"	d	file:
AUTO	prefs.h	/^typedef	enum	{PNONE, FIXED, AUTO} aperttype;$/;"	e	enum:__anon31
AUTOCONF	Makefile	/^AUTOCONF = ${SHELL} \/home\/zhao\/cuda-workspace\/sextractor-dev\/autoconf\/missing --run autoconf$/;"	m
AUTOCONF	fits/Makefile	/^AUTOCONF = ${SHELL} \/home\/zhao\/cuda-workspace\/sextractor\/autoconf\/missing --run autoconf$/;"	m
AUTOCONF	levmar/Makefile	/^AUTOCONF = ${SHELL} \/home\/zhao\/cuda-workspace\/sextractor\/autoconf\/missing --run autoconf$/;"	m
AUTOCONF	wcs/Makefile	/^AUTOCONF = ${SHELL} \/home\/zhao\/cuda-workspace\/sextractor\/autoconf\/missing --run autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = ${SHELL} \/home\/zhao\/cuda-workspace\/sextractor-dev\/autoconf\/missing --run autoheader$/;"	m
AUTOHEADER	fits/Makefile	/^AUTOHEADER = ${SHELL} \/home\/zhao\/cuda-workspace\/sextractor\/autoconf\/missing --run autoheader$/;"	m
AUTOHEADER	levmar/Makefile	/^AUTOHEADER = ${SHELL} \/home\/zhao\/cuda-workspace\/sextractor\/autoconf\/missing --run autoheader$/;"	m
AUTOHEADER	wcs/Makefile	/^AUTOHEADER = ${SHELL} \/home\/zhao\/cuda-workspace\/sextractor\/autoconf\/missing --run autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = ${SHELL} \/home\/zhao\/cuda-workspace\/sextractor-dev\/autoconf\/missing --run automake-1.10$/;"	m
AUTOMAKE	fits/Makefile	/^AUTOMAKE = ${SHELL} \/home\/zhao\/cuda-workspace\/sextractor\/autoconf\/missing --run automake-1.10$/;"	m
AUTOMAKE	levmar/Makefile	/^AUTOMAKE = ${SHELL} \/home\/zhao\/cuda-workspace\/sextractor\/autoconf\/missing --run automake-1.10$/;"	m
AUTOMAKE	wcs/Makefile	/^AUTOMAKE = ${SHELL} \/home\/zhao\/cuda-workspace\/sextractor\/autoconf\/missing --run automake-1.10$/;"	m
AWK	Makefile	/^AWK = mawk$/;"	m
AWK	fits/Makefile	/^AWK = mawk$/;"	m
AWK	levmar/Makefile	/^AWK = mawk$/;"	m
AWK	wcs/Makefile	/^AWK = mawk$/;"	m
AX_EQ_B_CHOL	levmar/Axb_core.c	/^int AX_EQ_B_CHOL(LM_REAL *A, LM_REAL *B, LM_REAL *x, int m)$/;"	f
AX_EQ_B_CHOL	levmar/Axb_core.c	77;"	d	file:
AX_EQ_B_CHOL	levmar/Axb_core.c	808;"	d	file:
AX_EQ_B_CHOL	levmar/lm_core.c	36;"	d	file:
AX_EQ_B_CHOL	levmar/lm_core.c	807;"	d	file:
AX_EQ_B_CHOL	levmar/lmbc_core.c	43;"	d	file:
AX_EQ_B_CHOL	levmar/lmbc_core.c	916;"	d	file:
AX_EQ_B_LU	levmar/Axb_core.c	/^int AX_EQ_B_LU(LM_REAL *A, LM_REAL *B, LM_REAL *x, int m)$/;"	f
AX_EQ_B_LU	levmar/Axb_core.c	78;"	d	file:
AX_EQ_B_LU	levmar/Axb_core.c	809;"	d	file:
AX_EQ_B_LU	levmar/Axb_core.c	838;"	d	file:
AX_EQ_B_LU	levmar/Axb_core.c	964;"	d	file:
AX_EQ_B_LU	levmar/lm_core.c	35;"	d	file:
AX_EQ_B_LU	levmar/lm_core.c	41;"	d	file:
AX_EQ_B_LU	levmar/lm_core.c	806;"	d	file:
AX_EQ_B_LU	levmar/lmbc_core.c	42;"	d	file:
AX_EQ_B_LU	levmar/lmbc_core.c	48;"	d	file:
AX_EQ_B_LU	levmar/lmbc_core.c	915;"	d	file:
AX_EQ_B_QR	levmar/Axb_core.c	/^int AX_EQ_B_QR(LM_REAL *A, LM_REAL *B, LM_REAL *x, int m)$/;"	f
AX_EQ_B_QR	levmar/Axb_core.c	75;"	d	file:
AX_EQ_B_QR	levmar/Axb_core.c	806;"	d	file:
AX_EQ_B_QR	levmar/lm_core.c	37;"	d	file:
AX_EQ_B_QR	levmar/lm_core.c	808;"	d	file:
AX_EQ_B_QR	levmar/lmbc_core.c	44;"	d	file:
AX_EQ_B_QR	levmar/lmbc_core.c	917;"	d	file:
AX_EQ_B_QRLS	levmar/Axb_core.c	/^int AX_EQ_B_QRLS(LM_REAL *A, LM_REAL *B, LM_REAL *x, int m, int n)$/;"	f
AX_EQ_B_QRLS	levmar/Axb_core.c	76;"	d	file:
AX_EQ_B_QRLS	levmar/Axb_core.c	807;"	d	file:
AX_EQ_B_QRLS	levmar/lm_core.c	38;"	d	file:
AX_EQ_B_QRLS	levmar/lm_core.c	809;"	d	file:
AX_EQ_B_QRLS	levmar/lmbc_core.c	45;"	d	file:
AX_EQ_B_QRLS	levmar/lmbc_core.c	918;"	d	file:
AX_EQ_B_SVD	levmar/Axb_core.c	/^int AX_EQ_B_SVD(LM_REAL *A, LM_REAL *B, LM_REAL *x, int m)$/;"	f
AX_EQ_B_SVD	levmar/Axb_core.c	79;"	d	file:
AX_EQ_B_SVD	levmar/Axb_core.c	810;"	d	file:
AX_EQ_B_SVD	levmar/lm_core.c	39;"	d	file:
AX_EQ_B_SVD	levmar/lm_core.c	810;"	d	file:
AX_EQ_B_SVD	levmar/lmbc_core.c	46;"	d	file:
AX_EQ_B_SVD	levmar/lmbc_core.c	919;"	d	file:
BACKRMS_FIELD	field.h	26;"	d
BACK_ABSOLUTE	types.h	/^typedef  enum {BACK_RELATIVE, BACK_ABSOLUTE}$/;"	e	enum:__anon3
BACK_BUFSIZE	back.h	20;"	d
BACK_MINGOODFRAC	back.h	21;"	d
BACK_MINGOODFRAC	cuda/cudatypes.h	37;"	d
BACK_RELATIVE	types.h	/^typedef  enum {BACK_RELATIVE, BACK_ABSOLUTE}$/;"	e	enum:__anon3
BANNER	define.h	28;"	d
BANNER	fits/fitscat_defs.h	26;"	d
BANNER	ldactoasc.h	26;"	d
BIG	cuda/cudatypes.h	45;"	d
BIG	define.h	37;"	d
BIG	fits/fitscat_defs.h	46;"	d
BIG	ldactoasc.h	44;"	d
BODY_DEFRAM	fits/fitscat_defs.h	42;"	d
BODY_DEFSWAPDIR	fits/fitscat_defs.h	44;"	d
BODY_DEFVRAM	fits/fitscat_defs.h	43;"	d
BOXPROJECT	levmar/lmbc_core.c	/^static void BOXPROJECT(LM_REAL *p, LM_REAL *lb, LM_REAL *ub, int m)$/;"	f	file:
BOXPROJECT	levmar/lmbc_core.c	28;"	d	file:
BOXPROJECT	levmar/lmbc_core.c	903;"	d	file:
BP_BYTE	fits/fitscat.h	41;"	d
BP_DOUBLE	fits/fitscat.h	45;"	d
BP_FLOAT	fits/fitscat.h	44;"	d
BP_LONG	fits/fitscat.h	43;"	d
BP_SHORT	fits/fitscat.h	42;"	d
BYTE	cuda/cudatypes.h	/^typedef	unsigned char	BYTE;		\/* a byte *\/$/;"	t
BYTE	fits/fitscat_defs.h	/^typedef	unsigned char	BYTE;			\/* a byte *\/$/;"	t
BYTE	types.h	/^typedef	unsigned char	BYTE;			\/* a byte *\/$/;"	t
CAT_NONE	prefs.h	/^typedef enum	{CAT_NONE, ASCII, ASCII_HEAD, ASCII_SKYCAT, ASCII_VO,$/;"	e	enum:__anon32
CC	Makefile	/^CC = gcc$/;"	m
CC	fits/Makefile	/^CC = cc$/;"	m
CC	levmar/Makefile	/^CC = cc$/;"	m
CC	wcs/Makefile	/^CC = cc$/;"	m
CCD	prefs.h	/^typedef enum	{CCD, PHOTO} 	detecttype;$/;"	e	enum:__anon34
CCDEPMODE	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	fits/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	levmar/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	wcs/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	Makefile	/^CCLD = $(CC)$/;"	m
CCLD	fits/Makefile	/^CCLD = $(CC)$/;"	m
CCLD	levmar/Makefile	/^CCLD = $(CC)$/;"	m
CCLD	wcs/Makefile	/^CCLD = $(CC)$/;"	m
CELSET	wcs/cel.h	84;"	d
CELSYS_ECLIPTIC	fitswcs.h	/^	CELSYS_ECLIPTIC, CELSYS_SUPERGALACTIC}	celsysenum;$/;"	e	enum:__anon14
CELSYS_EQUATORIAL	fitswcs.h	/^typedef  enum {CELSYS_NATIVE, CELSYS_PIXEL, CELSYS_EQUATORIAL, CELSYS_GALACTIC,$/;"	e	enum:__anon14
CELSYS_GALACTIC	fitswcs.h	/^typedef  enum {CELSYS_NATIVE, CELSYS_PIXEL, CELSYS_EQUATORIAL, CELSYS_GALACTIC,$/;"	e	enum:__anon14
CELSYS_NATIVE	fitswcs.h	/^typedef  enum {CELSYS_NATIVE, CELSYS_PIXEL, CELSYS_EQUATORIAL, CELSYS_GALACTIC,$/;"	e	enum:__anon14
CELSYS_PIXEL	fitswcs.h	/^typedef  enum {CELSYS_NATIVE, CELSYS_PIXEL, CELSYS_EQUATORIAL, CELSYS_GALACTIC,$/;"	e	enum:__anon14
CELSYS_SUPERGALACTIC	fitswcs.h	/^	CELSYS_ECLIPTIC, CELSYS_SUPERGALACTIC}	celsysenum;$/;"	e	enum:__anon14
CFLAGS	Makefile	/^CFLAGS =  -O3 -g -funroll-loops -fomit-frame-pointer -Wall  -D_REENTRANT$/;"	m
CFLAGS	fits/Makefile	/^CFLAGS =  -O3 -g -funroll-loops -fomit-frame-pointer -Wall  -D_REENTRANT$/;"	m
CFLAGS	levmar/Makefile	/^CFLAGS =  -O3 -g -funroll-loops -fomit-frame-pointer -Wall  -D_REENTRANT$/;"	m
CFLAGS	wcs/Makefile	/^CFLAGS =  -O3 -g -funroll-loops -fomit-frame-pointer -Wall  -D_REENTRANT$/;"	m
CGOLD	som.c	343;"	d	file:
CGOLD	som.c	501;"	d	file:
CHECK_APERTURES	types.h	/^        CHECK_SUBTRACTED, CHECK_FILTERED, CHECK_OBJECTS, CHECK_APERTURES,$/;"	e	enum:__anon4
CHECK_ASSOC	types.h	/^	CHECK_SEGMENTATION, CHECK_ASSOC, CHECK_SUBOBJECTS,$/;"	e	enum:__anon4
CHECK_BACKGROUND	types.h	/^typedef  enum {CHECK_NONE, CHECK_IDENTICAL, CHECK_BACKGROUND,$/;"	e	enum:__anon4
CHECK_BACKRMS	types.h	/^        CHECK_BACKRMS, CHECK_MINIBACKGROUND, CHECK_MINIBACKRMS,$/;"	e	enum:__anon4
CHECK_FILTERED	types.h	/^        CHECK_SUBTRACTED, CHECK_FILTERED, CHECK_OBJECTS, CHECK_APERTURES,$/;"	e	enum:__anon4
CHECK_IDENTICAL	types.h	/^typedef  enum {CHECK_NONE, CHECK_IDENTICAL, CHECK_BACKGROUND,$/;"	e	enum:__anon4
CHECK_MAPSOM	types.h	/^	CHECK_MAPSOM, CHECK_SUBPROFILES, CHECK_PROFILES, CHECK_PATTERNS,$/;"	e	enum:__anon4
CHECK_MINIBACKGROUND	types.h	/^        CHECK_BACKRMS, CHECK_MINIBACKGROUND, CHECK_MINIBACKRMS,$/;"	e	enum:__anon4
CHECK_MINIBACKRMS	types.h	/^        CHECK_BACKRMS, CHECK_MINIBACKGROUND, CHECK_MINIBACKRMS,$/;"	e	enum:__anon4
CHECK_NONE	types.h	/^typedef  enum {CHECK_NONE, CHECK_IDENTICAL, CHECK_BACKGROUND,$/;"	e	enum:__anon4
CHECK_OBJECTS	types.h	/^        CHECK_SUBTRACTED, CHECK_FILTERED, CHECK_OBJECTS, CHECK_APERTURES,$/;"	e	enum:__anon4
CHECK_PATTERNS	types.h	/^	CHECK_MAPSOM, CHECK_SUBPROFILES, CHECK_PROFILES, CHECK_PATTERNS,$/;"	e	enum:__anon4
CHECK_PCOPROTOS	types.h	/^	CHECK_SUBPCPROTOS, CHECK_PCPROTOS, CHECK_PCOPROTOS,$/;"	e	enum:__anon4
CHECK_PCPROTOS	types.h	/^	CHECK_SUBPCPROTOS, CHECK_PCPROTOS, CHECK_PCOPROTOS,$/;"	e	enum:__anon4
CHECK_PROFILES	types.h	/^	CHECK_MAPSOM, CHECK_SUBPROFILES, CHECK_PROFILES, CHECK_PATTERNS,$/;"	e	enum:__anon4
CHECK_PSFPROTOS	types.h	/^	CHECK_SUBPSFPROTOS, CHECK_PSFPROTOS,$/;"	e	enum:__anon4
CHECK_SEGMENTATION	types.h	/^	CHECK_SEGMENTATION, CHECK_ASSOC, CHECK_SUBOBJECTS,$/;"	e	enum:__anon4
CHECK_SUBOBJECTS	types.h	/^	CHECK_SEGMENTATION, CHECK_ASSOC, CHECK_SUBOBJECTS,$/;"	e	enum:__anon4
CHECK_SUBPCPROTOS	types.h	/^	CHECK_SUBPCPROTOS, CHECK_PCPROTOS, CHECK_PCOPROTOS,$/;"	e	enum:__anon4
CHECK_SUBPROFILES	types.h	/^	CHECK_MAPSOM, CHECK_SUBPROFILES, CHECK_PROFILES, CHECK_PATTERNS,$/;"	e	enum:__anon4
CHECK_SUBPSFPROTOS	types.h	/^	CHECK_SUBPSFPROTOS, CHECK_PSFPROTOS,$/;"	e	enum:__anon4
CHECK_SUBTRACTED	types.h	/^        CHECK_SUBTRACTED, CHECK_FILTERED, CHECK_OBJECTS, CHECK_APERTURES,$/;"	e	enum:__anon4
CLEANUP_NFILES	fits/fitscleanup.c	29;"	d	file:
CLEAN_ZONE	clean.h	21;"	d
CLEAN_ZONE	cuda/cudatypes.h	25;"	d
COMPILE	Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMPILE	fits/Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMPILE	levmar/Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMPILE	wcs/Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMPLETE	extract.h	/^typedef	enum		{COMPLETE, INCOMPLETE, NONOBJECT, OBJECT}$/;"	e	enum:__anon2
COMPRESS_BASEBYTE	fits/fitscat.h	/^typedef enum {COMPRESS_NONE, COMPRESS_BASEBYTE, COMPRESS_PREVPIX} compresstype;$/;"	e	enum:__anon30
COMPRESS_NONE	fits/fitscat.h	/^typedef enum {COMPRESS_NONE, COMPRESS_BASEBYTE, COMPRESS_PREVPIX} compresstype;$/;"	e	enum:__anon30
COMPRESS_PREVPIX	fits/fitscat.h	/^typedef enum {COMPRESS_NONE, COMPRESS_BASEBYTE, COMPRESS_PREVPIX} compresstype;$/;"	e	enum:__anon30
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	fits/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	levmar/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	wcs/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	fits/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	levmar/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	wcs/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONNEX	neurro.h	19;"	d
COPYRIGHT	define.h	31;"	d
COPYRIGHT	fits/fitscat_defs.h	27;"	d
COPYRIGHT	ldactoasc.h	32;"	d
CPP	Makefile	/^CPP = gcc -E$/;"	m
CPP	fits/Makefile	/^CPP = cc -E$/;"	m
CPP	levmar/Makefile	/^CPP = cc -E$/;"	m
CPP	wcs/Makefile	/^CPP = cc -E$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	fits/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	levmar/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	wcs/Makefile	/^CPPFLAGS = $/;"	m
CROWD_THRESHOLD	photom.h	24;"	d
CTAGS	Makefile	/^CTAGS = ctags$/;"	m
CTAGS	fits/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	levmar/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	wcs/Makefile	/^CTAGS = ctags$/;"	m
CUDAANALYSE_H_	cuda/cudaanalyse.h	9;"	d
CUDABACK_H_	cuda/cudaback.h	3;"	d
CUDACLEAN_H_	cuda/cudaclean.h	2;"	d
CUDADEBLEND_H_	cuda/cudadeblend.h	9;"	d
CUDAFILTER_H_	cuda/cudafilter.h	9;"	d
CUDAINIT_H_	cuda/cudainit.h	9;"	d
CUDASCAN_H_	cuda/cudadetection.h	9;"	d
CUDATYPES_H_	cuda/cudatypes.h	9;"	d
CUDA_BIN_PATH	cuda/Makefile	/^CUDA_BIN_PATH   ?= $(CUDA_PATH)\/bin$/;"	m
CUDA_INC_PATH	cuda/Makefile	/^CUDA_INC_PATH   ?= $(CUDA_PATH)\/include$/;"	m
CUDA_LIB_PATH	cuda/Makefile	/^    CUDA_LIB_PATH  ?= $(CUDA_PATH)\/lib$/;"	m
CUDA_LIB_PATH	cuda/Makefile	/^    CUDA_LIB_PATH  ?= $(CUDA_PATH)\/lib64$/;"	m
CUDA_LIB_PATH	cuda/Makefile	/^  CUDA_LIB_PATH  ?= $(CUDA_PATH)\/lib$/;"	m
CUDA_PATH	cuda/Makefile	/^CUDA_PATH       ?= \/usr\/local\/cuda-5.0$/;"	m
CUDPP_LIB	Makefile	/^CUDPP_LIB = \/usr\/local\/lib\/libcudpp.a$/;"	m
CXX	fits/Makefile	/^CXX = g++$/;"	m
CXX	levmar/Makefile	/^CXX = g++$/;"	m
CXX	wcs/Makefile	/^CXX = g++$/;"	m
CXXCPP	fits/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	levmar/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	wcs/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXDEPMODE	fits/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	levmar/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	wcs/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	fits/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	levmar/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	wcs/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CYGPATH_W	Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	fits/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	levmar/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	wcs/Makefile	/^CYGPATH_W = echo$/;"	m
D2R	wcs/wcsmath.h	40;"	d
D2R	wcs/wcsmath.h	56;"	d
DARWIN	cuda/Makefile	/^DARWIN = $(strip $(findstring DARWIN, $(OSUPPER)))$/;"	m
DATA_BUFSIZE	cuda/cudatypes.h	47;"	d
DATA_BUFSIZE	define.h	39;"	d
DATA_BUFSIZE	fits/fitscat_defs.h	41;"	d
DATE	Makefile	/^DATE = `date +"%Y-%m-%d"`$/;"	m
DATE	define.h	22;"	d
DATE	fits/fitscat_defs.h	20;"	d
DATE	ldactoasc.h	20;"	d
DATE2	Makefile	/^DATE2 = Fri Jan 11 2013$/;"	m
DATE2	fits/Makefile	/^DATE2 = Thu Jan 10 2013$/;"	m
DATE2	levmar/Makefile	/^DATE2 = Thu Jan 10 2013$/;"	m
DATE2	wcs/Makefile	/^DATE2 = Thu Jan 10 2013$/;"	m
DATE3	Makefile	/^DATE3 = January 2013$/;"	m
DATE3	fits/Makefile	/^DATE3 = January 2013$/;"	m
DATE3	levmar/Makefile	/^DATE3 = January 2013$/;"	m
DATE3	wcs/Makefile	/^DATE3 = January 2013$/;"	m
DEFAULT_INCLUDES	Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)$/;"	m
DEFAULT_INCLUDES	fits/Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)$/;"	m
DEFAULT_INCLUDES	levmar/Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)$/;"	m
DEFAULT_INCLUDES	wcs/Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)$/;"	m
DEFS	Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	fits/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	levmar/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	wcs/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEG	astrom.h	25;"	d
DEG	cuda/cudatypes.h	62;"	d
DEG	define.h	53;"	d
DEG	fitswcs.h	26;"	d
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	fits/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	levmar/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	wcs/Makefile	/^DEPDIR = .deps$/;"	m
DETECT_FIELD	field.h	20;"	d
DEXP	define.h	127;"	d
DEXP	ldactoasc.h	80;"	d
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	fits/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	levmar/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	wcs/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(srcdir)\/Makefile.in$/;"	m
DIST_COMMON	fits/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(srcdir)\/Makefile.in$/;"	m
DIST_COMMON	levmar/Makefile	/^DIST_COMMON = README $(srcdir)\/Makefile.am $(srcdir)\/Makefile.in$/;"	m
DIST_COMMON	wcs/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(srcdir)\/Makefile.in$/;"	m
DIST_SOURCES	Makefile	/^DIST_SOURCES = $(ldactoasc_SOURCES) $(sex_SOURCES)$/;"	m
DIST_SOURCES	fits/Makefile	/^DIST_SOURCES = $(libfits_a_SOURCES)$/;"	m
DIST_SOURCES	levmar/Makefile	/^DIST_SOURCES = $(liblevmar_a_SOURCES) $(EXTRA_liblevmar_a_SOURCES)$/;"	m
DIST_SOURCES	wcs/Makefile	/^DIST_SOURCES = $(libwcs_c_a_SOURCES)$/;"	m
DIST_SUBDIRS	Makefile	/^DIST_SUBDIRS = $(SUBDIRS)$/;"	m
ECHO	fits/Makefile	/^ECHO = echo$/;"	m
ECHO	levmar/Makefile	/^ECHO = echo$/;"	m
ECHO	wcs/Makefile	/^ECHO = echo$/;"	m
ECHO_C	Makefile	/^ECHO_C = $/;"	m
ECHO_C	fits/Makefile	/^ECHO_C = $/;"	m
ECHO_C	levmar/Makefile	/^ECHO_C = $/;"	m
ECHO_C	wcs/Makefile	/^ECHO_C = $/;"	m
ECHO_N	Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	fits/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	levmar/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	wcs/Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	Makefile	/^ECHO_T = $/;"	m
ECHO_T	fits/Makefile	/^ECHO_T = $/;"	m
ECHO_T	levmar/Makefile	/^ECHO_T = $/;"	m
ECHO_T	wcs/Makefile	/^ECHO_T = $/;"	m
EGREP	Makefile	/^EGREP = \/bin\/grep -E$/;"	m
EGREP	fits/Makefile	/^EGREP = \/bin\/grep -E$/;"	m
EGREP	levmar/Makefile	/^EGREP = \/bin\/grep -E$/;"	m
EGREP	wcs/Makefile	/^EGREP = \/bin\/grep -E$/;"	m
ENCODE_OFFSET	fits/fitscheck.c	28;"	d	file:
EPS	back.c	336;"	d	file:
EPS	cuda/cudatypes.h	41;"	d
EPS	som.c	513;"	d	file:
EPS	som.c	557;"	d	file:
EPSILON	levmar/lm.c	35;"	d	file:
EPSILON	levmar/lmbc.c	35;"	d	file:
ETAGS	Makefile	/^ETAGS = etags$/;"	m
ETAGS	fits/Makefile	/^ETAGS = etags$/;"	m
ETAGS	levmar/Makefile	/^ETAGS = etags$/;"	m
ETAGS	wcs/Makefile	/^ETAGS = etags$/;"	m
EXECUTABLE	define.h	30;"	d
EXEEXT	Makefile	/^EXEEXT = $/;"	m
EXEEXT	fits/Makefile	/^EXEEXT = $/;"	m
EXEEXT	levmar/Makefile	/^EXEEXT = $/;"	m
EXEEXT	wcs/Makefile	/^EXEEXT = $/;"	m
EXIT_FAILURE	define.h	96;"	d
EXIT_FAILURE	fits/fitscat_defs.h	71;"	d
EXIT_FAILURE	ldactoasc.h	69;"	d
EXIT_SUCCESS	define.h	93;"	d
EXIT_SUCCESS	fits/fitscat_defs.h	68;"	d
EXIT_SUCCESS	ldactoasc.h	66;"	d
EXTRA_LDFLAGS	cuda/Makefile	/^EXTRA_LDFLAGS   ?=$/;"	m
EXTRA_NVCCFLAGS	cuda/Makefile	/^EXTRA_NVCCFLAGS ?=$/;"	m
EXTRA_liblevmar_a_SOURCES	levmar/Makefile	/^EXTRA_liblevmar_a_SOURCES = Axb_core.c lmbc_core.c lm_core.c \\$/;"	m
EXT_MINAREA	cuda/cudatypes.h	60;"	d
F77	fits/Makefile	/^F77 = gfortran$/;"	m
F77	levmar/Makefile	/^F77 = gfortran$/;"	m
F77	wcs/Makefile	/^F77 = gfortran$/;"	m
FABS	levmar/lm.h	55;"	d
FBSIZE	define.h	107;"	d
FBSIZE	fits/fitscat.h	55;"	d
FFLAGS	fits/Makefile	/^FFLAGS = -g -O2$/;"	m
FFLAGS	levmar/Makefile	/^FFLAGS = -g -O2$/;"	m
FFLAGS	wcs/Makefile	/^FFLAGS = -g -O2$/;"	m
FFTW_ERROR	Makefile	/^FFTW_ERROR = $/;"	m
FFTW_ERROR	fits/Makefile	/^FFTW_ERROR = $/;"	m
FFTW_ERROR	levmar/Makefile	/^FFTW_ERROR = $/;"	m
FFTW_ERROR	wcs/Makefile	/^FFTW_ERROR = $/;"	m
FFTW_LIBS	Makefile	/^FFTW_LIBS = -L\/usr\/local\/lib -lfftw3_threads -lfftw3$/;"	m
FFTW_LIBS	fits/Makefile	/^FFTW_LIBS = -L\/usr\/local\/lib -lfftw3_threads -lfftw3$/;"	m
FFTW_LIBS	levmar/Makefile	/^FFTW_LIBS = -L\/usr\/local\/lib -lfftw3_threads -lfftw3$/;"	m
FFTW_LIBS	wcs/Makefile	/^FFTW_LIBS = -L\/usr\/local\/lib -lfftw3_threads -lfftw3$/;"	m
FILTEST	filter.c	211;"	d	file:
FILTEST	retina.c	70;"	d	file:
FIND_NOSTRICT	key.h	20;"	d
FIND_STRICT	key.h	19;"	d
FITSREADF	fitswcs.c	323;"	d	file:
FITSREADF	fitswcs.c	587;"	d	file:
FITSREADI	fitswcs.c	328;"	d	file:
FITSREADI	fitswcs.c	588;"	d	file:
FITSREADS	fitswcs.c	333;"	d	file:
FITSREADS	fitswcs.c	589;"	d	file:
FITSREADS	readimage.c	231;"	d	file:
FITSREADS	readimage.c	266;"	d	file:
FITSTOF	define.h	109;"	d
FITSTOI	define.h	115;"	d
FITSTOS	define.h	120;"	d
FITS_10	prefs.h	/^  	FITS_LDAC, FITS_TPX, FITS_10}	 cattype;$/;"	e	enum:__anon32
FITS_LDAC	prefs.h	/^  	FITS_LDAC, FITS_TPX, FITS_10}	 cattype;$/;"	e	enum:__anon32
FITS_SUFFIX	fits/fitscat.h	51;"	d
FITS_TPX	prefs.h	/^  	FITS_LDAC, FITS_TPX, FITS_10}	 cattype;$/;"	e	enum:__anon32
FIXED	prefs.h	/^typedef	enum	{PNONE, FIXED, AUTO} aperttype;$/;"	e	enum:__anon31
FLAG	define.h	194;"	d
FLAGTYPE	cuda/cudatypes.h	/^typedef	unsigned int	FLAGTYPE;	\/* Flag type *\/$/;"	t
FLAGTYPE	fits/fitscat.h	/^typedef	unsigned int	FLAGTYPE;		\/* Flag type *\/$/;"	t
FLAG_AND	prefs.h	/^typedef enum	{FLAG_OR, FLAG_AND, FLAG_MIN, FLAG_MAX, FLAG_MOST} flagtype;$/;"	e	enum:__anon35
FLAG_BUFSIZE	flag.h	19;"	d
FLAG_FIELD	field.h	22;"	d
FLAG_MAX	prefs.h	/^typedef enum	{FLAG_OR, FLAG_AND, FLAG_MIN, FLAG_MAX, FLAG_MOST} flagtype;$/;"	e	enum:__anon35
FLAG_MIN	prefs.h	/^typedef enum	{FLAG_OR, FLAG_AND, FLAG_MIN, FLAG_MAX, FLAG_MOST} flagtype;$/;"	e	enum:__anon35
FLAG_MOST	prefs.h	/^typedef enum	{FLAG_OR, FLAG_AND, FLAG_MIN, FLAG_MAX, FLAG_MOST} flagtype;$/;"	e	enum:__anon35
FLAG_OR	prefs.h	/^typedef enum	{FLAG_OR, FLAG_AND, FLAG_MIN, FLAG_MAX, FLAG_MOST} flagtype;$/;"	e	enum:__anon35
FPRINTF	define.h	189;"	d
FPRINTF	ldactoasc.h	133;"	d
FSEEKO	define.h	77;"	d
FSEEKO	define.h	80;"	d
FSEEKO	fits/fitscat_defs.h	81;"	d
FSEEKO	fits/fitscat_defs.h	84;"	d
FTELLO	define.h	78;"	d
FTELLO	define.h	81;"	d
FTELLO	fits/fitscat_defs.h	82;"	d
FTELLO	fits/fitscat_defs.h	85;"	d
FULL	prefs.h	/^typedef enum	{QUIET, NORM, WARN, FULL} verbosetype;$/;"	e	enum:__anon38
FUNC_STATE	levmar/lmbc_core.c	/^struct FUNC_STATE{$/;"	s	file:
FUNC_STATE	levmar/lmbc_core.c	26;"	d	file:
FUNC_STATE	levmar/lmbc_core.c	901;"	d	file:
GBYTE	fits/fitscat_defs.h	40;"	d
GCC	cuda/Makefile	/^GCC             ?= g++$/;"	m
GEMM	levmar/misc_core.c	42;"	d	file:
GEMM	levmar/misc_core.c	44;"	d	file:
GENCODE_FLAGS	cuda/Makefile	/^GENCODE_FLAGS   :=  $(GENCODE_SM30) $/;"	m
GENCODE_SM30	cuda/Makefile	/^GENCODE_SM30    := -gencode arch=compute_30,code=sm_30$/;"	m
GEQP3	levmar/lmlec_core.c	38;"	d	file:
GEQP3	levmar/lmlec_core.c	652;"	d	file:
GEQRF	levmar/Axb_core.c	39;"	d	file:
GEQRF	levmar/Axb_core.c	812;"	d	file:
GESDD	levmar/Axb_core.c	47;"	d	file:
GESDD	levmar/Axb_core.c	820;"	d	file:
GESDD	levmar/misc_core.c	51;"	d	file:
GESVD	levmar/Axb_core.c	46;"	d	file:
GESVD	levmar/Axb_core.c	819;"	d	file:
GESVD	levmar/misc_core.c	50;"	d	file:
GETRF	levmar/Axb_core.c	44;"	d	file:
GETRF	levmar/Axb_core.c	817;"	d	file:
GETRF	levmar/Axb_core.c	832;"	d	file:
GETRF	levmar/Axb_core.c	966;"	d	file:
GETRS	levmar/Axb_core.c	45;"	d	file:
GETRS	levmar/Axb_core.c	818;"	d	file:
GETRS	levmar/Axb_core.c	833;"	d	file:
GETRS	levmar/Axb_core.c	967;"	d	file:
GLIMIT	som.c	345;"	d	file:
GLIMIT	som.c	503;"	d	file:
GLOBAL	prefs.h	/^typedef enum	{GLOBAL, LOCAL}			pbacktype;$/;"	e	enum:__anon37
GOLD	som.c	342;"	d	file:
GOLD	som.c	500;"	d	file:
GREP	Makefile	/^GREP = \/bin\/grep$/;"	m
GREP	fits/Makefile	/^GREP = \/bin\/grep$/;"	m
GREP	levmar/Makefile	/^GREP = \/bin\/grep$/;"	m
GREP	wcs/Makefile	/^GREP = \/bin\/grep$/;"	m
GROWTH_NSIG	growth.h	21;"	d
GROWTH_NSTEP	growth.h	19;"	d
GROWTH_OVERSAMP	growth.h	20;"	d
HAVE_LAPACK	levmar/lm.h	29;"	d
HAVE_LAPACK	levmar/lm.h	30;"	d
HAVE_SYS_MMAN_H	fits/fitscat_defs.h	21;"	d
H_BOOL	fits/fitscat.h	/^typedef enum            {H_INT, H_FLOAT, H_EXPO, H_BOOL, H_STRING, H_STRINGS,$/;"	e	enum:__anon26
H_COMMENT	fits/fitscat.h	/^			H_COMMENT, H_HCOMMENT, H_KEY}	h_type;$/;"	e	enum:__anon26
H_EXPO	fits/fitscat.h	/^typedef enum            {H_INT, H_FLOAT, H_EXPO, H_BOOL, H_STRING, H_STRINGS,$/;"	e	enum:__anon26
H_FLOAT	fits/fitscat.h	/^typedef enum            {H_INT, H_FLOAT, H_EXPO, H_BOOL, H_STRING, H_STRINGS,$/;"	e	enum:__anon26
H_HCOMMENT	fits/fitscat.h	/^			H_COMMENT, H_HCOMMENT, H_KEY}	h_type;$/;"	e	enum:__anon26
H_INT	fits/fitscat.h	/^typedef enum            {H_INT, H_FLOAT, H_EXPO, H_BOOL, H_STRING, H_STRINGS,$/;"	e	enum:__anon26
H_KEY	fits/fitscat.h	/^			H_COMMENT, H_HCOMMENT, H_KEY}	h_type;$/;"	e	enum:__anon26
H_STRING	fits/fitscat.h	/^typedef enum            {H_INT, H_FLOAT, H_EXPO, H_BOOL, H_STRING, H_STRINGS,$/;"	e	enum:__anon26
H_STRINGS	fits/fitscat.h	/^typedef enum            {H_INT, H_FLOAT, H_EXPO, H_BOOL, H_STRING, H_STRINGS,$/;"	e	enum:__anon26
IMAGE	prefs.h	/^typedef enum	{IMAGE, AFILE}			back_origintype;$/;"	e	enum:__anon36
INCLUDES	cuda/Makefile	/^INCLUDES      := -I$(CUDA_INC_PATH) -I. -I.. -I$(CUDA_PATH)\/samples\/common\/inc$/;"	m
INCOMPLETE	extract.h	/^typedef	enum		{COMPLETE, INCOMPLETE, NONOBJECT, OBJECT}$/;"	e	enum:__anon2
INPUT_MAXDIM	som.h	19;"	d
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	fits/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	levmar/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	wcs/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	fits/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	levmar/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	wcs/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	fits/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	levmar/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	wcs/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	fits/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	levmar/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	wcs/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	fits/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	levmar/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	wcs/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	fits/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	levmar/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	wcs/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTITUTE	define.h	33;"	d
INSTITUTE	fits/fitscat_defs.h	28;"	d
INSTITUTE	ldactoasc.h	34;"	d
INTERPF	image.h	22;"	d
INTERPH	image.h	20;"	d
INTERPW	image.h	19;"	d
INTERP_ALL	prefs.h	/^typedef enum	{INTERP_NONE, INTERP_VARONLY, INTERP_ALL} interptype;$/;"	e	enum:__anon42
INTERP_BILINEAR	profit.h	/^typedef enum	{INTERP_NEARESTNEIGHBOUR, INTERP_BILINEAR, INTERP_LANCZOS2,$/;"	e	enum:__anon20
INTERP_FIELD	field.h	27;"	d
INTERP_LANCZOS2	profit.h	/^typedef enum	{INTERP_NEARESTNEIGHBOUR, INTERP_BILINEAR, INTERP_LANCZOS2,$/;"	e	enum:__anon20
INTERP_LANCZOS3	profit.h	/^		INTERP_LANCZOS3, INTERP_LANCZOS4}       interpenum;$/;"	e	enum:__anon20
INTERP_LANCZOS4	profit.h	/^		INTERP_LANCZOS3, INTERP_LANCZOS4}       interpenum;$/;"	e	enum:__anon20
INTERP_MAXKERNELWIDTH	profit.h	39;"	d
INTERP_NEARESTNEIGHBOUR	profit.h	/^typedef enum	{INTERP_NEARESTNEIGHBOUR, INTERP_BILINEAR, INTERP_LANCZOS2,$/;"	e	enum:__anon20
INTERP_NONE	prefs.h	/^typedef enum	{INTERP_NONE, INTERP_VARONLY, INTERP_ALL} interptype;$/;"	e	enum:__anon42
INTERP_VARONLY	prefs.h	/^typedef enum	{INTERP_NONE, INTERP_VARONLY, INTERP_ALL} interptype;$/;"	e	enum:__anon42
ITMAX	som.c	346;"	d	file:
ITMAX	som.c	504;"	d	file:
ITMAX	som.c	512;"	d	file:
ITMAX	som.c	556;"	d	file:
JU2TROP	astrom.h	29;"	d
JU2TROP	fitswcs.h	32;"	d
KBYTE	fits/fitscat_defs.h	38;"	d
KINGLONG	fits/fitscat.h	/^typedef	long			KINGLONG;	\/* better than nothing *\/$/;"	t
KINGLONG	fits/fitscat.h	/^typedef	long long		KINGLONG;	\/* for large sizes *\/$/;"	t
KINGSIZE_T	fits/fitscat.h	/^typedef	size_t			KINGSIZE_T;	\/* better than nothing *\/$/;"	t
KINGSIZE_T	fits/fitscat.h	/^typedef	unsigned long long	KINGSIZE_T;	\/* for large sizes *\/$/;"	t
KRON_NSIG	photom.h	20;"	d
LARGER_BLK_HEIGHT	cuda/cudatypes.h	19;"	d
LARGER_BLK_WIDTH	cuda/cudatypes.h	18;"	d
LAYERS	neurro.h	18;"	d
LCAT	levmar/misc.h	35;"	d
LCAT_	levmar/misc.h	34;"	d
LDFLAGS	Makefile	/^LDFLAGS = -static -shared-libgcc  $/;"	m
LDFLAGS	cuda/Makefile	/^      LDFLAGS   := -L$(CUDA_LIB_PATH) -lcudadevrt$/;"	m
LDFLAGS	fits/Makefile	/^LDFLAGS = -static -shared-libgcc  $/;"	m
LDFLAGS	levmar/Makefile	/^LDFLAGS = -static -shared-libgcc  $/;"	m
LDFLAGS	wcs/Makefile	/^LDFLAGS = -static -shared-libgcc  $/;"	m
LESSBIG	cuda/cudatypes.h	46;"	d
LESSBIG	define.h	38;"	d
LEVMAR_BC_DER	levmar/lmbc_core.c	/^int LEVMAR_BC_DER($/;"	f
LEVMAR_BC_DER	levmar/lmbc_core.c	30;"	d	file:
LEVMAR_BC_DER	levmar/lmbc_core.c	905;"	d	file:
LEVMAR_BC_DIF	levmar/lmbc_core.c	/^int LEVMAR_BC_DIF($/;"	f
LEVMAR_BC_DIF	levmar/lmbc_core.c	31;"	d	file:
LEVMAR_BC_DIF	levmar/lmbc_core.c	909;"	d	file:
LEVMAR_BLEC_DER	levmar/lmblec_core.c	/^int LEVMAR_BLEC_DER($/;"	f
LEVMAR_BLEC_DER	levmar/lmblec_core.c	392;"	d	file:
LEVMAR_BLEC_DER	levmar/lmblec_core.c	70;"	d	file:
LEVMAR_BLEC_DIF	levmar/lmblec_core.c	/^int LEVMAR_BLEC_DIF($/;"	f
LEVMAR_BLEC_DIF	levmar/lmblec_core.c	393;"	d	file:
LEVMAR_BLEC_DIF	levmar/lmblec_core.c	71;"	d	file:
LEVMAR_BOX_CHECK	levmar/lmbc_core.c	29;"	d	file:
LEVMAR_BOX_CHECK	levmar/lmbc_core.c	904;"	d	file:
LEVMAR_BOX_CHECK	levmar/lmblec_core.c	384;"	d	file:
LEVMAR_BOX_CHECK	levmar/lmblec_core.c	64;"	d	file:
LEVMAR_BOX_CHECK	levmar/misc_core.c	/^int LEVMAR_BOX_CHECK(LM_REAL *lb, LM_REAL *ub, int m)$/;"	f
LEVMAR_BOX_CHECK	levmar/misc_core.c	1101;"	d	file:
LEVMAR_BOX_CHECK	levmar/misc_core.c	33;"	d	file:
LEVMAR_CHKJAC	levmar/misc_core.c	/^void LEVMAR_CHKJAC($/;"	f
LEVMAR_CHKJAC	levmar/misc_core.c	1106;"	d	file:
LEVMAR_CHKJAC	levmar/misc_core.c	26;"	d	file:
LEVMAR_CHOLESKY	levmar/misc_core.c	/^int LEVMAR_CHOLESKY(LM_REAL *C, LM_REAL *W, int m)$/;"	f
LEVMAR_CHOLESKY	levmar/misc_core.c	1102;"	d	file:
LEVMAR_CHOLESKY	levmar/misc_core.c	63;"	d	file:
LEVMAR_CORCOEF	levmar/misc_core.c	/^LM_REAL LEVMAR_CORCOEF(LM_REAL *covar, int m, int i, int j)$/;"	f
LEVMAR_CORCOEF	levmar/misc_core.c	1105;"	d	file:
LEVMAR_CORCOEF	levmar/misc_core.c	32;"	d	file:
LEVMAR_COVAR	levmar/lm_core.c	32;"	d	file:
LEVMAR_COVAR	levmar/lm_core.c	803;"	d	file:
LEVMAR_COVAR	levmar/lmbc_core.c	36;"	d	file:
LEVMAR_COVAR	levmar/lmbc_core.c	912;"	d	file:
LEVMAR_COVAR	levmar/lmblec_core.c	389;"	d	file:
LEVMAR_COVAR	levmar/lmblec_core.c	72;"	d	file:
LEVMAR_COVAR	levmar/lmlec_core.c	35;"	d	file:
LEVMAR_COVAR	levmar/lmlec_core.c	645;"	d	file:
LEVMAR_COVAR	levmar/misc_core.c	/^int LEVMAR_COVAR(LM_REAL *JtJ, LM_REAL *C, LM_REAL sumsq, int m, int n)$/;"	f
LEVMAR_COVAR	levmar/misc_core.c	1103;"	d	file:
LEVMAR_COVAR	levmar/misc_core.c	30;"	d	file:
LEVMAR_DER	levmar/lm_core.c	/^int LEVMAR_DER($/;"	f
LEVMAR_DER	levmar/lm_core.c	26;"	d	file:
LEVMAR_DER	levmar/lm_core.c	799;"	d	file:
LEVMAR_DER	levmar/lmlec_core.c	32;"	d	file:
LEVMAR_DER	levmar/lmlec_core.c	649;"	d	file:
LEVMAR_DIF	levmar/lm_core.c	/^int LEVMAR_DIF($/;"	f
LEVMAR_DIF	levmar/lm_core.c	27;"	d	file:
LEVMAR_DIF	levmar/lm_core.c	800;"	d	file:
LEVMAR_DIF	levmar/lmlec_core.c	33;"	d	file:
LEVMAR_DIF	levmar/lmlec_core.c	650;"	d	file:
LEVMAR_FDIF_CENT_JAC_APPROX	levmar/lm_core.c	29;"	d	file:
LEVMAR_FDIF_CENT_JAC_APPROX	levmar/lm_core.c	802;"	d	file:
LEVMAR_FDIF_CENT_JAC_APPROX	levmar/lmbc_core.c	33;"	d	file:
LEVMAR_FDIF_CENT_JAC_APPROX	levmar/lmbc_core.c	911;"	d	file:
LEVMAR_FDIF_CENT_JAC_APPROX	levmar/misc_core.c	/^void LEVMAR_FDIF_CENT_JAC_APPROX($/;"	f
LEVMAR_FDIF_CENT_JAC_APPROX	levmar/misc_core.c	1108;"	d	file:
LEVMAR_FDIF_CENT_JAC_APPROX	levmar/misc_core.c	28;"	d	file:
LEVMAR_FDIF_FORW_JAC_APPROX	levmar/lm_core.c	28;"	d	file:
LEVMAR_FDIF_FORW_JAC_APPROX	levmar/lm_core.c	801;"	d	file:
LEVMAR_FDIF_FORW_JAC_APPROX	levmar/lmbc_core.c	32;"	d	file:
LEVMAR_FDIF_FORW_JAC_APPROX	levmar/lmbc_core.c	910;"	d	file:
LEVMAR_FDIF_FORW_JAC_APPROX	levmar/lmblec_core.c	388;"	d	file:
LEVMAR_FDIF_FORW_JAC_APPROX	levmar/lmblec_core.c	73;"	d	file:
LEVMAR_FDIF_FORW_JAC_APPROX	levmar/lmlec_core.c	36;"	d	file:
LEVMAR_FDIF_FORW_JAC_APPROX	levmar/lmlec_core.c	644;"	d	file:
LEVMAR_FDIF_FORW_JAC_APPROX	levmar/misc_core.c	/^void LEVMAR_FDIF_FORW_JAC_APPROX($/;"	f
LEVMAR_FDIF_FORW_JAC_APPROX	levmar/misc_core.c	1107;"	d	file:
LEVMAR_FDIF_FORW_JAC_APPROX	levmar/misc_core.c	27;"	d	file:
LEVMAR_L2NRMXMY	levmar/lm_core.c	31;"	d	file:
LEVMAR_L2NRMXMY	levmar/lm_core.c	805;"	d	file:
LEVMAR_L2NRMXMY	levmar/lmbc_core.c	35;"	d	file:
LEVMAR_L2NRMXMY	levmar/lmbc_core.c	914;"	d	file:
LEVMAR_L2NRMXMY	levmar/misc_core.c	/^LM_REAL LEVMAR_L2NRMXMY(LM_REAL *e, LM_REAL *x, LM_REAL *y, int n)$/;"	f
LEVMAR_L2NRMXMY	levmar/misc_core.c	1110;"	d	file:
LEVMAR_L2NRMXMY	levmar/misc_core.c	34;"	d	file:
LEVMAR_LEC_DER	levmar/lmblec_core.c	390;"	d	file:
LEVMAR_LEC_DER	levmar/lmblec_core.c	68;"	d	file:
LEVMAR_LEC_DER	levmar/lmlec_core.c	/^int LEVMAR_LEC_DER($/;"	f
LEVMAR_LEC_DER	levmar/lmlec_core.c	30;"	d	file:
LEVMAR_LEC_DER	levmar/lmlec_core.c	647;"	d	file:
LEVMAR_LEC_DIF	levmar/lmblec_core.c	391;"	d	file:
LEVMAR_LEC_DIF	levmar/lmblec_core.c	69;"	d	file:
LEVMAR_LEC_DIF	levmar/lmlec_core.c	/^int LEVMAR_LEC_DIF($/;"	f
LEVMAR_LEC_DIF	levmar/lmlec_core.c	31;"	d	file:
LEVMAR_LEC_DIF	levmar/lmlec_core.c	648;"	d	file:
LEVMAR_LUINVERSE	levmar/misc_core.c	/^static int LEVMAR_LUINVERSE(LM_REAL *A, LM_REAL *B, int m)$/;"	f	file:
LEVMAR_LUINVERSE	levmar/misc_core.c	1100;"	d	file:
LEVMAR_LUINVERSE	levmar/misc_core.c	66;"	d	file:
LEVMAR_PSEUDOINVERSE	levmar/misc_core.c	/^static int LEVMAR_PSEUDOINVERSE(LM_REAL *A, LM_REAL *B, int m)$/;"	f	file:
LEVMAR_PSEUDOINVERSE	levmar/misc_core.c	1099;"	d	file:
LEVMAR_PSEUDOINVERSE	levmar/misc_core.c	37;"	d	file:
LEVMAR_STDDEV	levmar/misc_core.c	/^LM_REAL LEVMAR_STDDEV(LM_REAL *covar, int m, int i)$/;"	f
LEVMAR_STDDEV	levmar/misc_core.c	1104;"	d	file:
LEVMAR_STDDEV	levmar/misc_core.c	31;"	d	file:
LEVMAR_TRANS_MAT_MAT_MULT	levmar/lm_core.c	30;"	d	file:
LEVMAR_TRANS_MAT_MAT_MULT	levmar/lm_core.c	804;"	d	file:
LEVMAR_TRANS_MAT_MAT_MULT	levmar/lmbc_core.c	34;"	d	file:
LEVMAR_TRANS_MAT_MAT_MULT	levmar/lmbc_core.c	913;"	d	file:
LEVMAR_TRANS_MAT_MAT_MULT	levmar/lmlec_core.c	34;"	d	file:
LEVMAR_TRANS_MAT_MAT_MULT	levmar/lmlec_core.c	646;"	d	file:
LEVMAR_TRANS_MAT_MAT_MULT	levmar/misc_core.c	/^void LEVMAR_TRANS_MAT_MAT_MULT(LM_REAL *a, LM_REAL *b, int n, int m)$/;"	f
LEVMAR_TRANS_MAT_MAT_MULT	levmar/misc_core.c	1109;"	d	file:
LEVMAR_TRANS_MAT_MAT_MULT	levmar/misc_core.c	29;"	d	file:
LIBOBJS	Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	fits/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	levmar/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	wcs/Makefile	/^LIBOBJS = $/;"	m
LIBRARIES	fits/Makefile	/^LIBRARIES = $(noinst_LIBRARIES)$/;"	m
LIBRARIES	levmar/Makefile	/^LIBRARIES = $(noinst_LIBRARIES)$/;"	m
LIBRARIES	wcs/Makefile	/^LIBRARIES = $(noinst_LIBRARIES)$/;"	m
LIBS	Makefile	/^LIBS = -L\/usr\/local\/atlas\/lib -llapack -lptcblas -lcblas -latlas -L\/usr\/local\/lib -lfftw3_threads -lfftw3 -lpthread -lm $/;"	m
LIBS	fits/Makefile	/^LIBS = -L\/usr\/local\/atlas\/lib -llapack -lptcblas -lcblas -latlas -L\/usr\/local\/lib -lfftw3_threads -lfftw3 -lpthread -lm $/;"	m
LIBS	levmar/Makefile	/^LIBS = -L\/usr\/local\/atlas\/lib -llapack -lptcblas -lcblas -latlas -L\/usr\/local\/lib -lfftw3_threads -lfftw3 -lpthread -lm $/;"	m
LIBS	wcs/Makefile	/^LIBS = -L\/usr\/local\/atlas\/lib -llapack -lptcblas -lcblas -latlas -L\/usr\/local\/lib -lfftw3_threads -lfftw3 -lpthread -lm $/;"	m
LIBTOOL	fits/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL	levmar/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL	wcs/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LINK	Makefile	/^LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@$/;"	m
LINK	fits/Makefile	/^LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\$/;"	m
LINK	levmar/Makefile	/^LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\$/;"	m
LINK	wcs/Makefile	/^LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\$/;"	m
LINSET	wcs/lin.h	70;"	d
LINSOLVERS_RETAIN_MEMORY	levmar/lm.h	38;"	d
LMBC_DIF_DATA	levmar/lmbc_core.c	/^struct LMBC_DIF_DATA{$/;"	s	file:
LMBC_DIF_DATA	levmar/lmbc_core.c	37;"	d	file:
LMBC_DIF_DATA	levmar/lmbc_core.c	906;"	d	file:
LMBC_DIF_FUNC	levmar/lmbc_core.c	/^void LMBC_DIF_FUNC(LM_REAL *p, LM_REAL *hx, int m, int n, void *data)$/;"	f
LMBC_DIF_FUNC	levmar/lmbc_core.c	38;"	d	file:
LMBC_DIF_FUNC	levmar/lmbc_core.c	907;"	d	file:
LMBC_DIF_JACF	levmar/lmbc_core.c	/^void LMBC_DIF_JACF(LM_REAL *p, LM_REAL *jac, int m, int n, void *data)$/;"	f
LMBC_DIF_JACF	levmar/lmbc_core.c	39;"	d	file:
LMBC_DIF_JACF	levmar/lmbc_core.c	908;"	d	file:
LMBLEC_DATA	levmar/lmblec_core.c	/^struct LMBLEC_DATA{$/;"	s	file:
LMBLEC_DATA	levmar/lmblec_core.c	385;"	d	file:
LMBLEC_DATA	levmar/lmblec_core.c	65;"	d	file:
LMBLEC_FUNC	levmar/lmblec_core.c	/^static void LMBLEC_FUNC(LM_REAL *p, LM_REAL *hx, int m, int n, void *adata)$/;"	f	file:
LMBLEC_FUNC	levmar/lmblec_core.c	386;"	d	file:
LMBLEC_FUNC	levmar/lmblec_core.c	66;"	d	file:
LMBLEC_JACF	levmar/lmblec_core.c	/^static void LMBLEC_JACF(LM_REAL *p, LM_REAL *jac, int m, int n, void *adata)$/;"	f	file:
LMBLEC_JACF	levmar/lmblec_core.c	387;"	d	file:
LMBLEC_JACF	levmar/lmblec_core.c	67;"	d	file:
LMLEC_DATA	levmar/lmlec_core.c	/^struct LMLEC_DATA{$/;"	s	file:
LMLEC_DATA	levmar/lmlec_core.c	26;"	d	file:
LMLEC_DATA	levmar/lmlec_core.c	640;"	d	file:
LMLEC_ELIM	levmar/lmlec_core.c	/^static int LMLEC_ELIM(LM_REAL *A, LM_REAL *b, LM_REAL *c, LM_REAL *Y, LM_REAL *Z, int m, int n)$/;"	f	file:
LMLEC_ELIM	levmar/lmlec_core.c	27;"	d	file:
LMLEC_ELIM	levmar/lmlec_core.c	641;"	d	file:
LMLEC_FUNC	levmar/lmlec_core.c	/^static void LMLEC_FUNC(LM_REAL *pp, LM_REAL *hx, int mm, int n, void *adata)$/;"	f	file:
LMLEC_FUNC	levmar/lmlec_core.c	28;"	d	file:
LMLEC_FUNC	levmar/lmlec_core.c	642;"	d	file:
LMLEC_JACF	levmar/lmlec_core.c	/^static void LMLEC_JACF(LM_REAL *pp, LM_REAL *jacjac, int mm, int n, void *adata)$/;"	f	file:
LMLEC_JACF	levmar/lmlec_core.c	29;"	d	file:
LMLEC_JACF	levmar/lmlec_core.c	643;"	d	file:
LM_ADD_PREFIX	levmar/misc.h	51;"	d
LM_BC_DER_WORKSZ	levmar/lm.h	66;"	d
LM_BC_DIF_WORKSZ	levmar/lm.h	67;"	d
LM_BLAS_SUFFIX	levmar/misc.h	31;"	d
LM_BLEC_DER_WORKSZ	levmar/lm.h	78;"	d
LM_BLEC_DIF_WORKSZ	levmar/lm.h	79;"	d
LM_CAT_	levmar/misc.h	50;"	d
LM_CAT__	levmar/misc.h	49;"	d
LM_CNST	levmar/Axb.c	43;"	d	file:
LM_CNST	levmar/Axb.c	53;"	d	file:
LM_CNST	levmar/Axb.c	62;"	d	file:
LM_CNST	levmar/Axb.c	72;"	d	file:
LM_CNST	levmar/lm.c	52;"	d	file:
LM_CNST	levmar/lm.c	62;"	d	file:
LM_CNST	levmar/lm.c	73;"	d	file:
LM_CNST	levmar/lm.c	82;"	d	file:
LM_CNST	levmar/lmbc.c	53;"	d	file:
LM_CNST	levmar/lmbc.c	63;"	d	file:
LM_CNST	levmar/lmbc.c	75;"	d	file:
LM_CNST	levmar/lmbc.c	84;"	d	file:
LM_CNST	levmar/lmblec.c	59;"	d	file:
LM_CNST	levmar/lmblec.c	68;"	d	file:
LM_CNST	levmar/lmblec.c	78;"	d	file:
LM_CNST	levmar/lmblec.c	86;"	d	file:
LM_CNST	levmar/lmlec.c	57;"	d	file:
LM_CNST	levmar/lmlec.c	64;"	d	file:
LM_CNST	levmar/lmlec.c	72;"	d	file:
LM_CNST	levmar/lmlec.c	78;"	d	file:
LM_CNST	levmar/misc.c	45;"	d	file:
LM_CNST	levmar/misc.c	53;"	d	file:
LM_CNST	levmar/misc.c	62;"	d	file:
LM_CNST	levmar/misc.c	69;"	d	file:
LM_DBL_PREC	levmar/lm.h	44;"	d
LM_DER_WORKSZ	levmar/lm.h	60;"	d
LM_DIFF_DELTA	levmar/lm.h	86;"	d
LM_DIF_WORKSZ	levmar/lm.h	61;"	d
LM_ERROR	levmar/lm.h	83;"	d
LM_FINITE	levmar/compiler.h	34;"	d
LM_FINITE	levmar/compiler.h	36;"	d
LM_FINITE	levmar/compiler.h	38;"	d
LM_INFO_SZ	levmar/lm.h	82;"	d
LM_INIT_MU	levmar/lm.h	84;"	d
LM_LEC_DER_WORKSZ	levmar/lm.h	72;"	d
LM_LEC_DIF_WORKSZ	levmar/lm.h	73;"	d
LM_OPTS_SZ	levmar/lm.h	81;"	d
LM_PREFIX	levmar/Axb.c	42;"	d	file:
LM_PREFIX	levmar/Axb.c	52;"	d	file:
LM_PREFIX	levmar/Axb.c	60;"	d	file:
LM_PREFIX	levmar/Axb.c	70;"	d	file:
LM_PREFIX	levmar/lm.c	46;"	d	file:
LM_PREFIX	levmar/lm.c	57;"	d	file:
LM_PREFIX	levmar/lm.c	68;"	d	file:
LM_PREFIX	levmar/lm.c	78;"	d	file:
LM_PREFIX	levmar/lmbc.c	46;"	d	file:
LM_PREFIX	levmar/lmbc.c	58;"	d	file:
LM_PREFIX	levmar/lmbc.c	69;"	d	file:
LM_PREFIX	levmar/lmbc.c	80;"	d	file:
LM_PREFIX	levmar/lmblec.c	54;"	d	file:
LM_PREFIX	levmar/lmblec.c	64;"	d	file:
LM_PREFIX	levmar/lmblec.c	74;"	d	file:
LM_PREFIX	levmar/lmblec.c	83;"	d	file:
LM_PREFIX	levmar/lmlec.c	54;"	d	file:
LM_PREFIX	levmar/lmlec.c	62;"	d	file:
LM_PREFIX	levmar/lmlec.c	70;"	d	file:
LM_PREFIX	levmar/lmlec.c	77;"	d	file:
LM_PREFIX	levmar/misc.c	41;"	d	file:
LM_PREFIX	levmar/misc.c	50;"	d	file:
LM_PREFIX	levmar/misc.c	59;"	d	file:
LM_PREFIX	levmar/misc.c	67;"	d	file:
LM_REAL	levmar/Axb.c	41;"	d	file:
LM_REAL	levmar/Axb.c	51;"	d	file:
LM_REAL	levmar/Axb.c	59;"	d	file:
LM_REAL	levmar/Axb.c	69;"	d	file:
LM_REAL	levmar/lm.c	45;"	d	file:
LM_REAL	levmar/lm.c	56;"	d	file:
LM_REAL	levmar/lm.c	67;"	d	file:
LM_REAL	levmar/lm.c	77;"	d	file:
LM_REAL	levmar/lmbc.c	45;"	d	file:
LM_REAL	levmar/lmbc.c	57;"	d	file:
LM_REAL	levmar/lmbc.c	68;"	d	file:
LM_REAL	levmar/lmbc.c	79;"	d	file:
LM_REAL	levmar/lmblec.c	53;"	d	file:
LM_REAL	levmar/lmblec.c	63;"	d	file:
LM_REAL	levmar/lmblec.c	73;"	d	file:
LM_REAL	levmar/lmblec.c	82;"	d	file:
LM_REAL	levmar/lmlec.c	53;"	d	file:
LM_REAL	levmar/lmlec.c	61;"	d	file:
LM_REAL	levmar/lmlec.c	69;"	d	file:
LM_REAL	levmar/lmlec.c	76;"	d	file:
LM_REAL	levmar/misc.c	40;"	d	file:
LM_REAL	levmar/misc.c	49;"	d	file:
LM_REAL	levmar/misc.c	58;"	d	file:
LM_REAL	levmar/misc.c	66;"	d	file:
LM_REAL_EPSILON	levmar/Axb.c	46;"	d	file:
LM_REAL_EPSILON	levmar/Axb.c	54;"	d	file:
LM_REAL_EPSILON	levmar/Axb.c	64;"	d	file:
LM_REAL_EPSILON	levmar/Axb.c	73;"	d	file:
LM_REAL_EPSILON	levmar/lm.c	50;"	d	file:
LM_REAL_EPSILON	levmar/lm.c	59;"	d	file:
LM_REAL_EPSILON	levmar/lm.c	72;"	d	file:
LM_REAL_EPSILON	levmar/lm.c	80;"	d	file:
LM_REAL_EPSILON	levmar/lmbc.c	51;"	d	file:
LM_REAL_EPSILON	levmar/lmbc.c	61;"	d	file:
LM_REAL_EPSILON	levmar/lmbc.c	74;"	d	file:
LM_REAL_EPSILON	levmar/lmbc.c	83;"	d	file:
LM_REAL_EPSILON	levmar/misc.c	43;"	d	file:
LM_REAL_EPSILON	levmar/misc.c	51;"	d	file:
LM_REAL_EPSILON	levmar/misc.c	61;"	d	file:
LM_REAL_EPSILON	levmar/misc.c	68;"	d	file:
LM_REAL_MAX	levmar/lm.c	48;"	d	file:
LM_REAL_MAX	levmar/lm.c	58;"	d	file:
LM_REAL_MAX	levmar/lm.c	70;"	d	file:
LM_REAL_MAX	levmar/lm.c	79;"	d	file:
LM_REAL_MAX	levmar/lmbc.c	48;"	d	file:
LM_REAL_MAX	levmar/lmbc.c	59;"	d	file:
LM_REAL_MAX	levmar/lmbc.c	71;"	d	file:
LM_REAL_MAX	levmar/lmbc.c	81;"	d	file:
LM_REAL_MAX	levmar/lmblec.c	56;"	d	file:
LM_REAL_MAX	levmar/lmblec.c	65;"	d	file:
LM_REAL_MAX	levmar/lmblec.c	76;"	d	file:
LM_REAL_MAX	levmar/lmblec.c	84;"	d	file:
LM_REAL_MIN	levmar/lm.c	49;"	d	file:
LM_REAL_MIN	levmar/lm.c	60;"	d	file:
LM_REAL_MIN	levmar/lm.c	71;"	d	file:
LM_REAL_MIN	levmar/lm.c	81;"	d	file:
LM_REAL_MIN	levmar/lmbc.c	49;"	d	file:
LM_REAL_MIN	levmar/lmbc.c	60;"	d	file:
LM_REAL_MIN	levmar/lmbc.c	72;"	d	file:
LM_REAL_MIN	levmar/lmbc.c	82;"	d	file:
LM_REAL_MIN	levmar/lmblec.c	57;"	d	file:
LM_REAL_MIN	levmar/lmblec.c	66;"	d	file:
LM_REAL_MIN	levmar/lmblec.c	77;"	d	file:
LM_REAL_MIN	levmar/lmblec.c	85;"	d	file:
LM_SNGL_PREC	levmar/lm.h	45;"	d
LM_STOP_THRESH	levmar/lm.h	85;"	d
LM_VERSION	levmar/lm.h	87;"	d
LNSRCH	levmar/lmbc_core.c	/^LNSRCH(int m, LM_REAL *x, LM_REAL f, LM_REAL *g, LM_REAL *p, LM_REAL alpha, LM_REAL *xpls,$/;"	f	file:
LNSRCH	levmar/lmbc_core.c	27;"	d	file:
LNSRCH	levmar/lmbc_core.c	902;"	d	file:
LN_S	fits/Makefile	/^LN_S = ln -s$/;"	m
LN_S	levmar/Makefile	/^LN_S = ln -s$/;"	m
LN_S	wcs/Makefile	/^LN_S = ln -s$/;"	m
LOCAL	prefs.h	/^typedef enum	{GLOBAL, LOCAL}			pbacktype;$/;"	e	enum:__anon37
LOGF	profit.c	29;"	d	file:
LOGF	profit.c	31;"	d	file:
LONG	fits/fitscat_defs.h	/^typedef	int		LONG;			\/* for DEC-Alpha... *\/$/;"	t
LONG	types.h	/^typedef	int		LONG;$/;"	t
LTCOMPILE	fits/Makefile	/^LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\$/;"	m
LTCOMPILE	levmar/Makefile	/^LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\$/;"	m
LTCOMPILE	wcs/Makefile	/^LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\$/;"	m
LTLIBOBJS	Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	fits/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	levmar/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	wcs/Makefile	/^LTLIBOBJS = $/;"	m
MAKEINFO	Makefile	/^MAKEINFO = ${SHELL} \/home\/zhao\/cuda-workspace\/sextractor-dev\/autoconf\/missing --run makeinfo$/;"	m
MAKEINFO	fits/Makefile	/^MAKEINFO = ${SHELL} \/home\/zhao\/cuda-workspace\/sextractor\/autoconf\/missing --run makeinfo$/;"	m
MAKEINFO	levmar/Makefile	/^MAKEINFO = ${SHELL} \/home\/zhao\/cuda-workspace\/sextractor\/autoconf\/missing --run makeinfo$/;"	m
MAKEINFO	wcs/Makefile	/^MAKEINFO = ${SHELL} \/home\/zhao\/cuda-workspace\/sextractor\/autoconf\/missing --run makeinfo$/;"	m
MAMA_CORFLEX	astrom.h	30;"	d
MARGIN_SCALE	cuda/cudatypes.h	48;"	d
MARGIN_SCALE	define.h	40;"	d
MAS	fitswcs.h	29;"	d
MASK_BLANK	prefs.h	/^typedef enum 	{MASK_NONE, MASK_BLANK, MASK_CORRECT} masktype;$/;"	e	enum:__anon41
MASK_CORRECT	prefs.h	/^typedef enum 	{MASK_NONE, MASK_BLANK, MASK_CORRECT} masktype;$/;"	e	enum:__anon41
MASK_NONE	prefs.h	/^typedef enum 	{MASK_NONE, MASK_BLANK, MASK_CORRECT} masktype;$/;"	e	enum:__anon41
MAX	levmar/misc_core.c	1095;"	d	file:
MAX	levmar/misc_core.c	791;"	d	file:
MAX	psf.c	1251;"	d	file:
MAX	psf.c	1569;"	d	file:
MAX	wcs/poly.c	532;"	d	file:
MAX	wcs/poly.c	850;"	d	file:
MAXCHAR	cuda/cudatypes.h	49;"	d
MAXCHAR	define.h	41;"	d
MAXCHAR	ldactoasc.h	47;"	d
MAXCHARL	cuda/cudatypes.h	50;"	d
MAXCHARL	define.h	42;"	d
MAXCHARS	fits/fitscat.h	24;"	d
MAXCHECK	types.h	/^	MAXCHECK}$/;"	e	enum:__anon4
MAXDEBAREA	cuda/cudatypes.h	51;"	d
MAXDEBAREA	define.h	43;"	d
MAXFILE	ldactoasc.h	48;"	d
MAXFLAG	cuda/cudatypes.h	52;"	d
MAXFLAG	define.h	44;"	d
MAXIMAGE	cuda/cudatypes.h	53;"	d
MAXIMAGE	define.h	45;"	d
MAXLIST	prefs.h	31;"	d
MAXMASK	filter.h	22;"	d
MAXNAPER	cuda/cudatypes.h	54;"	d
MAXNAPER	define.h	46;"	d
MAXNASSOC	cuda/cudatypes.h	55;"	d
MAXNASSOC	define.h	47;"	d
MAXPICSIZE	cuda/cudatypes.h	23;"	d
MAXPICSIZE	cuda/cudatypes.h	56;"	d
MAXPICSIZE	define.h	48;"	d
MAX_THREADS_PER_BLK	cuda/cudatypes.h	14;"	d
MBYTE	fits/fitscat_defs.h	39;"	d
MEASURE_FIELD	field.h	21;"	d
MIN	fits/fitscat_defs.h	145;"	d
MJD1950	astrom.h	28;"	d
MJD1950	fitswcs.h	31;"	d
MJD2000	astrom.h	27;"	d
MJD2000	fitswcs.h	30;"	d
MKDIR_P	Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MKDIR_P	fits/Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MKDIR_P	levmar/Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MKDIR_P	wcs/Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MODROSLAM	levmar/lmdemo.c	69;"	d	file:
MYVERSION	define.h	29;"	d
MYVERSION	ldactoasc.h	28;"	d
MYVERSION	ldactoasc.h	30;"	d
M_PI	levmar/lmdemo.c	167;"	d	file:
NAXIS	fitswcs.h	24;"	d
NBRANCH	cuda/cudatypes.h	22;"	d
NBRANCH	refine.c	35;"	d	file:
NEURONS	neurro.h	20;"	d
NFLOAT	bpro.h	/^typedef	float	NFLOAT;		\/* Floating point units for neural data *\/$/;"	t
NFPRINTF	define.h	181;"	d
NFPRINTF	ldactoasc.h	130;"	d
NISO	cuda/cudatypes.h	57;"	d
NISO	define.h	49;"	d
NOBJ	extract.h	23;"	d
NONOBJECT	extract.h	/^typedef	enum		{COMPLETE, INCOMPLETE, NONOBJECT, OBJECT}$/;"	e	enum:__anon2
NORM	prefs.h	/^typedef enum	{QUIET, NORM, WARN, FULL} verbosetype;$/;"	e	enum:__anon38
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	fits/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	levmar/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	wcs/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	fits/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	levmar/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	wcs/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NPRINTF	define.h	178;"	d
NPRINTF	ldactoasc.h	128;"	d
NSONMAX	cuda/cudatypes.h	21;"	d
NSONMAX	refine.c	34;"	d	file:
NVCC	Makefile	/^NVCC = nvcc$/;"	m
NVCC	cuda/Makefile	/^NVCC            ?= $(CUDA_BIN_PATH)\/nvcc$/;"	m
NVCCFLAGS	Makefile	/^NVCCFLAGS =  -O3 -g --compiler-options -funroll-loops --compiler-options -fomit-frame-pointer --compiler-options -Wall --compiler-options -D_REENTRANT$/;"	m
NVCCFLAGS	cuda/Makefile	/^      NVCCFLAGS := -m32 -dc$/;"	m
NVCCFLAGS	cuda/Makefile	/^      NVCCFLAGS := -m64 -dc$/;"	m
NVCCLINK	Makefile	/^NVCCLINK = $(NVCC) $(AM_CFLAGS) $(NVCCFLAGS) $(AM_LDFLAGS) -o $@$/;"	m
OBJECT	extract.h	/^typedef	enum		{COMPLETE, INCOMPLETE, NONOBJECT, OBJECT}$/;"	e	enum:__anon2
OBJEXT	Makefile	/^OBJEXT = o$/;"	m
OBJEXT	fits/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	levmar/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	wcs/Makefile	/^OBJEXT = o$/;"	m
OBJ_APERT_PB	cuda/cudatypes.h	31;"	d
OBJ_APERT_PB	types.h	47;"	d
OBJ_CROWDED	cuda/cudatypes.h	27;"	d
OBJ_CROWDED	types.h	43;"	d
OBJ_DOVERFLOW	cuda/cudatypes.h	33;"	d
OBJ_DOVERFLOW	types.h	49;"	d
OBJ_DWEIGHTZERO	types.h	55;"	d
OBJ_ISO_PB	cuda/cudatypes.h	32;"	d
OBJ_ISO_PB	types.h	48;"	d
OBJ_MERGED	cuda/cudatypes.h	28;"	d
OBJ_MERGED	types.h	44;"	d
OBJ_OVERFLOW	cuda/cudatypes.h	34;"	d
OBJ_OVERFLOW	types.h	50;"	d
OBJ_SATUR	cuda/cudatypes.h	29;"	d
OBJ_SATUR	types.h	45;"	d
OBJ_TRUNC	cuda/cudatypes.h	30;"	d
OBJ_TRUNC	types.h	46;"	d
OBJ_WEIGHTZERO	types.h	54;"	d
OFF_T	fits/fitscat.h	92;"	d
OFF_T	fits/fitscat.h	94;"	d
ONE_THIRD	levmar/lm.c	36;"	d	file:
ONE_THIRD	levmar/lmbc.c	36;"	d	file:
ORGQR	levmar/Axb_core.c	40;"	d	file:
ORGQR	levmar/Axb_core.c	813;"	d	file:
ORGQR	levmar/lmlec_core.c	39;"	d	file:
ORGQR	levmar/lmlec_core.c	653;"	d	file:
OSLOWER	cuda/Makefile	/^OSLOWER = $(shell uname -s 2>\/dev\/null | tr [:upper:] [:lower:])$/;"	m
OSUPPER	cuda/Makefile	/^OSUPPER = $(shell uname -s 2>\/dev\/null | tr [:lower:] [:upper:])$/;"	m
OS_ARCH	cuda/Makefile	/^	OS_ARCH = i686$/;"	m
OS_ARCH	cuda/Makefile	/^	OS_ARCH = x86_64$/;"	m
OS_ARCH	cuda/Makefile	/^OS_ARCH = $(shell uname -m | sed -e "s\/i386\/i686\/")$/;"	m
OS_SIZE	cuda/Makefile	/^	OS_SIZE = 32$/;"	m
OS_SIZE	cuda/Makefile	/^	OS_SIZE = 64$/;"	m
OS_SIZE	cuda/Makefile	/^OS_SIZE = $(shell uname -m | sed -e "s\/i.86\/32\/" -e "s\/x86_64\/64\/")$/;"	m
OUTCONV	fits/fitsconv.c	140;"	d	file:
OUTPUT	cuda/cudatypes.h	58;"	d
OUTPUT	define.h	50;"	d
OUTPUT	fits/fitscat_defs.h	37;"	d
OUTPUT	ldactoasc.h	46;"	d
PACKAGE	Makefile	/^PACKAGE = sextractor$/;"	m
PACKAGE	fits/Makefile	/^PACKAGE = sextractor$/;"	m
PACKAGE	levmar/Makefile	/^PACKAGE = sextractor$/;"	m
PACKAGE	wcs/Makefile	/^PACKAGE = sextractor$/;"	m
PACKAGER	Makefile	/^PACKAGER = Emmanuel Bertin$/;"	m
PACKAGER	fits/Makefile	/^PACKAGER = Emmanuel Bertin$/;"	m
PACKAGER	levmar/Makefile	/^PACKAGER = Emmanuel Bertin$/;"	m
PACKAGER	wcs/Makefile	/^PACKAGER = Emmanuel Bertin$/;"	m
PACKAGE_BUGREPORT	Makefile	/^PACKAGE_BUGREPORT = bertin@iap.fr$/;"	m
PACKAGE_BUGREPORT	fits/Makefile	/^PACKAGE_BUGREPORT = bertin@iap.fr$/;"	m
PACKAGE_BUGREPORT	levmar/Makefile	/^PACKAGE_BUGREPORT = bertin@iap.fr$/;"	m
PACKAGE_BUGREPORT	wcs/Makefile	/^PACKAGE_BUGREPORT = bertin@iap.fr$/;"	m
PACKAGE_NAME	Makefile	/^PACKAGE_NAME = sextractor$/;"	m
PACKAGE_NAME	fits/Makefile	/^PACKAGE_NAME = sextractor$/;"	m
PACKAGE_NAME	levmar/Makefile	/^PACKAGE_NAME = sextractor$/;"	m
PACKAGE_NAME	wcs/Makefile	/^PACKAGE_NAME = sextractor$/;"	m
PACKAGE_STRING	Makefile	/^PACKAGE_STRING = sextractor 2.8.6$/;"	m
PACKAGE_STRING	fits/Makefile	/^PACKAGE_STRING = sextractor 2.8.6$/;"	m
PACKAGE_STRING	levmar/Makefile	/^PACKAGE_STRING = sextractor 2.8.6$/;"	m
PACKAGE_STRING	wcs/Makefile	/^PACKAGE_STRING = sextractor 2.8.6$/;"	m
PACKAGE_TARNAME	Makefile	/^PACKAGE_TARNAME = sextractor$/;"	m
PACKAGE_TARNAME	fits/Makefile	/^PACKAGE_TARNAME = sextractor$/;"	m
PACKAGE_TARNAME	levmar/Makefile	/^PACKAGE_TARNAME = sextractor$/;"	m
PACKAGE_TARNAME	wcs/Makefile	/^PACKAGE_TARNAME = sextractor$/;"	m
PACKAGE_URL	Makefile	/^PACKAGE_URL = @PACKAGE_URL@$/;"	m
PACKAGE_VERSION	Makefile	/^PACKAGE_VERSION = 2.8.6$/;"	m
PACKAGE_VERSION	fits/Makefile	/^PACKAGE_VERSION = 2.8.6$/;"	m
PACKAGE_VERSION	levmar/Makefile	/^PACKAGE_VERSION = 2.8.6$/;"	m
PACKAGE_VERSION	wcs/Makefile	/^PACKAGE_VERSION = 2.8.6$/;"	m
PADEXTRA	fits/fitscat.h	63;"	d
PADTOTAL	fits/fitscat.h	59;"	d
PARAM_ARMS_FLUX	profit.h	/^		PARAM_ARMS_FLUX, PARAM_ARMS_QUADFRAC, PARAM_ARMS_SCALE,$/;"	e	enum:__anon21
PARAM_ARMS_PITCH	profit.h	/^		PARAM_ARMS_START, PARAM_ARMS_POSANG, PARAM_ARMS_PITCH,$/;"	e	enum:__anon21
PARAM_ARMS_PITCHVAR	profit.h	/^		PARAM_ARMS_PITCHVAR, PARAM_ARMS_WIDTH,$/;"	e	enum:__anon21
PARAM_ARMS_POSANG	profit.h	/^		PARAM_ARMS_START, PARAM_ARMS_POSANG, PARAM_ARMS_PITCH,$/;"	e	enum:__anon21
PARAM_ARMS_QUADFRAC	profit.h	/^		PARAM_ARMS_FLUX, PARAM_ARMS_QUADFRAC, PARAM_ARMS_SCALE,$/;"	e	enum:__anon21
PARAM_ARMS_SCALE	profit.h	/^		PARAM_ARMS_FLUX, PARAM_ARMS_QUADFRAC, PARAM_ARMS_SCALE,$/;"	e	enum:__anon21
PARAM_ARMS_START	profit.h	/^		PARAM_ARMS_START, PARAM_ARMS_POSANG, PARAM_ARMS_PITCH,$/;"	e	enum:__anon21
PARAM_ARMS_WIDTH	profit.h	/^		PARAM_ARMS_PITCHVAR, PARAM_ARMS_WIDTH,$/;"	e	enum:__anon21
PARAM_BACK	profit.h	/^typedef enum	{PARAM_BACK, PARAM_X, PARAM_Y,$/;"	e	enum:__anon21
PARAM_BAR_ASPECT	profit.h	/^		PARAM_BAR_FLUX, PARAM_BAR_ASPECT, PARAM_BAR_POSANG,$/;"	e	enum:__anon21
PARAM_BAR_FLUX	profit.h	/^		PARAM_BAR_FLUX, PARAM_BAR_ASPECT, PARAM_BAR_POSANG,$/;"	e	enum:__anon21
PARAM_BAR_POSANG	profit.h	/^		PARAM_BAR_FLUX, PARAM_BAR_ASPECT, PARAM_BAR_POSANG,$/;"	e	enum:__anon21
PARAM_DISK_ASPECT	profit.h	/^		PARAM_DISK_FLUX, PARAM_DISK_SCALE, PARAM_DISK_ASPECT,$/;"	e	enum:__anon21
PARAM_DISK_FLUX	profit.h	/^		PARAM_DISK_FLUX, PARAM_DISK_SCALE, PARAM_DISK_ASPECT,$/;"	e	enum:__anon21
PARAM_DISK_POSANG	profit.h	/^		PARAM_DISK_POSANG,$/;"	e	enum:__anon21
PARAM_DISK_SCALE	profit.h	/^		PARAM_DISK_FLUX, PARAM_DISK_SCALE, PARAM_DISK_ASPECT,$/;"	e	enum:__anon21
PARAM_INRING_ASPECT	profit.h	/^		PARAM_INRING_FLUX, PARAM_INRING_WIDTH, PARAM_INRING_ASPECT,$/;"	e	enum:__anon21
PARAM_INRING_FLUX	profit.h	/^		PARAM_INRING_FLUX, PARAM_INRING_WIDTH, PARAM_INRING_ASPECT,$/;"	e	enum:__anon21
PARAM_INRING_WIDTH	profit.h	/^		PARAM_INRING_FLUX, PARAM_INRING_WIDTH, PARAM_INRING_ASPECT,$/;"	e	enum:__anon21
PARAM_NPARAM	profit.h	/^		PARAM_NPARAM}	paramenum;$/;"	e	enum:__anon21
PARAM_OUTRING_FLUX	profit.h	/^		PARAM_OUTRING_FLUX, PARAM_OUTRING_START, PARAM_OUTRING_WIDTH,$/;"	e	enum:__anon21
PARAM_OUTRING_START	profit.h	/^		PARAM_OUTRING_FLUX, PARAM_OUTRING_START, PARAM_OUTRING_WIDTH,$/;"	e	enum:__anon21
PARAM_OUTRING_WIDTH	profit.h	/^		PARAM_OUTRING_FLUX, PARAM_OUTRING_START, PARAM_OUTRING_WIDTH,$/;"	e	enum:__anon21
PARAM_SPHEROID_ASPECT	profit.h	/^		PARAM_SPHEROID_FLUX, PARAM_SPHEROID_REFF, PARAM_SPHEROID_ASPECT,$/;"	e	enum:__anon21
PARAM_SPHEROID_FLUX	profit.h	/^		PARAM_SPHEROID_FLUX, PARAM_SPHEROID_REFF, PARAM_SPHEROID_ASPECT,$/;"	e	enum:__anon21
PARAM_SPHEROID_POSANG	profit.h	/^		PARAM_SPHEROID_POSANG, PARAM_SPHEROID_SERSICN,$/;"	e	enum:__anon21
PARAM_SPHEROID_REFF	profit.h	/^		PARAM_SPHEROID_FLUX, PARAM_SPHEROID_REFF, PARAM_SPHEROID_ASPECT,$/;"	e	enum:__anon21
PARAM_SPHEROID_SERSICN	profit.h	/^		PARAM_SPHEROID_POSANG, PARAM_SPHEROID_SERSICN,$/;"	e	enum:__anon21
PARAM_X	profit.h	/^typedef enum	{PARAM_BACK, PARAM_X, PARAM_Y,$/;"	e	enum:__anon21
PARAM_Y	profit.h	/^typedef enum	{PARAM_BACK, PARAM_X, PARAM_Y,$/;"	e	enum:__anon21
PATH_SEPARATOR	Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	fits/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	levmar/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	wcs/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATTERN_BTMAX	pattern.h	32;"	d
PATTERN_FMAX	pattern.h	28;"	d
PATTERN_MARGIN	pattern.h	31;"	d
PATTERN_NCOMP	pattern.h	29;"	d
PATTERN_NPATTERNS	pattern.h	/^			PATTERN_NPATTERNS}$/;"	e	enum:__anon11
PATTERN_OCTOPOLE	pattern.h	/^typedef enum		{PATTERN_QUADRUPOLE, PATTERN_OCTOPOLE,$/;"	e	enum:__anon11
PATTERN_POLARFOURIER	pattern.h	/^			PATTERN_POLARFOURIER, PATTERN_POLARSHAPELETS,$/;"	e	enum:__anon11
PATTERN_POLARSHAPELETS	pattern.h	/^			PATTERN_POLARFOURIER, PATTERN_POLARSHAPELETS,$/;"	e	enum:__anon11
PATTERN_QUADRUPOLE	pattern.h	/^typedef enum		{PATTERN_QUADRUPOLE, PATTERN_OCTOPOLE,$/;"	e	enum:__anon11
PATTERN_SCALE	pattern.h	30;"	d
PC_NITER	psf.h	26;"	d
PETRO_NSIG	photom.h	22;"	d
PHOTO	prefs.h	/^typedef enum	{CCD, PHOTO} 	detecttype;$/;"	e	enum:__anon34
PI	cuda/cudatypes.h	64;"	d
PI	define.h	55;"	d
PI	fits/fitscat_defs.h	49;"	d
PI	ldactoasc.h	39;"	d
PI	wcs/wcsmath.h	36;"	d
PI	wcs/wcsmath.h	55;"	d
PI	wcs/wcstrig.c	48;"	d	file:
PIX	define.h	175;"	d
PIXTYPE	cuda/cudatypes.h	/^typedef	float		PIXTYPE;		\/* Pixel type *\/$/;"	t
PIXTYPE	fits/fitscat.h	/^typedef	float		PIXTYPE;		\/* Pixel type *\/$/;"	t
PLIST	plist.h	19;"	d
PLISTEXIST	plist.h	21;"	d
PLISTFLAG	plist.h	25;"	d
PLISTPIX	plist.h	23;"	d
PNONE	prefs.h	/^typedef	enum	{PNONE, FIXED, AUTO} aperttype;$/;"	e	enum:__anon31
POLY_MAXDEGREE	wcs/poly.h	23;"	d
POLY_MAXDIM	wcs/poly.h	22;"	d
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	fits/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	levmar/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	wcs/Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	fits/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	levmar/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	wcs/Makefile	/^POST_UNINSTALL = :$/;"	m
POTF2	levmar/Axb_core.c	42;"	d	file:
POTF2	levmar/Axb_core.c	815;"	d	file:
POTF2	levmar/misc_core.c	60;"	d	file:
POTRF	levmar/Axb_core.c	43;"	d	file:
POTRF	levmar/Axb_core.c	816;"	d	file:
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	fits/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	levmar/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	wcs/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	fits/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	levmar/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	wcs/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRJSET	wcs/proj.h	165;"	d
PROFIT_BARXFADE	profit.h	35;"	d
PROFIT_DYNPARAM	profit.h	34;"	d
PROFIT_FLIPPED	profit.h	22;"	d
PROFIT_MAXEXTRA	profit.h	36;"	d
PROFIT_MAXITER	profit.h	31;"	d
PROFIT_MAXPROF	profit.h	33;"	d
PROFIT_OVERSAMP	profit.h	32;"	d
PROFIT_POW	profit.h	26;"	d
PROFIT_POWF	profit.h	27;"	d
PROFIT_PROFRES	profit.h	37;"	d
PROFIT_PROFSRES	profit.h	38;"	d
PROF_ARMS	profit.h	/^			PROF_EXPONENTIAL, PROF_ARMS, PROF_BAR, PROF_INRING,$/;"	e	enum:__anon19
PROF_BACK	profit.h	/^typedef enum		{PROF_BACK, PROF_SERSIC, PROF_DEVAUCOULEURS,$/;"	e	enum:__anon19
PROF_BAR	profit.h	/^			PROF_EXPONENTIAL, PROF_ARMS, PROF_BAR, PROF_INRING,$/;"	e	enum:__anon19
PROF_DEVAUCOULEURS	profit.h	/^typedef enum		{PROF_BACK, PROF_SERSIC, PROF_DEVAUCOULEURS,$/;"	e	enum:__anon19
PROF_DIRAC	profit.h	/^			PROF_OUTRING, PROF_SERSIC_TABEX, PROF_DIRAC, PROF_NPROF}$/;"	e	enum:__anon19
PROF_EXPONENTIAL	profit.h	/^			PROF_EXPONENTIAL, PROF_ARMS, PROF_BAR, PROF_INRING,$/;"	e	enum:__anon19
PROF_INRING	profit.h	/^			PROF_EXPONENTIAL, PROF_ARMS, PROF_BAR, PROF_INRING,$/;"	e	enum:__anon19
PROF_NPROF	profit.h	/^			PROF_OUTRING, PROF_SERSIC_TABEX, PROF_DIRAC, PROF_NPROF}$/;"	e	enum:__anon19
PROF_OUTRING	profit.h	/^			PROF_OUTRING, PROF_SERSIC_TABEX, PROF_DIRAC, PROF_NPROF}$/;"	e	enum:__anon19
PROF_SERSIC	profit.h	/^typedef enum		{PROF_BACK, PROF_SERSIC, PROF_DEVAUCOULEURS,$/;"	e	enum:__anon19
PROF_SERSIC_TABEX	profit.h	/^			PROF_OUTRING, PROF_SERSIC_TABEX, PROF_DIRAC, PROF_NPROF}$/;"	e	enum:__anon19
PROGRAMS	Makefile	/^PROGRAMS = $(bin_PROGRAMS)$/;"	m
PSFDISPLAY_SPLIT	prefs.h	/^typedef enum	{PSFDISPLAY_SPLIT, PSFDISPLAY_VECTOR} psfdisplaytype;$/;"	e	enum:__anon43
PSFDISPLAY_VECTOR	prefs.h	/^typedef enum	{PSFDISPLAY_SPLIT, PSFDISPLAY_VECTOR} psfdisplaytype;$/;"	e	enum:__anon43
PSF_DOUBLETOT	psf.h	25;"	d
PSF_MAXSHIFT	psf.h	20;"	d
PSF_MINSHIFT	psf.h	21;"	d
PSF_NA	psf.h	23;"	d
PSF_NITER	psf.h	22;"	d
PSF_NPSFMAX	cuda/cudatypes.h	59;"	d
PSF_NPSFMAX	define.h	51;"	d
PSF_NTOT	psf.h	24;"	d
PTHREAD_CC	Makefile	/^PTHREAD_CC = gcc$/;"	m
PTHREAD_CC	fits/Makefile	/^PTHREAD_CC = cc$/;"	m
PTHREAD_CC	levmar/Makefile	/^PTHREAD_CC = cc$/;"	m
PTHREAD_CC	wcs/Makefile	/^PTHREAD_CC = cc$/;"	m
PTHREAD_CFLAGS	Makefile	/^PTHREAD_CFLAGS = $/;"	m
PTHREAD_CFLAGS	fits/Makefile	/^PTHREAD_CFLAGS = $/;"	m
PTHREAD_CFLAGS	levmar/Makefile	/^PTHREAD_CFLAGS = $/;"	m
PTHREAD_CFLAGS	wcs/Makefile	/^PTHREAD_CFLAGS = $/;"	m
PTHREAD_LIBS	Makefile	/^PTHREAD_LIBS = -lpthread$/;"	m
PTHREAD_LIBS	fits/Makefile	/^PTHREAD_LIBS = -lpthread$/;"	m
PTHREAD_LIBS	levmar/Makefile	/^PTHREAD_LIBS = -lpthread$/;"	m
PTHREAD_LIBS	wcs/Makefile	/^PTHREAD_LIBS = -lpthread$/;"	m
PYTHAG	levmar/misc_core.c	1096;"	d	file:
PYTHAG	levmar/misc_core.c	793;"	d	file:
PYTHAG	psf.c	1253;"	d	file:
PYTHAG	psf.c	1570;"	d	file:
PYTHAG	wcs/poly.c	534;"	d	file:
PYTHAG	wcs/poly.c	851;"	d	file:
P_BOOL	key.h	/^  enum  {P_FLOAT, P_INT, P_STRING, P_BOOL, P_KEY, P_INTLIST, P_FLOATLIST,$/;"	e	enum:__anon17::__anon18
P_BOOLLIST	key.h	/^	P_BOOLLIST, P_KEYLIST, P_STRINGLIST} type;$/;"	e	enum:__anon17::__anon18
P_FLOAT	key.h	/^  enum  {P_FLOAT, P_INT, P_STRING, P_BOOL, P_KEY, P_INTLIST, P_FLOATLIST,$/;"	e	enum:__anon17::__anon18
P_FLOATLIST	key.h	/^  enum  {P_FLOAT, P_INT, P_STRING, P_BOOL, P_KEY, P_INTLIST, P_FLOATLIST,$/;"	e	enum:__anon17::__anon18
P_INT	key.h	/^  enum  {P_FLOAT, P_INT, P_STRING, P_BOOL, P_KEY, P_INTLIST, P_FLOATLIST,$/;"	e	enum:__anon17::__anon18
P_INTLIST	key.h	/^  enum  {P_FLOAT, P_INT, P_STRING, P_BOOL, P_KEY, P_INTLIST, P_FLOATLIST,$/;"	e	enum:__anon17::__anon18
P_KEY	key.h	/^  enum  {P_FLOAT, P_INT, P_STRING, P_BOOL, P_KEY, P_INTLIST, P_FLOATLIST,$/;"	e	enum:__anon17::__anon18
P_KEYLIST	key.h	/^	P_BOOLLIST, P_KEYLIST, P_STRINGLIST} type;$/;"	e	enum:__anon17::__anon18
P_STRING	key.h	/^  enum  {P_FLOAT, P_INT, P_STRING, P_BOOL, P_KEY, P_INTLIST, P_FLOATLIST,$/;"	e	enum:__anon17::__anon18
P_STRINGLIST	key.h	/^	P_BOOLLIST, P_KEYLIST, P_STRINGLIST} type;$/;"	e	enum:__anon17::__anon18
QBPRINTF	ldactoasc.h	142;"	d
QCALLOC	define.h	147;"	d
QCALLOC	fits/fitscat_defs.h	109;"	d
QCALLOC	ldactoasc.h	100;"	d
QCALLOC	wcs/poly.c	29;"	d	file:
QFFTWFREE	fft.h	30;"	d
QFFTWMALLOC	fft.h	26;"	d
QFPRINTF	fits/fitscat_defs.h	135;"	d
QFREAD	define.h	129;"	d
QFREAD	fits/fitscat_defs.h	88;"	d
QFREAD	ldactoasc.h	82;"	d
QFREE	define.h	157;"	d
QFREE	fits/fitscat_defs.h	107;"	d
QFSEEK	define.h	137;"	d
QFSEEK	fits/fitscat_defs.h	96;"	d
QFSEEK	ldactoasc.h	90;"	d
QFTELL	define.h	142;"	d
QFTELL	fits/fitscat_defs.h	101;"	d
QFTELL	ldactoasc.h	95;"	d
QFWRITE	define.h	133;"	d
QFWRITE	fits/fitscat_defs.h	92;"	d
QFWRITE	ldactoasc.h	86;"	d
QGETKEY	fits/fitscat_defs.h	139;"	d
QIPRINTF	ldactoasc.h	137;"	d
QMALLOC	define.h	152;"	d
QMALLOC	fits/fitscat_defs.h	114;"	d
QMALLOC	ldactoasc.h	105;"	d
QMALLOC	wcs/poly.c	34;"	d	file:
QMEMCPY	define.h	166;"	d
QMEMCPY	fits/fitscat_defs.h	119;"	d
QMEMCPY	ldactoasc.h	115;"	d
QPOPEN	ldactoasc.h	122;"	d
QPRINTF	define.h	187;"	d
QPRINTF	fits/fitscat_defs.h	133;"	d
QPRINTF	ldactoasc.h	135;"	d
QPTHREAD_ATTR_DESTROY	threads.h	41;"	d
QPTHREAD_ATTR_INIT	threads.h	30;"	d
QPTHREAD_ATTR_SETDETACHSTATE	threads.h	35;"	d
QPTHREAD_CANCEL	threads.h	51;"	d
QPTHREAD_COND_BROADCAST	threads.h	91;"	d
QPTHREAD_COND_DESTROY	threads.h	101;"	d
QPTHREAD_COND_INIT	threads.h	81;"	d
QPTHREAD_COND_SIGNAL	threads.h	96;"	d
QPTHREAD_COND_WAIT	threads.h	86;"	d
QPTHREAD_CREATE	threads.h	46;"	d
QPTHREAD_JOIN	threads.h	56;"	d
QPTHREAD_MUTEX_DESTROY	threads.h	76;"	d
QPTHREAD_MUTEX_INIT	threads.h	61;"	d
QPTHREAD_MUTEX_LOCK	threads.h	66;"	d
QPTHREAD_MUTEX_UNLOCK	threads.h	71;"	d
QREALLOC	define.h	161;"	d
QREALLOC	fits/fitscat_defs.h	125;"	d
QREALLOC	ldactoasc.h	110;"	d
QUANTIF_AMIN	back.h	24;"	d
QUANTIF_AMIN	cuda/cudatypes.h	40;"	d
QUANTIF_NMAXLEVELS	back.h	23;"	d
QUANTIF_NMAXLEVELS	cuda/cudatypes.h	39;"	d
QUANTIF_NSIGMA	back.h	22;"	d
QUANTIF_NSIGMA	cuda/cudatypes.h	38;"	d
QUIET	prefs.h	/^typedef enum	{QUIET, NORM, WARN, FULL} verbosetype;$/;"	e	enum:__anon38
QWARNING	define.h	191;"	d
R2D	wcs/wcsmath.h	44;"	d
R2D	wcs/wcsmath.h	57;"	d
RAND_MAX	refine.c	32;"	d	file:
RANLIB	fits/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	levmar/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	wcs/Makefile	/^RANLIB = ranlib$/;"	m
RCAT	levmar/misc.h	37;"	d
RCAT_	levmar/misc.h	36;"	d
RDSYS_FK4	fitswcs.h	/^  enum {RDSYS_ICRS, RDSYS_FK5, RDSYS_FK4, RDSYS_FK4_NO_E, RDSYS_GAPPT}$/;"	e	enum:wcs::__anon15
RDSYS_FK4_NO_E	fitswcs.h	/^  enum {RDSYS_ICRS, RDSYS_FK5, RDSYS_FK4, RDSYS_FK4_NO_E, RDSYS_GAPPT}$/;"	e	enum:wcs::__anon15
RDSYS_FK5	fitswcs.h	/^  enum {RDSYS_ICRS, RDSYS_FK5, RDSYS_FK4, RDSYS_FK4_NO_E, RDSYS_GAPPT}$/;"	e	enum:wcs::__anon15
RDSYS_GAPPT	fitswcs.h	/^  enum {RDSYS_ICRS, RDSYS_FK5, RDSYS_FK4, RDSYS_FK4_NO_E, RDSYS_GAPPT}$/;"	e	enum:wcs::__anon15
RDSYS_ICRS	fitswcs.h	/^  enum {RDSYS_ICRS, RDSYS_FK5, RDSYS_FK4, RDSYS_FK4_NO_E, RDSYS_GAPPT}$/;"	e	enum:wcs::__anon15
READ_ONLY	fits/fitscat.h	/^typedef enum		{WRITE_ONLY, READ_ONLY}$/;"	e	enum:__anon28
RECURSIVE_CLEAN_TARGETS	Makefile	/^RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\\$/;"	m
RECURSIVE_TARGETS	Makefile	/^RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \\$/;"	m
RETURN_ERROR	define.h	102;"	d
RETURN_ERROR	fits/fitscat.h	33;"	d
RETURN_ERROR	ldactoasc.h	75;"	d
RETURN_FATAL_ERROR	define.h	103;"	d
RETURN_FATAL_ERROR	fits/fitscat.h	36;"	d
RETURN_FATAL_ERROR	ldactoasc.h	76;"	d
RETURN_OK	define.h	101;"	d
RETURN_OK	fits/fitscat.h	30;"	d
RETURN_OK	ldactoasc.h	74;"	d
RINT	define.h	173;"	d
RINT	fits/fitscat_defs.h	130;"	d
RINT	ldactoasc.h	126;"	d
RMS_FIELD	field.h	23;"	d
ROSD	levmar/lmdemo.c	47;"	d	file:
SED	fits/Makefile	/^SED = \/bin\/sed$/;"	m
SED	levmar/Makefile	/^SED = \/bin\/sed$/;"	m
SED	wcs/Makefile	/^SED = \/bin\/sed$/;"	m
SEEK_CUR	define.h	89;"	d
SEEK_CUR	fits/fitscat_defs.h	64;"	d
SEEK_CUR	ldactoasc.h	62;"	d
SEEK_SET	define.h	86;"	d
SEEK_SET	fits/fitscat_defs.h	61;"	d
SEEK_SET	ldactoasc.h	59;"	d
SET_MAKE	Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	fits/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	levmar/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	wcs/Makefile	/^SET_MAKE = $/;"	m
SHELL	Makefile	/^SHELL = \/bin\/bash$/;"	m
SHELL	fits/Makefile	/^SHELL = \/bin\/bash$/;"	m
SHELL	levmar/Makefile	/^SHELL = \/bin\/bash$/;"	m
SHELL	wcs/Makefile	/^SHELL = \/bin\/bash$/;"	m
SHFT	som.c	339;"	d	file:
SHFT	som.c	498;"	d	file:
SHOW_ASCII	fits/fitscat.h	/^typedef enum		{SHOW_ASCII, SHOW_SKYCAT}$/;"	e	enum:__anon29
SHOW_SKYCAT	fits/fitscat.h	/^typedef enum		{SHOW_ASCII, SHOW_SKYCAT}$/;"	e	enum:__anon29
SIGMOID	bpro.h	23;"	d
SIGN	levmar/misc_core.c	1094;"	d	file:
SIGN	levmar/misc_core.c	796;"	d	file:
SIGN	psf.c	1256;"	d	file:
SIGN	psf.c	1568;"	d	file:
SIGN	som.c	340;"	d	file:
SIGN	som.c	499;"	d	file:
SIGN	wcs/poly.c	537;"	d	file:
SIGN	wcs/poly.c	849;"	d	file:
SOM_GRADIENT	som.h	26;"	d
SOM_LINE	som.h	27;"	d
SOM_MAXDIM	som.h	20;"	d
SOM_NODE	som.h	24;"	d
SOM_PHOTOM	som.h	25;"	d
SOURCES	Makefile	/^SOURCES = $(ldactoasc_SOURCES) $(sex_SOURCES)$/;"	m
SOURCES	fits/Makefile	/^SOURCES = $(libfits_a_SOURCES)$/;"	m
SOURCES	levmar/Makefile	/^SOURCES = $(liblevmar_a_SOURCES) $(EXTRA_liblevmar_a_SOURCES)$/;"	m
SOURCES	wcs/Makefile	/^SOURCES = $(libwcs_c_a_SOURCES)$/;"	m
SQRT2	wcs/wcsmath.h	48;"	d
SQRT2	wcs/wcsmath.h	58;"	d
SQRT2INV	wcs/wcsmath.h	52;"	d
SQRT2INV	wcs/wcsmath.h	59;"	d
SQUARE_BLK_HEIGHT	cuda/cudatypes.h	16;"	d
SQUARE_BLK_WIDTH	cuda/cudatypes.h	15;"	d
STATE_BUSY	threads.h	26;"	d
STATE_FREE	threads.h	24;"	d
STATE_READY	threads.h	25;"	d
STRIP	Makefile	/^STRIP = strip$/;"	m
STRIP	fits/Makefile	/^STRIP = strip$/;"	m
STRIP	levmar/Makefile	/^STRIP = strip$/;"	m
STRIP	wcs/Makefile	/^STRIP = strip$/;"	m
SUBDIRS	Makefile	/^SUBDIRS = fits levmar wcs cuda$/;"	m
SVDINV	levmar/misc_core.c	/^static int SVDINV(LM_REAL *a, LM_REAL *b, int m)$/;"	f	file:
SVDINV	levmar/misc_core.c	413;"	d	file:
SWAP	fft.c	40;"	d	file:
SYNTAX	ldactoasc.c	29;"	d	file:
SYNTAX	main.c	30;"	d	file:
TARGET	cuda/Makefile	/^      TARGET    := debug$/;"	m
TARGET	cuda/Makefile	/^      TARGET    := release$/;"	m
THREADS_NMAX	define.h	23;"	d
THREADS_NMAX	ldactoasc.h	21;"	d
THREADS_PREFMAX	preflist.h	25;"	d
THREADS_PREFMAX	preflist.h	27;"	d
THRESH_ABSOLUTE	prefs.h	/^typedef enum	{THRESH_RELATIVE, THRESH_ABSOLUTE} threshtype;$/;"	e	enum:__anon33
THRESH_RELATIVE	prefs.h	/^typedef enum	{THRESH_RELATIVE, THRESH_ABSOLUTE} threshtype;$/;"	e	enum:__anon33
TINY	fits/fitscat_defs.h	47;"	d
TINY	ldactoasc.h	45;"	d
TINY	som.c	344;"	d	file:
TINY	som.c	502;"	d	file:
TNX_CHEBYSHEV	wcs/tnx.h	26;"	d
TNX_LEGENDRE	wcs/tnx.h	27;"	d
TNX_MAXCHARS	wcs/tnx.h	23;"	d
TNX_POLYNOMIAL	wcs/tnx.h	28;"	d
TNX_XFULL	wcs/tnx.h	32;"	d
TNX_XHALF	wcs/tnx.h	33;"	d
TNX_XNONE	wcs/tnx.h	31;"	d
TOL	levmar/misc_core.c	1097;"	d	file:
TOL	levmar/misc_core.c	797;"	d	file:
TOL	psf.c	1257;"	d	file:
TOL	psf.c	1571;"	d	file:
TOL	som.c	347;"	d	file:
TOL	som.c	505;"	d	file:
TOL	wcs/poly.c	538;"	d	file:
TOL	wcs/poly.c	852;"	d	file:
TRTRI	levmar/lmlec_core.c	40;"	d	file:
TRTRI	levmar/lmlec_core.c	654;"	d	file:
TRTRS	levmar/Axb_core.c	41;"	d	file:
TRTRS	levmar/Axb_core.c	814;"	d	file:
T_BYTE	fits/fitscat.h	/^typedef enum		{T_BYTE, T_SHORT, T_LONG, T_FLOAT, T_DOUBLE, T_STRING}$/;"	e	enum:__anon27
T_DOUBLE	fits/fitscat.h	/^typedef enum		{T_BYTE, T_SHORT, T_LONG, T_FLOAT, T_DOUBLE, T_STRING}$/;"	e	enum:__anon27
T_FLOAT	fits/fitscat.h	/^typedef enum		{T_BYTE, T_SHORT, T_LONG, T_FLOAT, T_DOUBLE, T_STRING}$/;"	e	enum:__anon27
T_LONG	fits/fitscat.h	/^typedef enum		{T_BYTE, T_SHORT, T_LONG, T_FLOAT, T_DOUBLE, T_STRING}$/;"	e	enum:__anon27
T_SHORT	fits/fitscat.h	/^typedef enum		{T_BYTE, T_SHORT, T_LONG, T_FLOAT, T_DOUBLE, T_STRING}$/;"	e	enum:__anon27
T_STRING	fits/fitscat.h	/^typedef enum		{T_BYTE, T_SHORT, T_LONG, T_FLOAT, T_DOUBLE, T_STRING}$/;"	e	enum:__anon27
ULONG	types.h	/^typedef	unsigned int	ULONG;$/;"	t
UNKNOWN	extract.h	24;"	d
USHORT	types.h	/^typedef	unsigned short	USHORT;			\/* 0 to 65535 integers *\/$/;"	t
VAR_FIELD	field.h	24;"	d
VECFLAG	define.h	196;"	d
VERSION	Makefile	/^VERSION = 2.8.6$/;"	m
VERSION	define.h	21;"	d
VERSION	fits/Makefile	/^VERSION = 2.8.6$/;"	m
VERSION	fits/fitscat_defs.h	19;"	d
VERSION	ldactoasc.h	19;"	d
VERSION	levmar/Makefile	/^VERSION = 2.8.6$/;"	m
VERSION	wcs/Makefile	/^VERSION = 2.8.6$/;"	m
WARN	prefs.h	/^typedef enum	{QUIET, NORM, WARN, FULL} verbosetype;$/;"	e	enum:__anon38
WARNING_NMAX	fits/fitscat.h	25;"	d
WCSLIB_CEL	wcs/cel.h	33;"	d
WCSLIB_LIN	wcs/lin.h	33;"	d
WCSLIB_MATH	wcs/wcsmath.h	33;"	d
WCSLIB_PROJ	wcs/proj.h	34;"	d
WCSLIB_SPH	wcs/sph.h	33;"	d
WCSLIB_TRIG	wcs/wcstrig.h	32;"	d
WCSLIB_WCS	wcs/wcs.h	33;"	d
WCSSET	wcs/wcs.h	105;"	d
WCSTRIG_TOL	wcs/wcstrig.h	73;"	d
WCS_INVACCURACY	fitswcs.h	38;"	d
WCS_INVMAXDEG	fitswcs.h	37;"	d
WCS_NGRIDPOINTS	fitswcs.h	35;"	d
WCS_NGRIDPOINTS2	fitswcs.h	36;"	d
WCS_NOCOORD	fitswcs.h	33;"	d
WCS_NRANGEPOINTS	fitswcs.h	39;"	d
WEBSITE	define.h	32;"	d
WEBSITE	ldactoasc.h	33;"	d
WEIGHT_FIELD	field.h	25;"	d
WEIGHT_FROMBACK	types.h	/^typedef  enum {WEIGHT_NONE, WEIGHT_FROMBACK, WEIGHT_FROMRMSMAP,$/;"	e	enum:__anon5
WEIGHT_FROMINTERP	types.h	/^		WEIGHT_FROMVARMAP, WEIGHT_FROMWEIGHTMAP, WEIGHT_FROMINTERP}$/;"	e	enum:__anon5
WEIGHT_FROMRMSMAP	types.h	/^typedef  enum {WEIGHT_NONE, WEIGHT_FROMBACK, WEIGHT_FROMRMSMAP,$/;"	e	enum:__anon5
WEIGHT_FROMVARMAP	types.h	/^		WEIGHT_FROMVARMAP, WEIGHT_FROMWEIGHTMAP, WEIGHT_FROMINTERP}$/;"	e	enum:__anon5
WEIGHT_FROMWEIGHTMAP	types.h	/^		WEIGHT_FROMVARMAP, WEIGHT_FROMWEIGHTMAP, WEIGHT_FROMINTERP}$/;"	e	enum:__anon5
WEIGHT_NONE	types.h	/^typedef  enum {WEIGHT_NONE, WEIGHT_FROMBACK, WEIGHT_FROMRMSMAP,$/;"	e	enum:__anon5
WINPOS_GRADFAC	winpos.h	23;"	d
WINPOS_NITERMAX	winpos.h	19;"	d
WINPOS_NSIG	winpos.h	20;"	d
WINPOS_OVERSAMP	winpos.h	21;"	d
WINPOS_STEPMIN	winpos.h	22;"	d
WRITE_ONLY	fits/fitscat.h	/^typedef enum		{WRITE_ONLY, READ_ONLY}$/;"	e	enum:__anon28
XSL_URL	xml.h	29;"	d
Z	levmar/lmlec_core.c	/^  LM_REAL *c, *Z, *p, *jac;$/;"	m	struct:LMLEC_DATA	file:
_COMPILER_H_	levmar/compiler.h	21;"	d
_FITSCAT_H_	fits/fitscat.h	18;"	d
_FITSWCS_H_	fitswcs.h	18;"	d
_GNU_SOURCE	pattern.c	24;"	d	file:
_GNU_SOURCE	profit.c	24;"	d	file:
_LM_H_	levmar/lm.h	23;"	d
_MISC_H_	levmar/misc.h	21;"	d
_PATTERN_H_	pattern.h	22;"	d
_POLY_H_	wcs/poly.h	18;"	d
_POW_	levmar/lmbc_core.c	56;"	d	file:
_PREFS_H_	prefs.h	27;"	d
_PROFIT_H_	profit.h	18;"	d
_TNX_H_	wcs/tnx.h	19;"	d
__ASSOC_H__	assoc.h	17;"	d
__ASTROM_H__	astrom.h	17;"	d
__BACK_H__	back.h	17;"	d
__BC_HIGH__	levmar/lmblec_core.c	61;"	d	file:
__BC_INTERVAL__	levmar/lmblec_core.c	59;"	d	file:
__BC_LOW__	levmar/lmblec_core.c	60;"	d	file:
__BC_WEIGHT__	levmar/lmblec_core.c	57;"	d	file:
__BLOCKSZ__	levmar/misc.h	39;"	d
__BLOCKSZ__SQ	levmar/misc.h	46;"	d
__BPRO_H__	bpro.h	20;"	d
__CHECK_H__	check.h	17;"	d
__CLEAN_H__	clean.h	18;"	d
__DEFINE_H__	define.h	17;"	d
__EXTRACT_H__	extract.h	19;"	d
__FFT_H__	fft.h	17;"	d
__FIELD_H__	field.h	17;"	d
__FILTER_H__	filter.h	18;"	d
__LSITMAX	levmar/lmbc_core.c	58;"	d	file:
__MAX__	levmar/lmblec_core.c	56;"	d	file:
__MEDIAN3	levmar/lmbc_core.c	52;"	d	file:
__MIN__	levmar/lmlec_core.c	339;"	d	file:
__MIN__	levmar/lmlec_core.c	363;"	d	file:
__STATIC__	levmar/Axb_core.c	30;"	d	file:
__STATIC__	levmar/Axb_core.c	32;"	d	file:
__SUBCNST	levmar/Axb.c	61;"	d	file:
__SUBCNST	levmar/Axb.c	71;"	d	file:
__SUBCNST	levmar/lm.c	51;"	d	file:
__SUBCNST	levmar/lm.c	61;"	d	file:
__SUBCNST	levmar/lmbc.c	52;"	d	file:
__SUBCNST	levmar/lmbc.c	62;"	d	file:
__SUBCNST	levmar/lmblec.c	58;"	d	file:
__SUBCNST	levmar/lmblec.c	67;"	d	file:
__SUBCNST	levmar/lmlec.c	56;"	d	file:
__SUBCNST	levmar/lmlec.c	63;"	d	file:
__SUBCNST	levmar/misc.c	44;"	d	file:
__SUBCNST	levmar/misc.c	52;"	d	file:
__TYPES_H__	types.h	17;"	d
__XML_H__	xml.h	17;"	d
_threads_gate_t	threads.h	/^typedef struct _threads_gate_t$/;"	s
a	cuda/cudatypes.h	/^  float		a, b, theta, abcor;		\/* moments and angle *\/$/;"	m	struct:__anon1
a	types.h	/^  float		a, b, theta, abcor;		\/* moments and angle *\/$/;"	m	struct:__anon6
a_pc	types.h	/^  float		a_pc,b_pc,theta_pc;		\/* PC shape parameters *\/$/;"	m	struct:__anon7
abcor	cuda/cudatypes.h	/^  float		a, b, theta, abcor;		\/* moments and angle *\/$/;"	m	struct:__anon1
abcor	types.h	/^  float		a, b, theta, abcor;		\/* moments and angle *\/$/;"	m	struct:__anon6
about_cat	fits/fitscat.c	/^int	about_cat(catstruct *cat, FILE *stream)$/;"	f
about_tab	fits/fitstab.c	/^int about_tab(catstruct *cat, char *tabname, FILE *stream)$/;"	f
abs_builddir	Makefile	/^abs_builddir = \/home\/zhao\/cuda-workspace\/sextractor-dev\/src$/;"	m
abs_builddir	fits/Makefile	/^abs_builddir = \/home\/zhao\/cuda-workspace\/sextractor\/src\/fits$/;"	m
abs_builddir	levmar/Makefile	/^abs_builddir = \/home\/zhao\/cuda-workspace\/sextractor\/src\/levmar$/;"	m
abs_builddir	wcs/Makefile	/^abs_builddir = \/home\/zhao\/cuda-workspace\/sextractor\/src\/wcs$/;"	m
abs_srcdir	Makefile	/^abs_srcdir = \/home\/zhao\/cuda-workspace\/sextractor-dev\/src$/;"	m
abs_srcdir	fits/Makefile	/^abs_srcdir = \/home\/zhao\/cuda-workspace\/sextractor\/src\/fits$/;"	m
abs_srcdir	levmar/Makefile	/^abs_srcdir = \/home\/zhao\/cuda-workspace\/sextractor\/src\/levmar$/;"	m
abs_srcdir	wcs/Makefile	/^abs_srcdir = \/home\/zhao\/cuda-workspace\/sextractor\/src\/wcs$/;"	m
abs_top_builddir	Makefile	/^abs_top_builddir = \/home\/zhao\/cuda-workspace\/sextractor-dev$/;"	m
abs_top_builddir	fits/Makefile	/^abs_top_builddir = \/home\/zhao\/cuda-workspace\/sextractor$/;"	m
abs_top_builddir	levmar/Makefile	/^abs_top_builddir = \/home\/zhao\/cuda-workspace\/sextractor$/;"	m
abs_top_builddir	wcs/Makefile	/^abs_top_builddir = \/home\/zhao\/cuda-workspace\/sextractor$/;"	m
abs_top_srcdir	Makefile	/^abs_top_srcdir = \/home\/zhao\/cuda-workspace\/sextractor-dev$/;"	m
abs_top_srcdir	fits/Makefile	/^abs_top_srcdir = \/home\/zhao\/cuda-workspace\/sextractor$/;"	m
abs_top_srcdir	levmar/Makefile	/^abs_top_srcdir = \/home\/zhao\/cuda-workspace\/sextractor$/;"	m
abs_top_srcdir	wcs/Makefile	/^abs_top_srcdir = \/home\/zhao\/cuda-workspace\/sextractor$/;"	m
ac_ct_CC	Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	fits/Makefile	/^ac_ct_CC = cc$/;"	m
ac_ct_CC	levmar/Makefile	/^ac_ct_CC = cc$/;"	m
ac_ct_CC	wcs/Makefile	/^ac_ct_CC = cc$/;"	m
ac_ct_CXX	fits/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	levmar/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	wcs/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_F77	fits/Makefile	/^ac_ct_F77 = gfortran$/;"	m
ac_ct_F77	levmar/Makefile	/^ac_ct_F77 = gfortran$/;"	m
ac_ct_F77	wcs/Makefile	/^ac_ct_F77 = gfortran$/;"	m
access_type	fits/fitscat.h	/^				access_type;	\/* Type of access *\/$/;"	t	typeref:enum:__anon28
access_type1	fits/fitscat.h	/^  access_type	access_type1;		\/* READ_ONLY or WRITE_ONLY *\/$/;"	m	struct:structcat
acoeff	pattern.h	/^  double	*acoeff;		\/* Argument from pattern coefficients *\/$/;"	m	struct:__anon12
adata	levmar/lmbc_core.c	/^  void *adata;$/;"	m	struct:FUNC_STATE	file:
adata	levmar/lmbc_core.c	/^  void *adata;$/;"	m	struct:LMBC_DIF_DATA	file:
adata	levmar/lmblec_core.c	/^  void *adata;$/;"	m	struct:LMBLEC_DATA	file:
adata	levmar/lmlec_core.c	/^  void *adata;$/;"	m	struct:LMLEC_DATA	file:
add_cleanupfilename	fits/fitscleanup.c	/^void	add_cleanupfilename(char *filename)$/;"	f
add_key	fits/fitskey.c	/^int	add_key(keystruct *key, tabstruct *tab, int pos)$/;"	f
add_tab	fits/fitstab.c	/^int	add_tab(tabstruct *tab, catstruct *cat, int pos)$/;"	f
addcheck	check.c	/^void	addcheck(checkstruct *check, float *psf,$/;"	f
addcleanobj	clean.c	/^void	addcleanobj(objstruct *objin)$/;"	f
addhistoryto_cat	fits/fitscat.c	/^int	addhistoryto_cat(catstruct *cat, char *str)$/;"	f
addimage	image.c	/^void	addimage(picstruct *field, float *psf,$/;"	f
addimage_center	image.c	/^void	addimage_center(picstruct *field, float *psf, int w,int h,$/;"	f
addkeyto_head	fits/fitshead.c	/^int	addkeyto_head(tabstruct *tab, keystruct *key)$/;"	f
addkeywordto_head	fits/fitshead.c	/^int	addkeywordto_head(tabstruct *tab, char *keyword, char *comment)$/;"	f
addobj	manobjlist.c	/^int	addobj(int objnb, objliststruct *objl1, objliststruct *objl2)$/;"	f
airfwd	wcs/proj.c	/^int airfwd(phi, theta, prj, x, y)$/;"	f
airrev	wcs/proj.c	/^int airrev(x, y, prj, phi, theta)$/;"	f
airset	wcs/proj.c	/^int airset(prj)$/;"	f
aitfwd	wcs/proj.c	/^int aitfwd(phi, theta, prj, x, y)$/;"	f
aitrev	wcs/proj.c	/^int aitrev(x, y, prj, phi, theta)$/;"	f
aitset	wcs/proj.c	/^int aitset(prj)$/;"	f
alloc_body	fits/fitsbody.c	/^PIXTYPE	*alloc_body(tabstruct *tab, void (*func)(PIXTYPE *ptr, int npix))$/;"	f
alloccatparams	catout.c	/^void	alloccatparams(void)$/;"	f
allocflag	fits/fitscat.h	/^  int         allocflag;              \/* true if ptr dynamically allocated *\/$/;"	m	struct:structkey
allocparcelout	refine.c	/^void allocparcelout(void) {$/;"	f
alpha1950	types.h	/^  double	alpha1950, delta1950;		\/* B1950 alpha, delta *\/$/;"	m	struct:__anon7
alpha1950_prof	types.h	/^  double	alpha1950_prof, delta1950_prof;	\/* B1950 alpha, delta *\/$/;"	m	struct:__anon7
alpha1950_psf	types.h	/^  double	alpha1950_psf, delta1950_psf;	\/* B1950 alpha, delta *\/$/;"	m	struct:__anon7
alpha2000	types.h	/^  double	alpha2000, delta2000;		\/* J2000 alpha, delta *\/$/;"	m	struct:__anon7
alpha2000_prof	types.h	/^  double	alpha2000_prof, delta2000_prof;	\/* J2000 alpha, delta *\/$/;"	m	struct:__anon7
alpha2000_psf	types.h	/^  double	alpha2000_psf, delta2000_psf;	\/* J2000 alpha, delta *\/$/;"	m	struct:__anon7
alphas	types.h	/^  double	alphas, deltas;			\/* native alpha, delta *\/$/;"	m	struct:__anon7
alphas_prof	types.h	/^  double	alphas_prof, deltas_prof;	\/* native alpha, delta *\/$/;"	m	struct:__anon7
alphas_psf	types.h	/^  double	alphas_psf, deltas_psf;		\/* native alpha, delta *\/$/;"	m	struct:__anon7
am__aclocal_m4_deps	Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/acx_atlas.m4 \\$/;"	m
am__aclocal_m4_deps	fits/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/acx_atlas.m4 \\$/;"	m
am__aclocal_m4_deps	levmar/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/acx_atlas.m4 \\$/;"	m
am__aclocal_m4_deps	wcs/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/acx_atlas.m4 \\$/;"	m
am__cd	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	fits/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	levmar/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	wcs/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	fits/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	levmar/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	wcs/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__depfiles_maybe	Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__depfiles_maybe	fits/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__depfiles_maybe	levmar/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__depfiles_maybe	wcs/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__include	Makefile	/^am__include = include$/;"	m
am__include	fits/Makefile	/^am__include = include$/;"	m
am__include	levmar/Makefile	/^am__include = include$/;"	m
am__include	wcs/Makefile	/^am__include = include$/;"	m
am__installdirs	Makefile	/^am__installdirs = "$(DESTDIR)$(bindir)"$/;"	m
am__leading_dot	Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	fits/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	levmar/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	wcs/Makefile	/^am__leading_dot = .$/;"	m
am__mv	Makefile	/^am__mv = mv -f$/;"	m
am__quote	Makefile	/^am__quote = $/;"	m
am__quote	fits/Makefile	/^am__quote = $/;"	m
am__quote	levmar/Makefile	/^am__quote = $/;"	m
am__quote	wcs/Makefile	/^am__quote = $/;"	m
am__relativize	Makefile	/^am__relativize = \\$/;"	m
am__tar	Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__tar	fits/Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__tar	levmar/Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__tar	wcs/Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__untar	Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__untar	fits/Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__untar	levmar/Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__untar	wcs/Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am_ldactoasc_OBJECTS	Makefile	/^am_ldactoasc_OBJECTS = ldactoasc.$(OBJEXT)$/;"	m
am_libfits_a_OBJECTS	fits/Makefile	/^am_libfits_a_OBJECTS = fitsbody.$(OBJEXT) fitscat.$(OBJEXT) \\$/;"	m
am_liblevmar_a_OBJECTS	levmar/Makefile	/^am_liblevmar_a_OBJECTS = Axb.$(OBJEXT) lmbc.$(OBJEXT) lm.$(OBJEXT) \\$/;"	m
am_libwcs_c_a_OBJECTS	wcs/Makefile	/^am_libwcs_c_a_OBJECTS = cel.$(OBJEXT) lin.$(OBJEXT) poly.$(OBJEXT) \\$/;"	m
am_sex_OBJECTS	Makefile	/^am_sex_OBJECTS = analyse.$(OBJEXT) assoc.$(OBJEXT) astrom.$(OBJEXT) \\$/;"	m
amp	som.h	/^  float		amp, sigamp;		\/* Best fitting amplitude and error *\/$/;"	m	struct:__anon25
analyse	analyse.c	/^void  analyse(picstruct *field, picstruct *dfield, int objnb,$/;"	f
ap1950	fitswcs.h	/^  double	ap1950,dp1950;		\/* B1950 coordinates of pole *\/$/;"	m	struct:wcs
ap2000	fitswcs.h	/^  double	ap2000,dp2000;		\/* J2000 coordinates of pole *\/$/;"	m	struct:wcs
apert	prefs.h	/^  double	apert[MAXNAPER];			\/* apert size (pix) *\/$/;"	m	struct:__anon44
apert_type	prefs.h	/^  aperttype		apert_type;	\/* type of aperture *\/$/;"	m	struct:__anon44
aperttype	prefs.h	/^typedef	enum	{PNONE, FIXED, AUTO} aperttype;$/;"	t	typeref:enum:__anon31
arcfwd	wcs/proj.c	/^int arcfwd(phi, theta, prj, x, y)$/;"	f
arcrev	wcs/proj.c	/^int arcrev(x, y, prj, phi, theta)$/;"	f
arcset	wcs/proj.c	/^int arcset(prj)$/;"	f
asc2bin_tab	fits/fitsconv.c	/^tabstruct *asc2bin_tab(catstruct *catin, char *tabinname, catstruct *catout,$/;"	f
ascfile	catout.c	/^FILE		*ascfile;$/;"	v
aspect	profit.h	/^  double	*aspect;		\/* Aspect ratio *\/$/;"	m	struct:__anon22
assoc	types.h	/^  float		*assoc;				\/* ASSOCiated data *\/$/;"	m	struct:__anon7
assoc	types.h	/^  struct structassoc	*assoc;		\/* ptr to the assoc-list *\/$/;"	m	struct:pic	typeref:struct:pic::structassoc
assoc_data	prefs.h	/^  int		assoc_data[MAXNASSOC];		       	\/* ASSOC data cols *\/$/;"	m	struct:__anon44
assoc_flag	prefs.h	/^  int		assoc_flag;				\/* ASSOCiation flag *\/$/;"	m	struct:__anon44
assoc_name	prefs.h	/^  char		assoc_name[MAXCHAR];			\/* ASSOC-list name *\/$/;"	m	struct:__anon44
assoc_number	types.h	/^  int		assoc_number;			\/* nb of ASSOCiated objects *\/$/;"	m	struct:__anon7
assoc_param	prefs.h	/^  int		assoc_param[3];				\/* ASSOC param cols *\/$/;"	m	struct:__anon44
assoc_radius	prefs.h	/^  double	assoc_radius;				\/* ASSOC range *\/$/;"	m	struct:__anon44
assoc_size	prefs.h	/^  int		assoc_size;				\/* nb of parameters *\/$/;"	m	struct:__anon44
assoc_type	prefs.h	/^  assoctype	assoc_type;					\/* type of assoc. *\/$/;"	m	struct:__anon44
assocselec_type	prefs.h	/^  assocselectype  assocselec_type;		\/* type of assoc. *\/$/;"	m	struct:__anon44
assocselectype	prefs.h	/^assocselectype;$/;"	t	typeref:enum:__anon40
assocstruct	assoc.h	/^  }             assocstruct;$/;"	t	typeref:struct:structassoc
assoctype	prefs.h	/^	 ASSOC_SUM, ASSOC_MAGSUM, ASSOC_MIN, ASSOC_MAX} assoctype;$/;"	t	typeref:enum:__anon39
astrom_errparam	astrom.c	/^void	astrom_errparam(picstruct *field, objstruct *obj)$/;"	f
astrom_proferrparam	astrom.c	/^void	astrom_proferrparam(picstruct *field, objstruct *obj)$/;"	f
astrom_profshapeparam	astrom.c	/^void	astrom_profshapeparam(picstruct *field, objstruct *obj)$/;"	f
astrom_shapeparam	astrom.c	/^void	astrom_shapeparam(picstruct *field, objstruct *obj)$/;"	f
astrom_winerrparam	astrom.c	/^void	astrom_winerrparam(picstruct *field, objstruct *obj)$/;"	f
astrom_winshapeparam	astrom.c	/^void	astrom_winshapeparam(picstruct *field, objstruct *obj)$/;"	f
autoaper	prefs.h	/^  double	autoaper[2];				\/* minimum apertures *\/$/;"	m	struct:__anon44
autoparam	prefs.h	/^  double	autoparam[2];				\/* Kron parameters *\/$/;"	m	struct:__anon44
aw	types.h	/^  float		aw, bw;				\/* WORLD ellipse size *\/$/;"	m	struct:__anon7
azpfwd	wcs/proj.c	/^int azpfwd(phi, theta, prj, x, y)$/;"	f
azprev	wcs/proj.c	/^int azprev(x, y, prj, phi, theta)$/;"	f
azpset	wcs/proj.c	/^int azpset(prj)$/;"	f
b	cuda/cudatypes.h	/^  float		a, b, theta, abcor;		\/* moments and angle *\/$/;"	m	struct:__anon1
b	neurro.h	/^	double	b[CONNEX][NEURONS];$/;"	m	struct:__anon13
b	types.h	/^  float		a, b, theta, abcor;		\/* moments and angle *\/$/;"	m	struct:__anon6
b2j	fitswcs.c	/^void	b2j(double yearobs, double alphain, double deltain,$/;"	f
b_pc	types.h	/^  float		a_pc,b_pc,theta_pc;		\/* PC shape parameters *\/$/;"	m	struct:__anon7
back	back.c	/^PIXTYPE	back(picstruct *field, int x, int y)$/;"	f
back	types.h	/^  float		*back;			\/* ptr to the background map in mem *\/$/;"	m	struct:pic
back_name	prefs.h	/^  char		back_name[MAXCHAR];			\/* bkgnd filename *\/$/;"	m	struct:__anon44
back_origin	prefs.h	/^  back_origintype			back_origin;	\/* origin of bkgnd *\/$/;"	m	struct:__anon44
back_origintype	prefs.h	/^typedef enum	{IMAGE, AFILE}			back_origintype;$/;"	t	typeref:enum:__anon36
back_type	prefs.h	/^  backenum	back_type[2];				\/* bkgnd type *\/$/;"	m	struct:__anon44
back_type	types.h	/^  backenum	back_type;		\/* Background type *\/$/;"	m	struct:pic
back_val	prefs.h	/^  double	back_val[2];				\/* user-def. bkg *\/$/;"	m	struct:__anon44
backenum	types.h	/^		backenum;				\/* BACK_TYPE *\/$/;"	t	typeref:enum:__anon3
backfsize	prefs.h	/^  int		backfsize[2];				\/* bkgnd filt. size *\/$/;"	m	struct:__anon44
backfthresh	prefs.h	/^  double	backfthresh;				\/* bkgnd fil. thresh *\/$/;"	m	struct:__anon44
backguess	back.c	/^float	backguess(backstruct *bkg, float *mean, float *sigma)$/;"	f
backh	types.h	/^  int		backw, backh;		\/* x,y size of a bkgnd mesh *\/$/;"	m	struct:pic
backhisto	back.c	/^void	backhisto(backstruct *backmesh, PIXTYPE *buf, size_t bufsize,$/;"	f
backline	types.h	/^  PIXTYPE	*backline;		\/* current interpolated bkgnd line *\/$/;"	m	struct:pic
backmean	types.h	/^  float		backmean;		\/* median bkgnd value in image *\/$/;"	m	struct:pic
backmean	xml.h	/^  float		backmean[2];				\/* mean background *\/$/;"	m	struct:__anon10
backrmsline	back.c	/^void	backrmsline(picstruct *field, int y, PIXTYPE *line)$/;"	f
backsig	types.h	/^  float		backsig;		\/* median bkgnd rms in image *\/$/;"	m	struct:pic
backsig	xml.h	/^  float		backsig[2];				\/* mean back stddev *\/$/;"	m	struct:__anon10
backsize	prefs.h	/^  int		backsize[2];				\/* bkgnd mesh size *\/$/;"	m	struct:__anon44
backstat	back.c	/^void	backstat(backstruct *backmesh, PIXTYPE *buf, size_t bufsize,$/;"	f
backstruct	back.h	/^  }	backstruct;$/;"	t	typeref:struct:structback
backw	types.h	/^  int		backw, backh;		\/* x,y size of a bkgnd mesh *\/$/;"	m	struct:pic
basis	wcs/poly.h	/^  double	*basis;		\/* Current values of the basis functions *\/$/;"	m	struct:poly
bctype	levmar/lmblec_core.c	/^  int *bctype;$/;"	m	struct:LMBLEC_DATA	file:
belong	manobjlist.c	/^int	belong(int corenb, objliststruct *coreobjlist,$/;"	f
bin_PROGRAMS	Makefile	/^bin_PROGRAMS = sex$(EXEEXT) ldactoasc$(EXEEXT)$/;"	m
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	fits/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	levmar/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	wcs/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bitpix	fits/fitscat.h	/^  int		bitpix;			\/* bits per element *\/$/;"	m	struct:structtab
bitpix	types.h	/^  int		bitpix, bytepix;	\/* nb of bits and bytes per pixel *\/$/;"	m	struct:pic
bitsgn	fits/fitscat.h	/^  int		bitsgn;			\/* = 0 if unsigned data *\/$/;"	m	struct:structtab
bitsgn	types.h	/^  int		bitsgn;			\/* non-zero if signed integer data *\/$/;"	m	struct:pic
bkg	cuda/cudatypes.h	/^  float		bkg, dbkg, sigbkg;		\/* Background stats (ADU) *\/$/;"	m	struct:__anon1
bkg	types.h	/^  float		bkg, dbkg, sigbkg;		\/* Background stats (ADU) *\/$/;"	m	struct:__anon6
blank	cuda/cudatypes.h	/^  PIXTYPE	*blank, *dblank; 	       	\/* BLANKing sub-images  *\/$/;"	m	struct:__anon1
blank	fits/fitscat.h	/^  int		blank;			\/* integer code for undefined values *\/$/;"	m	struct:structtab
blank	types.h	/^  PIXTYPE	*blank, *dblank; 	       	\/* BLANKing sub-images  *\/$/;"	m	struct:__anon6
blank_flag	prefs.h	/^  int		blank_flag;				\/* BLANKing flag *\/$/;"	m	struct:__anon44
blank_keys	fits/fitskey.c	/^int	blank_keys(tabstruct *tab)$/;"	f
blankcheck	check.c	/^void	blankcheck(checkstruct *check, PIXTYPE *mask, int w,int h,$/;"	f
blankflag	fits/fitscat.h	/^  int		blankflag;		\/* set if a blank keyword was found *\/$/;"	m	struct:structtab
blankimage	image.c	/^void	blankimage(picstruct *field, PIXTYPE *mask, int w,int h,$/;"	f
block	threads.h	/^  pthread_mutex_t	block;		\/* Safety Mutex (avoid "rebound") *\/$/;"	m	struct:_threads_gate_t
body_maxram	fits/fitsbody.c	/^size_t	body_maxram = BODY_DEFRAM,$/;"	v
body_maxvram	fits/fitsbody.c	/^	body_maxvram = BODY_DEFVRAM,$/;"	v
body_ramflag	fits/fitsbody.c	/^	body_ramleft, body_vramleft, body_ramflag;$/;"	v
body_ramleft	fits/fitsbody.c	/^	body_ramleft, body_vramleft, body_ramflag;$/;"	v
body_swapdirname	fits/fitsbody.c	/^char	body_swapdirname[MAXCHARS] = BODY_DEFSWAPDIR;$/;"	v
body_vmnumber	fits/fitsbody.c	/^int	body_vmnumber;$/;"	v
body_vramleft	fits/fitsbody.c	/^	body_ramleft, body_vramleft, body_ramflag;$/;"	v
bodybuf	fits/fitscat.h	/^  char		*bodybuf;		\/* buffer containing the body *\/$/;"	m	struct:structtab
bodypos	fits/fitscat.h	/^  OFF_T		bodypos;		\/* position of the body in the file *\/$/;"	m	struct:structtab
bodysum	fits/fitscat.h	/^  unsigned int	bodysum;		\/* Checksum of the FITS body *\/$/;"	m	struct:structtab
bonfwd	wcs/proj.c	/^int bonfwd(phi, theta, prj, x, y)$/;"	f
bonrev	wcs/proj.c	/^int bonrev(x, y, prj, phi, theta)$/;"	f
bonset	wcs/proj.c	/^int bonset(prj)$/;"	f
bpann	filter.h	/^  struct structbpann	*bpann;$/;"	m	struct:structfilter	typeref:struct:structfilter::structbpann
bpann	retina.h	/^  struct structbpann	*bpann;	\/* The neural network *\/$/;"	m	struct:structreti	typeref:struct:structreti::structbpann
bpannstruct	bpro.h	/^	}	bpannstruct;$/;"	t	typeref:struct:structbpann
brain	neurro.c	/^brainstruct	*brain;$/;"	v
brainstruct	neurro.h	/^	}	brainstruct;$/;"	t	typeref:struct:__anon13
bscale	fits/fitscat.h	/^  double	bscale;			\/* data scale factor *\/$/;"	m	struct:structtab
bscale	types.h	/^  double	bscale, bzero;		\/* FITS scale and offset *\/$/;"	m	struct:pic
bswapflag	fits/fitscat.c	/^int		bswapflag;$/;"	v
bt	psf.h	/^  double	*bt;		\/* B\/T for each component *\/$/;"	m	struct:pc
bt3	levmar/lmdemo.c	/^void bt3(double *p, double *x, int m, int n, void *data)$/;"	f
buf	catout.c	/^char		*buf;$/;"	v
build	Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build	fits/Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build	levmar/Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build	wcs/Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build_alias	Makefile	/^build_alias = $/;"	m
build_alias	fits/Makefile	/^build_alias = $/;"	m
build_alias	levmar/Makefile	/^build_alias = $/;"	m
build_alias	wcs/Makefile	/^build_alias = $/;"	m
build_cpu	Makefile	/^build_cpu = x86_64$/;"	m
build_cpu	fits/Makefile	/^build_cpu = x86_64$/;"	m
build_cpu	levmar/Makefile	/^build_cpu = x86_64$/;"	m
build_cpu	wcs/Makefile	/^build_cpu = x86_64$/;"	m
build_os	Makefile	/^build_os = linux-gnu$/;"	m
build_os	fits/Makefile	/^build_os = linux-gnu$/;"	m
build_os	levmar/Makefile	/^build_os = linux-gnu$/;"	m
build_os	wcs/Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_triplet	fits/Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_triplet	levmar/Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_triplet	wcs/Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_vendor	Makefile	/^build_vendor = unknown$/;"	m
build_vendor	fits/Makefile	/^build_vendor = unknown$/;"	m
build_vendor	levmar/Makefile	/^build_vendor = unknown$/;"	m
build_vendor	wcs/Makefile	/^build_vendor = unknown$/;"	m
builddir	Makefile	/^builddir = .$/;"	m
builddir	fits/Makefile	/^builddir = .$/;"	m
builddir	levmar/Makefile	/^builddir = .$/;"	m
builddir	wcs/Makefile	/^builddir = .$/;"	m
bw	types.h	/^  float		aw, bw;				\/* WORLD ellipse size *\/$/;"	m	struct:__anon7
bytepix	fits/fitscat.h	/^  int		bytepix;		\/* bytes per element *\/$/;"	m	struct:structtab
bytepix	types.h	/^  int		bitpix, bytepix;	\/* nb of bits and bytes per pixel *\/$/;"	m	struct:pic
bzero	fits/fitscat.h	/^  double	bzero;			\/* data offset parameter *\/$/;"	m	struct:structtab
bzero	types.h	/^  double	bscale, bzero;		\/* FITS scale and offset *\/$/;"	m	struct:pic
c	levmar/lmlec_core.c	/^  LM_REAL *c, *Z, *p, *jac;$/;"	m	struct:LMLEC_DATA	file:
carfwd	wcs/proj.c	/^int carfwd(phi, theta, prj, x, y)$/;"	f
carrev	wcs/proj.c	/^int carrev(x, y, prj, phi, theta)$/;"	f
carset	wcs/proj.c	/^int carset(prj)$/;"	f
cat	fits/fitscat.h	/^  struct structcat *cat;		\/* (original) parent catalog *\/$/;"	m	struct:structtab	typeref:struct:structtab::structcat
cat	types.h	/^  catstruct	*cat;			\/* FITS structure *\/$/;"	m	struct:pic
cat_name	prefs.h	/^  char		cat_name[MAXCHAR];			\/* catalog filename*\/$/;"	m	struct:__anon44
cat_type	prefs.h	/^  cattype	cat_type;				\/* type of catalog *\/$/;"	m	struct:__anon44
catopen_flag	catout.c	/^int			catopen_flag = 0;$/;"	v
catstruct	fits/fitscat.h	/^  }		catstruct;$/;"	t	typeref:struct:structcat
cattype	prefs.h	/^  	FITS_LDAC, FITS_TPX, FITS_10}	 cattype;$/;"	t	typeref:enum:__anon32
cd	fitswcs.h	/^  double	cd[NAXIS*NAXIS];	\/* FITS CD matrix *\/$/;"	m	struct:wcs
cdelt	fitswcs.h	/^  double	cdelt[NAXIS];		\/* FITS CDELT parameters *\/$/;"	m	struct:wcs
cdelt	wcs/lin.h	/^   double *cdelt;$/;"	m	struct:linprm
ceafwd	wcs/proj.c	/^int ceafwd(phi, theta, prj, x, y)$/;"	f
cearev	wcs/proj.c	/^int cearev(x, y, prj, phi, theta)$/;"	f
ceaset	wcs/proj.c	/^int ceaset(prj)$/;"	f
cel	fitswcs.h	/^  struct celprm	*cel;			\/* WCSLIB's celprm structure *\/$/;"	m	struct:wcs	typeref:struct:wcs::celprm
celfwd	wcs/cel.c	/^int celfwd(pcode, lng, lat, cel, phi, theta, prj, x, y)$/;"	f
celfwd_errmsg	wcs/cel.c	/^const char *celfwd_errmsg[] = {$/;"	v
celprm	wcs/cel.h	/^struct celprm {$/;"	s
celrev	wcs/cel.c	/^int celrev(pcode, x, y, prj, phi, theta, cel, lng, lat)$/;"	f
celrev_errmsg	wcs/cel.c	/^const char *celrev_errmsg[] = {$/;"	v
celset	wcs/cel.c	/^int celset(pcode, cel, prj)$/;"	f
celset_errmsg	wcs/cel.c	/^const char *celset_errmsg[] = {$/;"	v
celsys	fitswcs.h	/^  celsysenum	celsys;			\/* Celestial coordinate system *\/$/;"	m	struct:wcs
celsys_to_eq	fitswcs.c	/^int	celsys_to_eq(wcsstruct *wcs, double *wcspos)$/;"	f
celsysconvflag	fitswcs.h	/^  int		celsysconvflag;		\/* Equ. <=> Cel. conversion needed? *\/$/;"	m	struct:wcs
celsysenum	fitswcs.h	/^	CELSYS_ECLIPTIC, CELSYS_SUPERGALACTIC}	celsysenum;$/;"	t	typeref:enum:__anon14
celsysmat	fitswcs.h	/^  double	celsysmat[4];		\/* Equ. <=> Cel. system parameters *\/$/;"	m	struct:wcs
celsysname	wcscelsys.h	/^char	celsysname[][2][8] = {  {"RA--", "DEC-"},$/;"	v
celsysorig	wcscelsys.h	/^double	celsysorig[][2] = {	{0.0, 0.0},$/;"	v
celsyspole	wcscelsys.h	/^	celsyspole[][2] = {	{0.0, 90.0},$/;"	v
celsyssign	wcscelsys.h	/^	celsyssign[]	= {	 1.0,$/;"	v
changecatparamarrays	catout.c	/^void	changecatparamarrays(char *keyword, int *axisn, int naxis)$/;"	f
check	prefs.h	/^  struct structcheck	*(check[MAXCHECK]);		\/* check-image ptrs *\/$/;"	m	struct:__anon44	typeref:struct:__anon44::structcheck
check_PROGRAMS	Makefile	/^check_PROGRAMS = sex$(EXEEXT)$/;"	m
check_flag	prefs.h	/^  int		check_flag;				\/* CHECK-image flag *\/$/;"	m	struct:__anon44
check_name	prefs.h	/^  char		*(check_name[MAXCHECK]);       		\/* check-image names *\/$/;"	m	struct:__anon44
check_type	prefs.h	/^  checkenum    	check_type[MAXCHECK];		       	\/* check-image types *\/$/;"	m	struct:__anon44
checkenum	types.h	/^		checkenum;$/;"	t	typeref:enum:__anon4
checkmask	psf.h	/^PIXTYPE		*checkmask;$/;"	v
checkstruct	check.h	/^  }	checkstruct;$/;"	t	typeref:struct:structcheck
chi2	profit.h	/^  double	chi2;		\/* Std error per residual element *\/$/;"	m	struct:__anon23
chi2_psf	types.h	/^  float		chi2_psf;			\/* Red. chi2 of PSF-fitting *\/$/;"	m	struct:__anon7
chirality	fitswcs.h	/^  int		chirality;		\/* Chirality of the CD matrix *\/$/;"	m	struct:wcs
cholsolve	wcs/poly.c	/^int	cholsolve(double *a, double *b, int n)$/;"	f
cistrcmp	prefs.c	/^int     cistrcmp(char *cs, char *ct, int mode)$/;"	f
ckernw	som.h	/^  float		kernw, ckernw;		\/* Starting and current kernel width *\/$/;"	m	struct:__anon25
clean	clean.c	/^int	clean(picstruct *field, picstruct *dfield, int objnb,$/;"	f
clean_flag	prefs.h	/^  int		clean_flag;				\/* allow cleaning ? *\/$/;"	m	struct:__anon44
clean_param	prefs.h	/^  double	clean_param;				\/* cleaning effic. *\/$/;"	m	struct:__anon44
clean_stacksize	prefs.h	/^  int		clean_stacksize;			\/* size of buffer *\/$/;"	m	struct:__anon44
cleanmargin	prefs.h	/^  int		cleanmargin;				\/* CLEANing margin *\/$/;"	m	struct:__anon44
cleanobjlist	clean.h	/^objliststruct	*cleanobjlist;		\/* laconic, isn't it? *\/$/;"	v
cleanup_filename	fits/fitscleanup.c	/^char	**cleanup_filename;$/;"	v
cleanup_files	fits/fitscleanup.c	/^void	cleanup_files(void)$/;"	f
cleanup_nfiles	fits/fitscleanup.c	/^int	cleanup_nfiles;$/;"	v
cleanvictim	clean.c	/^static LONG		*cleanvictim;$/;"	v	file:
clearnrate	som.h	/^  float		learnrate, clearnrate;	\/* Starting and current learn. rates *\/$/;"	m	struct:__anon25
close_cat	fits/fitscat.c	/^int	close_cat(catstruct *cat)$/;"	f
code	profit.h	/^  proftypenum	code;			\/* Model code *\/$/;"	m	struct:__anon22
code	psf.h	/^  codestruct	*code;$/;"	m	struct:pc
code	psf.h	/^typedef struct code$/;"	s
codestruct	psf.h	/^  }		codestruct;$/;"	t	typeref:struct:code
codfwd	wcs/proj.c	/^int codfwd(phi, theta, prj, x, y)$/;"	f
codrev	wcs/proj.c	/^int codrev(x, y, prj, phi, theta)$/;"	f
codset	wcs/proj.c	/^int codset(prj)$/;"	f
coeff	pattern.h	/^  double	*coeff;			\/* Fitted pattern coefficients *\/$/;"	m	struct:__anon12
coeff	wcs/poly.h	/^  double	*coeff;		\/* Polynom coefficients *\/$/;"	m	struct:poly
coeff	wcs/tnx.h	/^  double	*coeff;			\/* Polynom coefficients *\/$/;"	m	struct:tnxaxis
coefwd	wcs/proj.c	/^int coefwd(phi, theta, prj, x, y)$/;"	f
coerev	wcs/proj.c	/^int coerev(x, y, prj, phi, theta)$/;"	f
coeset	wcs/proj.c	/^int coeset(prj)$/;"	f
combust	levmar/lmdemo.c	/^void combust(double *p, double *x, int m, int n, void *data)$/;"	f
command_line	prefs.h	/^  char		**command_line;				\/* Command line *\/$/;"	m	struct:__anon44
comment	fits/fitscat.h	/^  char		comment[80];		\/* a comment *\/$/;"	m	struct:structkey
comp_assoc	assoc.c	/^int	comp_assoc(const void *i1, const void *i2)$/;"	f
compress_buf	fits/fitscat.h	/^  char		*compress_buf;		\/* de-compression buffer *\/$/;"	m	struct:structtab
compress_bufptr	fits/fitscat.h	/^  char		*compress_bufptr;	\/* present pixel in buffer *\/$/;"	m	struct:structtab
compress_checkval	fits/fitscat.h	/^  int		compress_checkval;	\/* foreseen pixel or checksum value *\/$/;"	m	struct:structtab
compress_curval	fits/fitscat.h	/^  int		compress_curval;	\/* current pixel or checksum value *\/$/;"	m	struct:structtab
compress_npix	fits/fitscat.h	/^  size_t	compress_npix;		\/* remaining pixels in buffer *\/$/;"	m	struct:structtab
compress_type	fits/fitscat.h	/^  compresstype	compress_type;		\/* image compression type *\/$/;"	m	struct:structtab
compresstype	fits/fitscat.h	/^typedef enum {COMPRESS_NONE, COMPRESS_BASEBYTE, COMPRESS_PREVPIX} compresstype;$/;"	t	typeref:enum:__anon30
compute_blocksum	fits/fitscheck.c	/^unsigned int	compute_blocksum(char *buf, unsigned int sum)$/;"	f
compute_bodysum	fits/fitscheck.c	/^unsigned int	compute_bodysum(tabstruct *tab, unsigned int sum)$/;"	f
compute_gradient	psf.c	/^double *compute_gradient(double *weight,int width, int height,$/;"	f
compute_gradient_phot	psf.c	/^double *compute_gradient_phot(double *pweight,int width, int height,$/;"	f
compute_pos	psf.c	/^void compute_pos(int *pnpsf,int *pconvflag,int *pnpsfflag,double radmin2,$/;"	f
compute_pos_phot	psf.c	/^void compute_pos_phot(int *pnpsf,double *sol,double *flux)$/;"	f
compute_poserr	psf.c	/^void compute_poserr( int j,double *var,double *sol,obj2struct *obj2,double *x2,$/;"	f
compute_winpos	winpos.c	/^void	compute_winpos(picstruct *field, picstruct *wfield, objstruct *obj)$/;"	f
computeaperflux	photom.c	/^void computeaperflux(picstruct *field, picstruct *wfield, objstruct *obj, int i)$/;"	f
computeastrom	astrom.c	/^void	computeastrom(picstruct *field, objstruct *obj)$/;"	f
computeautoflux	photom.c	/^void computeautoflux(picstruct *field, picstruct *dfield, picstruct *wfield,$/;"	f
computeisocorflux	photom.c	/^void computeisocorflux(picstruct *field, objstruct *obj)$/;"	f
computemags	photom.c	/^void computemags(picstruct *field, objstruct *obj)$/;"	f
computepetroflux	photom.c	/^void computepetroflux(picstruct *field, picstruct *dfield, picstruct *wfield,$/;"	f
condvar	threads.h	/^  pthread_cond_t	condvar;	\/* Main condition variable *\/$/;"	m	struct:_threads_gate_t
const	wcs/lin.h	41;"	d
const	wcs/sph.c	106;"	d	file:
const	wcs/wcstrig.h	40;"	d
context	psf.h	/^  double	**context;	\/* Contexts *\/$/;"	m	struct:psf
contextname	psf.h	/^  char		**contextname;	\/* Array of context key-names *\/$/;"	m	struct:psf
contextoffset	psf.h	/^  double	*contextoffset;	\/* Offset to apply to context data *\/$/;"	m	struct:psf
contextscale	psf.h	/^  double	*contextscale;	\/* Scaling to apply to context data *\/$/;"	m	struct:psf
contexttyp	psf.h	/^  t_type	*contexttyp;	\/* Context types *\/$/;"	m	struct:psf
conv	filter.h	/^  float		*conv;		\/* pointer to the convolution mask *\/$/;"	m	struct:structfilter
convh	filter.h	/^  int		convw, convh;	\/* x,y size of the mask *\/$/;"	m	struct:structfilter
convolve	filter.c	/^void	convolve(picstruct *field, PIXTYPE *mscan)$/;"	f
convolve_image	filter.c	/^void	convolve_image(picstruct *field, double *vig1,$/;"	f
convw	filter.h	/^  int		convw, convh;	\/* x,y size of the mask *\/$/;"	m	struct:structfilter
coofwd	wcs/proj.c	/^int coofwd(phi, theta, prj, x, y)$/;"	f
coorev	wcs/proj.c	/^int coorev(x, y, prj, phi, theta)$/;"	f
cooset	wcs/proj.c	/^int cooset(prj)$/;"	f
coosys	prefs.h	/^  char		coosys[16];				\/* VOTable coord.sys *\/$/;"	m	struct:__anon44
copfwd	wcs/proj.c	/^int copfwd(phi, theta, prj, x, y)$/;"	f
coprev	wcs/proj.c	/^int coprev(x, y, prj, phi, theta)$/;"	f
copset	wcs/proj.c	/^int copset(prj)$/;"	f
copy_key	fits/fitskey.c	/^int	copy_key(tabstruct *tabin, char *keyname, tabstruct *tabout, int pos)$/;"	f
copy_tab	fits/fitstab.c	/^int	copy_tab(catstruct *catin, char *tabname, int seg,$/;"	f
copy_tab_fromptr	fits/fitstab.c	/^void	copy_tab_fromptr(tabstruct *tabin, catstruct *catout, int pos)$/;"	f
copy_tabs	fits/fitstab.c	/^int	copy_tabs(catstruct *catin, catstruct *catout)$/;"	f
copy_tabs_blind	fits/fitstab.c	/^int	copy_tabs_blind(catstruct *catin, catstruct *catout)$/;"	f
copy_tnxaxis	wcs/tnx.c	/^tnxaxisstruct	*copy_tnxaxis(tnxaxisstruct *axis)$/;"	f
copy_wcs	fitswcs.c	/^wcsstruct	*copy_wcs(wcsstruct *wcsin)$/;"	f
copyback	back.c	/^void	copyback(picstruct *infield, picstruct *outfield)$/;"	f
copydata	readimage.c	/^void copydata(picstruct *field, int offset, int size) {$/;"	f
copyimage	image.c	/^int	copyimage(picstruct *field, PIXTYPE *dest, int w,int h, int ix,int iy)$/;"	f
copyimage_center	image.c	/^int	copyimage_center(picstruct *field, PIXTYPE *dest, int w,int h,$/;"	f
covar	profit.h	/^  double	*covar;		\/* Covariance matrix *\/$/;"	m	struct:__anon23
crder	fitswcs.h	/^  double	crder[NAXIS];		\/* FITS CRDER parameters *\/$/;"	m	struct:wcs
create_wcs	fitswcs.c	/^wcsstruct	*create_wcs(char **ctype, double *crval, double *crpix,$/;"	f
createblank	plist.c	/^int	createblank(objliststruct *objlist, int no)$/;"	f
createsubmap	plist.c	/^int	createsubmap(objliststruct *objlist, int no)$/;"	f
crpix	fitswcs.h	/^  double	crpix[NAXIS];		\/* FITS CRPIX parameters *\/$/;"	m	struct:wcs
crpix	wcs/lin.h	/^   double *crpix;$/;"	m	struct:linprm
crval	fitswcs.h	/^  double	crval[NAXIS];		\/* FITS CRVAL parameters *\/$/;"	m	struct:wcs
cscfwd	wcs/proj.c	/^int cscfwd(phi, theta, prj, x, y)$/;"	f
cscrev	wcs/proj.c	/^int cscrev(x, y, prj, phi, theta)$/;"	f
cscset	wcs/proj.c	/^int cscset(prj)$/;"	f
csyer	fitswcs.h	/^  double	csyer[NAXIS];		\/* FITS CSYER parameters *\/$/;"	m	struct:wcs
ctg	globals.h	/^float			ctg[37], stg[37];$/;"	v
ctype	fitswcs.h	/^  char		ctype[NAXIS][9];	\/* FITS CTYPE strings *\/$/;"	m	struct:wcs
cubeface	wcs/wcs.h	/^   int cubeface;$/;"	m	struct:wcsprm
cunit	fitswcs.h	/^  char		cunit[NAXIS][32];	\/* FITS CUNIT strings *\/$/;"	m	struct:wcs
currext	types.h	/^  int		currext;				\/* current extension *\/$/;"	m	struct:__anon9
currext	xml.h	/^  int		currext;$/;"	m	struct:__anon10
cxx	cuda/cudatypes.h	/^  float		cxx,cyy,cxy;			\/* ellipse parameters *\/$/;"	m	struct:__anon1
cxx	types.h	/^  float		cxx,cyy,cxy;			\/* ellipse parameters *\/$/;"	m	struct:__anon6
cxxw	types.h	/^  float		cxxw,cyyw,cxyw;			\/* WORLD ellipse parameters *\/$/;"	m	struct:__anon7
cxy	cuda/cudatypes.h	/^  float		cxx,cyy,cxy;			\/* ellipse parameters *\/$/;"	m	struct:__anon1
cxy	types.h	/^  float		cxx,cyy,cxy;			\/* ellipse parameters *\/$/;"	m	struct:__anon6
cxyw	types.h	/^  float		cxxw,cyyw,cxyw;			\/* WORLD ellipse parameters *\/$/;"	m	struct:__anon7
cypfwd	wcs/proj.c	/^int cypfwd(phi, theta, prj, x, y)$/;"	f
cyprev	wcs/proj.c	/^int cyprev(x, y, prj, phi, theta)$/;"	f
cypset	wcs/proj.c	/^int cypset(prj)$/;"	f
cyy	cuda/cudatypes.h	/^  float		cxx,cyy,cxy;			\/* ellipse parameters *\/$/;"	m	struct:__anon1
cyy	types.h	/^  float		cxx,cyy,cxy;			\/* ellipse parameters *\/$/;"	m	struct:__anon6
cyyw	types.h	/^  float		cxxw,cyyw,cxyw;			\/* WORLD ellipse parameters *\/$/;"	m	struct:__anon7
d2r	wcs/wcstrig.c	/^const double d2r = PI \/ 180.0;$/;"	v
data	assoc.h	/^  float		*data;			\/* Copy of current parameters *\/$/;"	m	struct:structassoc
datadir	Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	fits/Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	levmar/Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	wcs/Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	fits/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	levmar/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	wcs/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
dback	types.h	/^  float		*dback;			\/* ptr to the background deriv. map *\/$/;"	m	struct:pic
dbkg	cuda/cudatypes.h	/^  float		bkg, dbkg, sigbkg;		\/* Background stats (ADU) *\/$/;"	m	struct:__anon1
dbkg	types.h	/^  float		bkg, dbkg, sigbkg;		\/* Background stats (ADU) *\/$/;"	m	struct:__anon6
dblank	cuda/cudatypes.h	/^  PIXTYPE	*blank, *dblank; 	       	\/* BLANKing sub-images  *\/$/;"	m	struct:__anon1
dblank	types.h	/^  PIXTYPE	*blank, *dblank; 	       	\/* BLANKing sub-images  *\/$/;"	m	struct:__anon6
ddummy	sexhead1.h	/^double	ddummy;$/;"	v
deb_maxarea	prefs.h	/^  int		deb_maxarea;				\/* max deblend. area *\/$/;"	m	struct:__anon44
deblend_mincont	prefs.h	/^  double	deblend_mincont;			\/* minimum contrast *\/$/;"	m	struct:__anon44
deblend_nthresh	prefs.h	/^  int		deblend_nthresh;			\/* threshold number *\/$/;"	m	struct:__anon44
decode_checksum	fits/fitscheck.c	/^unsigned int	decode_checksum(char *str)$/;"	f
default_prefs	preflist.h	/^char *default_prefs[] =$/;"	v
degree	wcs/poly.h	/^  int		*degree;	\/* Degree in each group *\/$/;"	m	struct:poly
degtosexal	fitswcs.c	/^char    *degtosexal(double alpha, char *str)$/;"	f
degtosexde	fitswcs.c	/^char    *degtosexde(double delta, char *str)$/;"	f
delta	levmar/lmbc_core.c	/^  LM_REAL delta;$/;"	m	struct:LMBC_DIF_DATA	file:
delta1950	types.h	/^  double	alpha1950, delta1950;		\/* B1950 alpha, delta *\/$/;"	m	struct:__anon7
delta1950_prof	types.h	/^  double	alpha1950_prof, delta1950_prof;	\/* B1950 alpha, delta *\/$/;"	m	struct:__anon7
delta1950_psf	types.h	/^  double	alpha1950_psf, delta1950_psf;	\/* B1950 alpha, delta *\/$/;"	m	struct:__anon7
delta2000	types.h	/^  double	alpha2000, delta2000;		\/* J2000 alpha, delta *\/$/;"	m	struct:__anon7
delta2000_prof	types.h	/^  double	alpha2000_prof, delta2000_prof;	\/* J2000 alpha, delta *\/$/;"	m	struct:__anon7
delta2000_psf	types.h	/^  double	alpha2000_psf, delta2000_psf;	\/* J2000 alpha, delta *\/$/;"	m	struct:__anon7
deltas	types.h	/^  double	alphas, deltas;			\/* native alpha, delta *\/$/;"	m	struct:__anon7
deltas_prof	types.h	/^  double	alphas_prof, deltas_prof;	\/* native alpha, delta *\/$/;"	m	struct:__anon7
deltas_psf	types.h	/^  double	alphas_psf, deltas_psf;		\/* native alpha, delta *\/$/;"	m	struct:__anon7
depcomp	Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/autoconf\/depcomp$/;"	m
depcomp	fits/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/autoconf\/depcomp$/;"	m
depcomp	levmar/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/autoconf\/depcomp$/;"	m
depcomp	wcs/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/autoconf\/depcomp$/;"	m
depth	check.h	/^  int		width, height, depth;	\/* size of check-image *\/$/;"	m	struct:structcheck
detect_type	prefs.h	/^  detecttype	detect_type;			\/* detection type *\/$/;"	m	struct:__anon44
detecttype	prefs.h	/^typedef enum	{CCD, PHOTO} 	detecttype;$/;"	t	typeref:enum:__anon34
dflux	cuda/cudatypes.h	/^  float		dflux;				\/* integrated det. flux *\/$/;"	m	struct:__anon1
dflux	types.h	/^  float		dflux;				\/* integrated det. flux *\/$/;"	m	struct:__anon6
dimage_flag	prefs.h	/^  int		dimage_flag;				\/* detect. image ? *\/$/;"	m	struct:__anon44
discan	extract.c	/^static int		*start, *end, *discan, xmin,ymin,xmax,ymax;$/;"	v	file:
dmax	key.h	/^  double	dmin, dmax;		\/* Range for doubles *\/$/;"	m	struct:__anon17
dmin	key.h	/^  double	dmin, dmax;		\/* Range for doubles *\/$/;"	m	struct:__anon17
dnpix	cuda/cudatypes.h	/^  int		dnpix;				\/* nb of pix above thresh  *\/$/;"	m	struct:__anon1
dnpix	types.h	/^  int		dnpix;				\/* nb of pix above thresh  *\/$/;"	m	struct:__anon6
do_assoc	assoc.c	/^int	do_assoc(picstruct *field, float x, float y)$/;"	f
docdir	Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	fits/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	levmar/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	wcs/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
double_psf_fit	psf.c	/^void    double_psf_fit(psfstruct *ppsf, picstruct *pfield, picstruct *pwfield,$/;"	f
dp1950	fitswcs.h	/^  double	ap1950,dp1950;		\/* B1950 coordinates of pole *\/$/;"	m	struct:wcs
dp2000	fitswcs.h	/^  double	ap2000,dp2000;		\/* J2000 coordinates of pole *\/$/;"	m	struct:wcs
dpeak	cuda/cudatypes.h	/^  PIXTYPE	dpeak;				\/* peak intensity (ADU) *\/$/;"	m	struct:__anon1
dpeak	types.h	/^  PIXTYPE	dpeak;				\/* peak intensity (ADU) *\/$/;"	m	struct:__anon6
dproto	som.h	/^  float		*dproto;		\/* Current composite gradients *\/$/;"	m	struct:__anon25
dpsf_flag	prefs.h	/^  int		dpsf_flag;				\/* dual image PSF-fit *\/$/;"	m	struct:__anon44
dsigma	types.h	/^  float		*dsigma;		\/* Ptr to the sigma deriv. map *\/$/;"	m	struct:pic
dtheta1950	types.h	/^  double	dtheta1950;			\/* North B1950 - native angle*\/$/;"	m	struct:__anon7
dtheta2000	types.h	/^  double	dtheta2000;			\/* North J2000 - native angle*\/$/;"	m	struct:__anon7
dthresh	cuda/cudatypes.h	/^  float		dthresh;		       	\/* detect. threshold (ADU) *\/$/;"	m	struct:__anon1
dthresh	prefs.h	/^  double	dthresh[2];				\/* detect. threshold *\/$/;"	m	struct:__anon44
dthresh	types.h	/^  PIXTYPE	dthresh;		\/* detection threshold *\/$/;"	m	struct:__anon8
dthresh	types.h	/^  PIXTYPE	dthresh;		\/* detection threshold *\/$/;"	m	struct:pic
dthresh	types.h	/^  float		dthresh;		       	\/* detect. threshold (ADU) *\/$/;"	m	struct:__anon6
dumpparams	catout.c	/^void	dumpparams(void)$/;"	f
dumpprefs	prefs.c	/^void    dumpprefs(int state)$/;"	f
dumscan	extract.h	/^PIXTYPE		*dumscan;$/;"	v
dvector	som.h	/^  float		*dvector;		\/* Current SOM search direction *\/$/;"	m	struct:__anon25
dvidir	Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	fits/Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	levmar/Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	wcs/Makefile	/^dvidir = ${docdir}$/;"	m
dweight_flag	prefs.h	/^  int		dweight_flag;				\/* detection weight? *\/$/;"	m	struct:__anon44
ellip	types.h	/^  float		ellip;				\/* ellipticity *\/$/;"	m	struct:__anon7
elong	types.h	/^  float		elong;				\/* elongation *\/$/;"	m	struct:__anon7
encode_checksum	fits/fitscheck.c	/^void	encode_checksum(unsigned int sum, char *str)$/;"	f
end	extract.c	/^static int		*start, *end, *discan, xmin,ymin,xmax,ymax;$/;"	v	file:
end	makeit.c	/^clock_t			start, end;$/;"	v
end_assoc	assoc.c	/^void	end_assoc(picstruct *field)$/;"	f
end_endobj	scan.c	/^clock_t start_endobj, end_endobj;$/;"	v
end_interpolate	interpolate.c	/^void    end_interpolate(picstruct *field)$/;"	f
end_readobj	fits/fitsread.c	/^void	end_readobj(tabstruct *keytab, tabstruct *tab, char *buf)$/;"	f
end_wcs	fitswcs.c	/^void	end_wcs(wcsstruct *wcs)$/;"	f
end_writeobj	fits/fitswrite.c	/^void	end_writeobj(catstruct *cat, tabstruct *tab, char *buf)$/;"	f
end_xml	xml.c	/^int	end_xml(void)$/;"	f
endback	back.c	/^void	endback(picstruct *field)$/;"	f
endcat	catout.c	/^void	endcat(char *error)$/;"	f
endcheck	check.c	/^void	endcheck(checkstruct *check)$/;"	f
endclean	clean.c	/^void	endclean(void)$/;"	f
endfield	field.c	/^void	endfield(picstruct *field)$/;"	f
endfilter	filter.c	/^void	endfilter()$/;"	f
endgrowth	growth.c	/^void	endgrowth()$/;"	f
endobject	analyse.c	/^void	endobject(picstruct *field, picstruct *dfield, picstruct *wfield,$/;"	f
endprefs	prefs.c	/^void	endprefs(void)$/;"	f
endretina	retina.c	/^void	endretina(retistruct *retina)$/;"	f
epoch	fitswcs.h	/^  double	epoch;			\/* Epoch of observations (deprec.) *\/$/;"	m	struct:wcs
epoch	prefs.h	/^  double	epoch;					\/* VOTable epoch *\/$/;"	m	struct:__anon44
epoch	types.h	/^   double	epoch;			\/* epoch of coordinates *\/$/;"	m	struct:pic
epoch	xml.h	/^  double	epoch[2];				\/* epoch of coords *\/$/;"	m	struct:__anon10
eq_to_celsys	fitswcs.c	/^int	eq_to_celsys(wcsstruct *wcs, double *wcspos)$/;"	f
equinox	fitswcs.h	/^  double	equinox;		\/* Equinox of observations *\/$/;"	m	struct:wcs
error	fits/fitsmisc.c	/^void	error(int num, char *msg1, char *msg2)$/;"	f
error_installfunc	fits/fitsmisc.c	/^void	error_installfunc(void (*func)(char *msg1, char *msg2))$/;"	f
errorfunc	fits/fitsmisc.c	/^static void	(*errorfunc)(char *msg1, char *msg2) = NULL;$/;"	v	file:
euler	wcs/cel.h	/^   double euler[5];$/;"	m	struct:celprm
examineiso	analyse.c	/^void  examineiso(picstruct *field, picstruct *dfield, objstruct *obj,$/;"	f
exclude	fits/fitscheck.c	/^unsigned int	exclude[13] = {0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40,$/;"	v
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	fits/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	levmar/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	wcs/Makefile	/^exec_prefix = ${prefix}$/;"	m
exit_func	fits/fitscleanup.c	/^void	(*exit_func)(void);$/;"	v
ext_date	types.h	/^  char		ext_date[16],ext_time[16];		\/* date and time *\/$/;"	m	struct:__anon9
ext_date	xml.h	/^  char 		ext_date[16],ext_time[16];		\/* date and time *\/$/;"	m	struct:__anon10
ext_elapsed	types.h	/^  double	ext_elapsed;				\/* processing time *\/$/;"	m	struct:__anon9
ext_elapsed	xml.h	/^  double        ext_elapsed;				\/* processing time *\/$/;"	m	struct:__anon10
ext_head	fits/fitshead.c	/^int	ext_head(tabstruct *tab)$/;"	f
ext_minarea	prefs.h	/^  int		ext_minarea;				\/* min area in pix. *\/$/;"	m	struct:__anon44
ext_number	types.h	/^  short		ext_number;			\/* FITS extension number *\/$/;"	m	struct:__anon7
ext_time	types.h	/^  char		ext_date[16],ext_time[16];		\/* date and time *\/$/;"	m	struct:__anon9
ext_time	xml.h	/^  char 		ext_date[16],ext_time[16];		\/* date and time *\/$/;"	m	struct:__anon10
extname	fits/fitscat.h	/^  char		extname[82];		\/* FITS extension name *\/$/;"	m	struct:structtab
extra	profit.h	/^  double	*extra[PROFIT_MAXEXTRA];\/* Parameters along extra-dimension *\/$/;"	m	struct:__anon22
extracycleflag	profit.h	/^  int		extracycleflag[PROFIT_MAXEXTRA]; \/* !=0 for cycling dim. *\/$/;"	m	struct:__anon22
extrascale	profit.h	/^  double	extrascale[PROFIT_MAXEXTRA]; \/* Scaling along extra-dim. *\/$/;"	m	struct:__anon22
extrazero	profit.h	/^  double	extrazero[PROFIT_MAXEXTRA]; \/* Zero-point along extra-dim. *\/$/;"	m	struct:__anon22
f	neurro.c	/^double	f(double x)$/;"	f
fdflux	cuda/cudatypes.h	/^  float		fdflux;				\/* integrated ext. flux *\/$/;"	m	struct:__anon1
fdflux	types.h	/^  float		fdflux;				\/* integrated ext. flux *\/$/;"	m	struct:__anon6
fdnpix	cuda/cudatypes.h	/^  int		fdnpix;				\/* nb of extracted pix *\/$/;"	m	struct:__anon1
fdnpix	types.h	/^  int		fdnpix;				\/* nb of extracted pix *\/$/;"	m	struct:__anon6
fdnpixw	types.h	/^  float		npixw, fdnpixw;			\/* WORLD isophotal areas *\/$/;"	m	struct:__anon7
fdpeak	cuda/cudatypes.h	/^  PIXTYPE	fdpeak;				\/* peak intensity (ADU) *\/$/;"	m	struct:__anon1
fdpeak	types.h	/^  PIXTYPE	fdpeak;				\/* peak intensity (ADU) *\/$/;"	m	struct:__anon6
feataspect	profit.h	/^  double	*feataspect;		\/* Feature aspect ratio *\/$/;"	m	struct:__anon22
featfrac	profit.h	/^  double	*featfrac;		\/* Feature flux fraction *\/$/;"	m	struct:__anon22
featpitch	profit.h	/^  double	*featpitch;		\/* Feature pitch *\/$/;"	m	struct:__anon22
featpitchvar	profit.h	/^  double	*featpitchvar;		\/* Feature pitch variation *\/$/;"	m	struct:__anon22
featposang	profit.h	/^  double	*featposang;		\/* Feature position angle *\/$/;"	m	struct:__anon22
featscale	profit.h	/^  double	*featscale;		\/* Feature relative scalelength *\/$/;"	m	struct:__anon22
featstart	profit.h	/^  double	*featstart;		\/* Feature relative starting radius *\/$/;"	m	struct:__anon22
featwidth	profit.h	/^  double	*featwidth;		\/* Feature width *\/$/;"	m	struct:__anon22
fft_conv	fft.c	/^void    fft_conv(double *data1, double *fdata2, int *size)$/;"	f
fft_end	fft.c	/^void    fft_end(void)$/;"	f
fft_init	fft.c	/^void    fft_init(void)$/;"	f
fft_rtf	fft.c	/^double	*fft_rtf(double *data, int *size)$/;"	f
fftmutex	fft.c	/^ pthread_mutex_t	fftmutex;$/;"	v
file	check.h	/^  FILE		*file;			\/* ptr to check-image file structure *\/$/;"	m	struct:structcheck
file	fits/fitscat.h	/^  FILE		*file;			\/* pointer to the file structure *\/$/;"	m	struct:structcat
file	types.h	/^  FILE		*file;			\/* pointer the image file structure *\/$/;"	m	struct:pic
filename	check.h	/^  char		filename[MAXCHAR];	\/* ptr to check-image filename *\/$/;"	m	struct:structcheck
filename	fits/fitscat.h	/^  char		filename[MAXCHARS];	\/* file name *\/$/;"	m	struct:structcat
filename	types.h	/^  char		filename[MAXCHAR];	\/* pointer to the image filename *\/$/;"	m	struct:pic
filter	filter.c	/^void	filter(picstruct *field, PIXTYPE *mscan)$/;"	f
filter_flag	prefs.h	/^  int		filter_flag;				\/* smoothing on\/off *\/$/;"	m	struct:__anon44
filter_name	prefs.h	/^  char		filter_name[MAXCHAR];			\/* mask filename *\/$/;"	m	struct:__anon44
filter_name	types.h	/^  char		filter_name[MAXCHAR];			\/* Filter name *\/$/;"	m	struct:__anon9
filter_thresh	prefs.h	/^  double	filter_thresh[2];			\/* Filter thresholds *\/$/;"	m	struct:__anon44
filterback	back.c	/^void	filterback(picstruct *field)$/;"	f
filterstruct	filter.h	/^  }	filterstruct;$/;"	t	typeref:struct:structfilter
fimage_name	prefs.h	/^  char		*(fimage_name[MAXFLAG]);		\/* flagmap filenames *\/$/;"	m	struct:__anon44
findkey	fits/fitsmisc.c	/^int	findkey(char *str, char *key, int size)$/;"	f
findkeys	prefs.c	/^int	findkeys(char *str, char keyw[][32], int mode)$/;"	f
findnkey	fits/fitsmisc.c	/^int	findnkey(char *str, char *key, int size, int nkey)$/;"	f
firstpix	cuda/cudatypes.h	/^  int		firstpix;			\/* ptr to first pixel *\/$/;"	m	struct:__anon1
firstpix	extract.h	/^  LONG		firstpix;		\/* Pointer to first pixel of pixlist *\/$/;"	m	struct:structinfo
firstpix	types.h	/^  int		firstpix;			\/* ptr to first pixel *\/$/;"	m	struct:__anon6
firsttimeflag	fft.c	/^ int    firsttimeflag;$/;"	v
fitsadd	fits/fitsutil.c	/^int	fitsadd(char *fitsbuf, char *keyword, char *comment)$/;"	f
fitscat	catout.c	/^catstruct	*fitscat;$/;"	v
fitsfind	fits/fitsutil.c	/^int	fitsfind(char *fitsbuf, char *keyword)$/;"	f
fitshead	check.h	/^  char		*fitshead;		\/* ptr to check-image FITS header *\/$/;"	m	struct:structcheck
fitsheadsize	check.h	/^  int		fitsheadsize;		\/* size of check-image FITS header *\/$/;"	m	struct:structcheck
fitsnfind	fits/fitsutil.c	/^char    *fitsnfind(char *fitsbuf, char *str, int nblock)$/;"	f
fitspick	fits/fitsutil.c	/^int	fitspick(char *fitsline, char *keyword, void *ptr, h_type *htype,$/;"	f
fitsread	fits/fitsutil.c	/^int	fitsread(char *fitsbuf, char *keyword, void *ptr, h_type htype,$/;"	f
fitsremove	fits/fitsutil.c	/^int	fitsremove(char *fitsbuf, char *keyword)$/;"	f
fitsunsigned_flag	prefs.h	/^  int		fitsunsigned_flag;			\/* Force unsign FITS *\/$/;"	m	struct:__anon44
fitswrite	fits/fitsutil.c	/^int	fitswrite(char *fitsbuf, char *keyword, void *ptr, h_type htype,$/;"	f
fixexponent	fits/fitsutil.c	/^void	fixexponent(char *s)$/;"	f
flag	cuda/cudatypes.h	/^  short		flag;				\/* extraction flags *\/$/;"	m	struct:__anon1
flag	extract.h	/^  short		flag;			\/* Extraction flag *\/$/;"	m	struct:structinfo
flag	key.h	/^  int		flag;$/;"	m	struct:__anon17
flag	types.h	/^  short		flag;				\/* extraction flags *\/$/;"	m	struct:__anon6
flag	wcs/cel.h	/^   int flag;$/;"	m	struct:celprm
flag	wcs/lin.h	/^   int flag;$/;"	m	struct:linprm
flag	wcs/proj.h	/^   int flag;$/;"	m	struct:prjprm
flag	wcs/wcs.h	/^   int flag;$/;"	m	struct:wcsprm
flag_type	prefs.h	/^  flagtype	flag_type[MAXFLAG];	\/* flag combination *\/$/;"	m	struct:__anon44
flagg	analyse.c	/^int flagg = 0;$/;"	v
flagobj	globals.h	/^objstruct		flagobj;$/;"	v
flagobj2	globals.h	/^obj2struct		flagobj2;$/;"	v
flags	types.h	/^  int		flags;			\/* flags defining the field type *\/$/;"	m	struct:pic
flagtype	prefs.h	/^typedef enum	{FLAG_OR, FLAG_AND, FLAG_MIN, FLAG_MAX, FLAG_MOST} flagtype;$/;"	t	typeref:enum:__anon35
flux	cuda/cudatypes.h	/^  float		flux;				\/* integrated mes. flux *\/$/;"	m	struct:__anon1
flux	profit.h	/^  double	*flux;			\/* Integrated flux *\/$/;"	m	struct:__anon22
flux	profit.h	/^  double	flux;		\/* Total flux in final convolved model *\/$/;"	m	struct:__anon23
flux	psf.h	/^  double	*flux;		\/* Flux of each component *\/$/;"	m	struct:pc
flux	psf.h	/^  float		*flux;		\/* Flux derived from the PSF-fitting *\/$/;"	m	struct:__anon24
flux	types.h	/^  float		flux;				\/* integrated mes. flux *\/$/;"	m	struct:__anon6
flux_aper	types.h	/^  float		*flux_aper;			\/* APER flux vector *\/$/;"	m	struct:__anon7
flux_apersize	prefs.h	/^  int		flux_apersize, fluxerr_apersize;	\/* requested apert. *\/$/;"	m	struct:__anon44
flux_auto	types.h	/^  float		flux_auto;			\/* AUTO integrated flux *\/$/;"	m	struct:__anon7
flux_best	types.h	/^  float		flux_best;			\/* BEST integrated flux *\/$/;"	m	struct:__anon7
flux_frac	prefs.h	/^  double	flux_frac[MAXNAPER];			\/* for FLUX_RADIUS *\/$/;"	m	struct:__anon44
flux_galfit	types.h	/^  float		flux_galfit;			\/* Galaxy tot. flux from fit *\/$/;"	m	struct:__anon7
flux_growth	types.h	/^  float		*flux_growth;			\/* Cumulated growth_curve *\/$/;"	m	struct:__anon7
flux_growthsize	prefs.h	/^  int		flux_growthsize;       			\/* number of elem. *\/$/;"	m	struct:__anon44
flux_growthstep	types.h	/^  float		flux_growthstep;		\/* Growth-curve step *\/$/;"	m	struct:__anon7
flux_iso	types.h	/^  float		flux_iso;			\/* ISO integrated flux *\/$/;"	m	struct:__anon7
flux_isocor	types.h	/^  float		flux_isocor;			\/* ISOCOR integrated flux *\/$/;"	m	struct:__anon7
flux_petro	types.h	/^  float		flux_petro;			\/* AUTO integrated flux *\/$/;"	m	struct:__anon7
flux_prof	types.h	/^  float		flux_prof;			\/* Flux from model-fitting *\/$/;"	m	struct:__anon7
flux_psf	types.h	/^  float		*flux_psf;			\/* Flux from PSF-fitting *\/$/;"	m	struct:__anon7
flux_radius	types.h	/^  float		*flux_radius;			\/* f-light-radii *\/$/;"	m	struct:__anon7
flux_radiussize	prefs.h	/^  int		flux_radiussize;       			\/* number of elem. *\/$/;"	m	struct:__anon44
flux_somfit	types.h	/^  float		flux_somfit;			\/* Fitted amplitude *\/$/;"	m	struct:__anon7
flux_win	types.h	/^  float		flux_win;			\/* WINdowed flux*\/$/;"	m	struct:__anon7
fluxerr	cuda/cudatypes.h	/^  float		fluxerr;			\/* integrated variance *\/$/;"	m	struct:__anon1
fluxerr	types.h	/^  float		fluxerr;			\/* integrated variance *\/$/;"	m	struct:__anon6
fluxerr_aper	types.h	/^  float		*fluxerr_aper;			\/* APER flux error vector  *\/$/;"	m	struct:__anon7
fluxerr_apersize	prefs.h	/^  int		flux_apersize, fluxerr_apersize;	\/* requested apert. *\/$/;"	m	struct:__anon44
fluxerr_auto	types.h	/^  float		fluxerr_auto;			\/* RMS error on AUTO flux *\/$/;"	m	struct:__anon7
fluxerr_best	types.h	/^  float		fluxerr_best;			\/* RMS error on BEST flux *\/$/;"	m	struct:__anon7
fluxerr_galfit	types.h	/^  float		fluxerr_galfit;			\/* RMS error on galfit flux *\/$/;"	m	struct:__anon7
fluxerr_iso	types.h	/^  float		fluxerr_iso;			\/* RMS error on ISO flux *\/$/;"	m	struct:__anon7
fluxerr_isocor	types.h	/^  float		fluxerr_isocor;			\/* RMS error on ISOCOR flux *\/$/;"	m	struct:__anon7
fluxerr_petro	types.h	/^  float		fluxerr_petro;			\/* RMS error on AUTO flux *\/$/;"	m	struct:__anon7
fluxerr_prof	types.h	/^  float		fluxerr_prof;			\/* RMS error on model flux *\/$/;"	m	struct:__anon7
fluxerr_psf	types.h	/^  float		*fluxerr_psf;			\/* RMS error on PSF flux *\/$/;"	m	struct:__anon7
fluxerr_somfit	types.h	/^  float		fluxerr_somfit;			\/* RMS error on SOM flux *\/$/;"	m	struct:__anon7
fluxerr_win	types.h	/^  float		fluxerr_win;			\/* WINdowed flux error *\/$/;"	m	struct:__anon7
fluxfac	profit.h	/^  double	fluxfac;		\/* Flux normalisation factor *\/$/;"	m	struct:__anon22
fmod_0_p360	fitswcs.c	/^double  fmod_0_p360(double angle)$/;"	f
fmod_m90_p90	fitswcs.c	/^double  fmod_m90_p90(double angle)$/;"	f
frame_wcs	fitswcs.c	/^void	frame_wcs(wcsstruct *wcsin, wcsstruct *wcsout)$/;"	f
free_body	fits/fitsbody.c	/^void	free_body(tabstruct *tab)$/;"	f
free_bpann	bpro.c	/^void    free_bpann(bpannstruct *bpann)$/;"	f
free_cat	fits/fitscat.c	/^void	free_cat(catstruct **cat, int ncat)$/;"	f
free_key	fits/fitskey.c	/^void	free_key(keystruct *key)$/;"	f
free_tab	fits/fitstab.c	/^void	free_tab(tabstruct *tab)$/;"	f
free_tnxaxis	wcs/tnx.c	/^void	free_tnxaxis(tnxaxisstruct *axis)$/;"	f
freeparcelout	refine.c	/^void freeparcelout(void) {$/;"	f
freq	som.h	/^  int		*freq;			\/* Number of winning times per node *\/$/;"	m	struct:__anon25
fstrip	types.h	/^  FLAGTYPE	*fstrip;		\/* pointer to the FLAG buffer *\/$/;"	m	struct:pic
func	levmar/lmbc_core.c	/^  void (*func)(LM_REAL *p, LM_REAL *hx, int m, int n, void *adata);$/;"	m	struct:LMBC_DIF_DATA	file:
func	levmar/lmblec_core.c	/^  void (*func)(LM_REAL *p, LM_REAL *hx, int m, int n, void *adata);$/;"	m	struct:LMBLEC_DATA	file:
func	levmar/lmlec_core.c	/^  void (*func)(LM_REAL *p, LM_REAL *hx, int m, int n, void *adata);$/;"	m	struct:LMLEC_DATA	file:
func	threads.h	/^  void			(*func)(void);	\/* Function to execute at wakeup *\/$/;"	m	struct:_threads_gate_t
fwhm	cuda/cudatypes.h	/^  float		fwhm;				\/* IMAGE FWHM *\/$/;"	m	struct:__anon1
fwhm	psf.h	/^  double	fwhm;		\/* Typical PSF FWHM *\/$/;"	m	struct:psf
fwhm	types.h	/^  float		fwhm;				\/* IMAGE FWHM *\/$/;"	m	struct:__anon6
fwhmw	types.h	/^  float		fwhmw;				\/* WORLD FWHM *\/$/;"	m	struct:__anon7
gain	prefs.h	/^  double	gain;					\/* only for CCD *\/$/;"	m	struct:__anon44
gain	types.h	/^   double	gain;			\/* conversion factor in e-\/ADU *\/$/;"	m	struct:pic
gain	xml.h	/^  double	gain[2];				\/* gain (e-\/ADU) *\/$/;"	m	struct:__anon10
gain_key	prefs.h	/^  char		gain_key[8];				\/* gain keyword *\/$/;"	m	struct:__anon44
gatherup	refine.c	/^int gatherup(objliststruct *objlistin, objliststruct *objlistout)$/;"	f
gbaspect	types.h	/^  float		gbaspect;			\/* Gal. bulge aspect-ratio *\/$/;"	m	struct:__anon7
gbe1	types.h	/^  float		gbe1,gbe2;			\/* Gal. bulge ellipticities *\/$/;"	m	struct:__anon7
gbe2	types.h	/^  float		gbe1,gbe2;			\/* Gal. bulge ellipticities *\/$/;"	m	struct:__anon7
gbposang	types.h	/^  float		gbposang;			\/* Gal. bulge position angle *\/$/;"	m	struct:__anon7
gbratio	types.h	/^  float		gbratio;			\/* Galaxy B\/T *\/$/;"	m	struct:__anon7
gbscale	types.h	/^  float		gbscale;			\/* Gal. bulge scalelength *\/$/;"	m	struct:__anon7
gcount	fits/fitscat.h	/^  int		pcount, gcount;		\/* alignment of the data *\/$/;"	m	struct:structtab
gdaspect	types.h	/^  float		gdaspect;			\/* Gal. disk aspect-ratio *\/$/;"	m	struct:__anon7
gde1	types.h	/^  float		gde1,gde2;			\/* Gal. disk ellipticities *\/$/;"	m	struct:__anon7
gde2	types.h	/^  float		gde1,gde2;			\/* Gal. disk ellipticities *\/$/;"	m	struct:__anon7
gdposang	types.h	/^  float		gdposang;			\/* Gal. disk position angle *\/$/;"	m	struct:__anon7
gdscale	types.h	/^  float		gdscale;			\/* Gal. disk scalelength *\/$/;"	m	struct:__anon7
get_head	fits/fitshead.c	/^int	get_head(tabstruct *tab)$/;"	f
getconv	filter.c	/^int	getconv(char *filename)$/;"	f
getfilter	filter.c	/^void	getfilter(char *filename)$/;"	f
getflags	flag.c	/^void	getflags(objstruct *obj, pliststruct *pixel)$/;"	f
getneurfilter	filter.c	/^int	getneurfilter(char *filename)$/;"	f
getnnw	neurro.c	/^void    getnnw()$/;"	f
getretina	retina.c	/^retistruct	*getretina(char *filename)$/;"	f
glsfwd	wcs/proj.c	/^int glsfwd(phi, theta, prj, x, y)$/;"	f
glsrev	wcs/proj.c	/^int glsrev(x, y, prj, phi, theta)$/;"	f
glsset	wcs/proj.c	/^int glsset(prj)$/;"	f
group	wcs/poly.h	/^  int		*group;		\/* Groups *\/$/;"	m	struct:poly
growth	growth.c	/^static double	*growth;$/;"	v	file:
growth_flag	prefs.h	/^  int		growth_flag;				\/* gr. curve needed *\/$/;"	m	struct:__anon44
growth_step	prefs.h	/^  double	growth_step;				\/* step size (pix) *\/$/;"	m	struct:__anon44
gstr	globals.h	/^char			gstr[MAXCHAR];$/;"	v
h_type	fits/fitscat.h	/^			H_COMMENT, H_HCOMMENT, H_KEY}	h_type;$/;"	t	typeref:enum:__anon26
hash	assoc.h	/^  int		*hash;			\/* Pointer to the hash table *\/$/;"	m	struct:structassoc
hatfldb	levmar/lmdemo.c	/^void hatfldb(double *p, double *x, int m, int n, void *data)$/;"	f
hatfldc	levmar/lmdemo.c	/^void hatfldc(double *p, double *x, int m, int n, void *data)$/;"	f
hcut	back.h	/^  float		lcut, hcut;		\/* Histogram cuts *\/$/;"	m	struct:structback
headbuf	fits/fitscat.h	/^  char		*headbuf;		\/* buffer containing the header *\/$/;"	m	struct:structtab
headkey	sexhead.h	/^keystruct	headkey[] = {$/;"	v
headkey1	sexhead1.h	/^keystruct	headkey1[] =$/;"	v
headnblock	fits/fitscat.h	/^  int		headnblock;		\/* number of FITS blocks *\/$/;"	m	struct:structtab
headpos	fits/fitscat.h	/^  OFF_T		headpos;		\/* position of the head in the file *\/$/;"	m	struct:structtab
height	check.h	/^  int		width, height, depth;	\/* size of check-image *\/$/;"	m	struct:structcheck
height	retina.h	/^  int		width, height;	\/* x,y size of the mask *\/$/;"	m	struct:structreti
height	types.h	/^  int		width, height;		\/* x,y size of the field *\/$/;"	m	struct:pic
helval	levmar/lmdemo.c	/^void helval(double *p, double *x, int m, int n, void *data)$/;"	f
histo	back.h	/^  LONG		*histo;			\/* Pointer to a histogram *\/$/;"	m	struct:structback
histokeys	fits/fitsutil.c	/^char	histokeys[][12] = {"COMMENT ", "HISTORY ", "        ", ""};$/;"	v
hl_radius	types.h	/^  float		hl_radius;			\/* Scalar half-light radius *\/$/;"	m	struct:__anon7
hmedian	misc.c	/^float	hmedian(float *ra, int n)$/;"	f
host	Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host	fits/Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host	levmar/Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host	wcs/Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host_alias	Makefile	/^host_alias = $/;"	m
host_alias	fits/Makefile	/^host_alias = $/;"	m
host_alias	levmar/Makefile	/^host_alias = $/;"	m
host_alias	wcs/Makefile	/^host_alias = $/;"	m
host_cpu	Makefile	/^host_cpu = x86_64$/;"	m
host_cpu	fits/Makefile	/^host_cpu = x86_64$/;"	m
host_cpu	levmar/Makefile	/^host_cpu = x86_64$/;"	m
host_cpu	wcs/Makefile	/^host_cpu = x86_64$/;"	m
host_os	Makefile	/^host_os = linux-gnu$/;"	m
host_os	fits/Makefile	/^host_os = linux-gnu$/;"	m
host_os	levmar/Makefile	/^host_os = linux-gnu$/;"	m
host_os	wcs/Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_triplet	fits/Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_triplet	levmar/Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_triplet	wcs/Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_vendor	Makefile	/^host_vendor = unknown$/;"	m
host_vendor	fits/Makefile	/^host_vendor = unknown$/;"	m
host_vendor	levmar/Makefile	/^host_vendor = unknown$/;"	m
host_vendor	wcs/Makefile	/^host_vendor = unknown$/;"	m
hs01	levmar/lmdemo.c	/^void hs01(double *p, double *x, int m, int n, void *data)$/;"	f
hs21	levmar/lmdemo.c	/^void hs21(double *p, double *x, int m, int n, void *data)$/;"	f
hs28	levmar/lmdemo.c	/^void hs28(double *p, double *x, int m, int n, void *data)$/;"	f
hs48	levmar/lmdemo.c	/^void hs48(double *p, double *x, int m, int n, void *data)$/;"	f
hs51	levmar/lmdemo.c	/^void hs51(double *p, double *x, int m, int n, void *data)$/;"	f
htmldir	Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	fits/Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	levmar/Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	wcs/Makefile	/^htmldir = ${docdir}$/;"	m
htype	fits/fitscat.h	/^  h_type	htype;			\/* standard ``h_type'' (display) *\/$/;"	m	struct:structkey
hx	levmar/lmbc_core.c	/^  LM_REAL *hx, *hxx;$/;"	m	struct:LMBC_DIF_DATA	file:
hx	levmar/lmbc_core.c	/^  LM_REAL *hx, *x;$/;"	m	struct:FUNC_STATE	file:
hxx	levmar/lmbc_core.c	/^  LM_REAL *hx, *hxx;$/;"	m	struct:LMBC_DIF_DATA	file:
ident	types.h	/^  char		ident[MAXCHAR];		\/* field identifier (read from FITS)*\/$/;"	m	struct:pic
ident	xml.h	/^  char		ident[2][MAXCHAR];			\/* identifiants *\/$/;"	m	struct:__anon10
idummy	preflist.h	/^ int	idummy;$/;"	v
idummy	sexhead1.h	/^int	idummy;$/;"	v
imaflag	cuda/cudatypes.h	/^  FLAGTYPE	imaflag[MAXFLAG];		\/* flags from FLAG-images *\/$/;"	m	struct:__anon1
imaflag	types.h	/^  FLAGTYPE	imaflag[MAXFLAG];		\/* flags from FLAG-images *\/$/;"	m	struct:__anon6
imaflag_size	prefs.h	/^  int		imaflag_size;				\/* requested iso nb1 *\/$/;"	m	struct:__anon44
image_name	prefs.h	/^  char		*(image_name[2]);			\/* image filenames *\/$/;"	m	struct:__anon44
image_name	types.h	/^  char		image_name[MAXCHAR];			\/* image filename*\/$/;"	m	struct:__anon9
imanflag	cuda/cudatypes.h	/^  int		imanflag[MAXFLAG];     		\/* number of MOST flags *\/$/;"	m	struct:__anon1
imanflag	types.h	/^  int		imanflag[MAXFLAG];     		\/* number of MOST flags *\/$/;"	m	struct:__anon6
imanflag_size	prefs.h	/^  int		imanflag_size;				\/* requested iso nb2 *\/$/;"	m	struct:__anon44
imax	key.h	/^  int		imin, imax;		\/* Range for int's *\/$/;"	m	struct:__anon17
imgpix	wcs/lin.h	/^   double *imgpix;$/;"	m	struct:linprm
imin	key.h	/^  int		imin, imax;		\/* Range for int's *\/$/;"	m	struct:__anon17
inbias	neurro.h	/^	double	inbias[NEURONS];$/;"	m	struct:__anon13
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	fits/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	levmar/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	wcs/Makefile	/^includedir = ${prefix}\/include$/;"	m
info	extract.c	/^static infostruct	*info, *store;$/;"	v	file:
infodir	Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	fits/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	levmar/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	wcs/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infostruct	extract.h	/^  }       infostruct;$/;"	t	typeref:struct:structinfo
inherit_cat	fits/fitscat.c	/^int	inherit_cat(catstruct *catin, catstruct *catout)$/;"	f
inheritfield	field.c	/^picstruct	*inheritfield(picstruct *infield, int flags)$/;"	f
init_assoc	assoc.c	/^void	init_assoc(picstruct *field)$/;"	f
init_cat	fits/fitscat.c	/^int	init_cat(catstruct *cat)$/;"	f
init_interpolate	interpolate.c	/^void    init_interpolate(picstruct *field, int xtimeout, int ytimeout)$/;"	f
init_plist	plist.c	/^void	init_plist(void)$/;"	f
init_readobj	fits/fitsread.c	/^tabstruct	*init_readobj(tabstruct *tab, char **pbuf)$/;"	f
init_wcs	fitswcs.c	/^void	init_wcs(wcsstruct *wcs)$/;"	f
init_wcscelsys	fitswcs.c	/^void	init_wcscelsys(wcsstruct *wcs)$/;"	f
init_writeobj	fits/fitswrite.c	/^void	init_writeobj(catstruct *cat, tabstruct *tab, char **pbuf)$/;"	f
init_xml	xml.c	/^int	init_xml(int next)$/;"	f
initastrom	astrom.c	/^void	initastrom(picstruct *field)$/;"	f
initcat	catout.c	/^void	initcat(void)$/;"	f
initcheck	check.c	/^checkstruct	*initcheck(char *filename, checkenum check_type, int next)$/;"	f
initclean	clean.c	/^void	initclean(void)$/;"	f
initglob	makeit.c	/^void	initglob()$/;"	f
initgrowth	growth.c	/^void	initgrowth()$/;"	f
inline	levmar/compiler.h	28;"	d
inline	levmar/compiler.h	30;"	d
input	som.h	/^  float		*input;			\/* Input data *\/$/;"	m	struct:__anon25
inputdim	som.h	/^  int		inputdim;		\/* Dimensionality of input vector *\/$/;"	m	struct:__anon25
inputsize	som.h	/^  int		*inputsize;		\/* Dimensions of the input vector *\/$/;"	m	struct:__anon25
inputw	som.h	/^  float		*inputw;		\/* Input data weighting *\/$/;"	m	struct:__anon25
inscale	neurro.h	/^	double	inscale[NEURONS];$/;"	m	struct:__anon13
install_cleanup	fits/fitscleanup.c	/^void	install_cleanup(void (*func)(void))$/;"	f
install_sh	Makefile	/^install_sh = $(SHELL) \/home\/zhao\/cuda-workspace\/sextractor-dev\/autoconf\/install-sh$/;"	m
install_sh	fits/Makefile	/^install_sh = $(SHELL) \/home\/zhao\/cuda-workspace\/sextractor\/autoconf\/install-sh$/;"	m
install_sh	levmar/Makefile	/^install_sh = $(SHELL) \/home\/zhao\/cuda-workspace\/sextractor\/autoconf\/install-sh$/;"	m
install_sh	wcs/Makefile	/^install_sh = $(SHELL) \/home\/zhao\/cuda-workspace\/sextractor\/autoconf\/install-sh$/;"	m
install_sh_DATA	Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	fits/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	levmar/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	wcs/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	fits/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	levmar/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	wcs/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	fits/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	levmar/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	wcs/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
interp_backup	types.h	/^  PIXTYPE	*interp_backup;		\/* backup line for interpolation *\/$/;"	m	struct:pic
interp_flag	types.h	/^  int		interp_flag;		\/* interpolation for this field? *\/$/;"	m	struct:pic
interp_kernwidth	profit.c	/^int		interp_kernwidth[5]={1,2,4,6,8};$/;"	v
interp_type	prefs.h	/^  interptype	interp_type[2];				\/* interpolat. type *\/$/;"	m	struct:__anon44
interp_xtimeout	prefs.h	/^  int		interp_xtimeout[2];   			\/* interp. x timeout *\/$/;"	m	struct:__anon44
interp_xtimeout	types.h	/^  int		interp_xtimeout;	\/* interpolation timeout value in x *\/$/;"	m	struct:pic
interp_ytimeout	prefs.h	/^  int		interp_ytimeout[2];   			\/* interp. y timeout *\/$/;"	m	struct:__anon44
interp_ytimeout	types.h	/^  int		interp_ytimeout;	\/* interpolation timeout value in y *\/$/;"	m	struct:pic
interp_ytimeoutbuf	types.h	/^  int		*interp_ytimeoutbuf;	\/* interpolation timeout line buffer *\/$/;"	m	struct:pic
interpenum	profit.h	/^		INTERP_LANCZOS3, INTERP_LANCZOS4}       interpenum;$/;"	t	typeref:enum:__anon20
interpm	image.c	/^static float	interpm[INTERPW*INTERPH];$/;"	v	file:
interpolate	interpolate.c	/^void    interpolate(picstruct *field, picstruct *wfield,$/;"	f
interpolate_pix	profit.c	/^static double	interpolate_pix(double *posin, double *pix, int *naxisn,$/;"	f	file:
interptype	prefs.h	/^typedef enum	{INTERP_NONE, INTERP_VARONLY, INTERP_ALL} interptype;$/;"	t	typeref:enum:__anon42
interptype	profit.h	/^  interpenum	interptype[2+PROFIT_MAXEXTRA];	\/* Interpolation type *\/$/;"	m	struct:__anon22
inv_x	fitswcs.h	/^  struct poly	*inv_x;			\/* Proj. correction polynom in x *\/$/;"	m	struct:wcs	typeref:struct:wcs::poly
inv_x	wcs/proj.h	/^   struct poly		*inv_x;$/;"	m	struct:prjprm	typeref:struct:prjprm::poly
inv_y	fitswcs.h	/^  struct poly	*inv_y;			\/* Proj. correction polynom in y *\/$/;"	m	struct:wcs	typeref:struct:wcs::poly
inv_y	wcs/proj.h	/^   struct poly		*inv_y;$/;"	m	struct:prjprm	typeref:struct:prjprm::poly
invert_wcs	fitswcs.c	/^void	invert_wcs(wcsstruct *wcs)$/;"	f
iso	cuda/cudatypes.h	/^  int		iso[NISO];			\/* isophotal areas *\/$/;"	m	struct:__anon1
iso	types.h	/^  int		iso[NISO];			\/* isophotal areas *\/$/;"	m	struct:__anon6
ix	profit.h	/^  int		ix, iy;		\/* Integer coordinates of object pixmap *\/$/;"	m	struct:__anon23
iy	profit.h	/^  int		ix, iy;		\/* Integer coordinates of object pixmap *\/$/;"	m	struct:__anon23
j2b	fitswcs.c	/^void    j2b(double yearobs, double alphain, double deltain,$/;"	f
jac	levmar/lmlec_core.c	/^  LM_REAL *c, *Z, *p, *jac;$/;"	m	struct:LMLEC_DATA	file:
jacbt3	levmar/lmdemo.c	/^void jacbt3(double *p, double *jac, int m, int n, void *data)$/;"	f
jaccombust	levmar/lmdemo.c	/^void jaccombust(double *p, double *jac, int m, int n, void *data)$/;"	f
jacf	levmar/lmblec_core.c	/^  void (*jacf)(LM_REAL *p, LM_REAL *jac, int m, int n, void *adata);$/;"	m	struct:LMBLEC_DATA	file:
jacf	levmar/lmlec_core.c	/^  void (*jacf)(LM_REAL *p, LM_REAL *jac, int m, int n, void *adata);$/;"	m	struct:LMLEC_DATA	file:
jachatfldb	levmar/lmdemo.c	/^void jachatfldb(double *p, double *jac, int m, int n, void *data)$/;"	f
jachatfldc	levmar/lmdemo.c	/^void jachatfldc(double *p, double *jac, int m, int n, void *data)$/;"	f
jachelval	levmar/lmdemo.c	/^void jachelval(double *p, double *jac, int m, int n, void *data)$/;"	f
jachs01	levmar/lmdemo.c	/^void jachs01(double *p, double *jac, int m, int n, void *data)$/;"	f
jachs21	levmar/lmdemo.c	/^void jachs21(double *p, double *jac, int m, int n, void *data)$/;"	f
jachs28	levmar/lmdemo.c	/^void jachs28(double *p, double *jac, int m, int n, void *data)$/;"	f
jachs48	levmar/lmdemo.c	/^void jachs48(double *p, double *jac, int m, int n, void *data)$/;"	f
jachs51	levmar/lmdemo.c	/^void jachs51(double *p, double *jac, int m, int n, void *data)$/;"	f
jacmeyer	levmar/lmdemo.c	/^void jacmeyer(double *p, double *jac, int m, int n, void *data)$/;"	f
jacmodbt7	levmar/lmdemo.c	/^void jacmodbt7(double *p, double *jac, int m, int n, void *data)$/;"	f
jacmodhs52	levmar/lmdemo.c	/^void jacmodhs52(double *p, double *jac, int m, int n, void *data)$/;"	f
jacmodros	levmar/lmdemo.c	/^void jacmodros(double *p, double *jac, int m, int n, void *data)$/;"	f
jacmods235	levmar/lmdemo.c	/^void jacmods235(double *p, double *jac, int m, int n, void *data)$/;"	f
jacob	types.h	/^  double	jacob[NAXIS*NAXIS];		\/* Local deproject. Jacobian *\/$/;"	m	struct:__anon7
jacpowell	levmar/lmdemo.c	/^void jacpowell(double *p, double *jac, int m, int n, void *data)$/;"	f
jacros	levmar/lmdemo.c	/^void jacros(double *p, double *jac, int m, int n, void *data)$/;"	f
kernelbuf	profit.h	/^  double	*kernelbuf;		\/* Kernel buffer *\/$/;"	m	struct:__anon22
kernelnlines	profit.h	/^  int		kernelnlines;		\/* Number of interp kernel lines *\/$/;"	m	struct:__anon22
kernelwidth	profit.h	/^  int		kernelwidth[2+PROFIT_MAXEXTRA];	\/* Kernel size *\/$/;"	m	struct:__anon22
kernw	som.h	/^  float		kernw, ckernw;		\/* Starting and current kernel width *\/$/;"	m	struct:__anon25
kernwdecay	som.h	/^  float		kernwdecay;		\/* Kernel width decay rate *\/$/;"	m	struct:__anon25
key	fits/fitscat.h	/^  keystruct	*key;			\/* pointer to keys *\/$/;"	m	struct:structtab
key	preflist.h	/^ pkeystruct key[] =$/;"	v
keylist	key.h	/^  char		keylist[32][32];	\/* List of keywords *\/$/;"	m	struct:__anon17
keylist	preflist.h	/^char		keylist[sizeof(key)\/sizeof(pkeystruct)][32];$/;"	v
keys_list	fits/fitskey.c	/^char **keys_list(tabstruct *tab, int *n)$/;"	f
keystruct	fits/fitscat.h	/^  }		keystruct;$/;"	t	typeref:struct:structkey
kronfactor	types.h	/^  float		kronfactor;			\/* kron parameter *\/$/;"	m	struct:__anon7
last	threads.h	/^  pthread_cond_t	last;		\/* To wake the remaining thread up *\/$/;"	m	struct:_threads_gate_t
lastpix	cuda/cudatypes.h	/^  int		lastpix;			\/* ptr to last pixel *\/$/;"	m	struct:__anon1
lastpix	extract.h	/^  LONG		lastpix;		\/* Pointer to last pixel of pixlist *\/$/;"	m	struct:structinfo
lastpix	types.h	/^  int		lastpix;			\/* ptr to last pixel *\/$/;"	m	struct:__anon6
lat	fitswcs.h	/^  int		lat,lng;		\/* longitude and latitude axes # *\/$/;"	m	struct:wcs
lat	wcs/wcs.h	/^   int lng, lat;$/;"	m	struct:wcsprm
latpole	fitswcs.h	/^  double	longpole,latpole;	\/* FITS LONGPOLE and LATPOLE *\/$/;"	m	struct:wcs
lattyp	wcs/wcs.h	/^   char lngtyp[5], lattyp[5];$/;"	m	struct:wcsprm
layersnb	neurro.h	/^	int	layersnb;$/;"	m	struct:__anon13
lb	levmar/lmblec_core.c	/^  LM_REAL *x, *lb, *ub, *w;$/;"	m	struct:LMBLEC_DATA	file:
lcut	back.h	/^  float		lcut, hcut;		\/* Histogram cuts *\/$/;"	m	struct:structback
ldactoasc_DEPENDENCIES	Makefile	/^ldactoasc_DEPENDENCIES = $(top_builddir)\/src\/fits\/libfits.a$/;"	m
ldactoasc_LDADD	Makefile	/^ldactoasc_LDADD = $(top_builddir)\/src\/fits\/libfits.a$/;"	m
ldactoasc_OBJECTS	Makefile	/^ldactoasc_OBJECTS = $(am_ldactoasc_OBJECTS)$/;"	m
ldactoasc_SOURCES	Makefile	/^ldactoasc_SOURCES = ldactoasc.c ldactoasc.h$/;"	m
learndecay	som.h	/^  float		learndecay;		\/* Learning decay rate *\/$/;"	m	struct:__anon25
learnrate	som.h	/^  float		learnrate, clearnrate;	\/* Starting and current learn. rates *\/$/;"	m	struct:__anon25
libcuda_a_SOURCES	cuda/Makefile	/^libcuda_a_SOURCES = cudaanalyse.cu cudadetection.cu cudadeblend.cu cudafilter.cu \\$/;"	m
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	fits/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	levmar/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	wcs/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	fits/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	levmar/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	wcs/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libfits_a_AR	fits/Makefile	/^libfits_a_AR = $(AR) $(ARFLAGS)$/;"	m
libfits_a_LIBADD	fits/Makefile	/^libfits_a_LIBADD =$/;"	m
libfits_a_OBJECTS	fits/Makefile	/^libfits_a_OBJECTS = $(am_libfits_a_OBJECTS)$/;"	m
libfits_a_SOURCES	fits/Makefile	/^libfits_a_SOURCES = fitsbody.c fitscat.c fitscheck.c fitscleanup.c \\$/;"	m
liblevmar_a_AR	levmar/Makefile	/^liblevmar_a_AR = $(AR) $(ARFLAGS)$/;"	m
liblevmar_a_LIBADD	levmar/Makefile	/^liblevmar_a_LIBADD =$/;"	m
liblevmar_a_OBJECTS	levmar/Makefile	/^liblevmar_a_OBJECTS = $(am_liblevmar_a_OBJECTS)$/;"	m
liblevmar_a_SOURCES	levmar/Makefile	/^liblevmar_a_SOURCES = Axb.c lmbc.c lm.c lmblec.c lmlec.c misc.c \\$/;"	m
libwcs_c_a_AR	wcs/Makefile	/^libwcs_c_a_AR = $(AR) $(ARFLAGS)$/;"	m
libwcs_c_a_LIBADD	wcs/Makefile	/^libwcs_c_a_LIBADD =$/;"	m
libwcs_c_a_OBJECTS	wcs/Makefile	/^libwcs_c_a_OBJECTS = $(am_libwcs_c_a_OBJECTS)$/;"	m
libwcs_c_a_SOURCES	wcs/Makefile	/^libwcs_c_a_SOURCES = cel.c lin.c poly.c proj.c sph.c tnx.c wcs.c \\$/;"	m
lin	fitswcs.h	/^  struct linprm	*lin;			\/* WCSLIB's linprm structure *\/$/;"	m	struct:wcs	typeref:struct:wcs::linprm
lindet	fitswcs.h	/^  double	lindet;			\/* Determinant of the local matrix *\/$/;"	m	struct:wcs
line	check.h	/^  PIXTYPE	*line;			\/* buffered image line *\/$/;"	m	struct:structcheck
linearoutflag	bpro.h	/^	int	linearoutflag;		\/* Flag: 0 if outputs are non-linear *\/$/;"	m	struct:structbpann
linfwd	wcs/lin.c	/^int linfwd(imgcrd, lin, pixcrd)$/;"	f
linfwd_errmsg	wcs/lin.c	/^const char *linfwd_errmsg[] = {$/;"	v
linprm	wcs/lin.h	/^struct linprm {$/;"	s
linrev	wcs/lin.c	/^int linrev(pixcrd, lin, imgcrd)$/;"	f
linrev_errmsg	wcs/lin.c	/^const char *linrev_errmsg[] = {$/;"	v
linset	wcs/lin.c	/^int linset(lin)$/;"	f
linset_errmsg	wcs/lin.c	/^const char *linset_errmsg[] = {$/;"	v
list	assoc.h	/^  float		*list;			\/* Pointer to the list of data *\/$/;"	m	struct:structassoc
lmodpix	pattern.h	/^  PIXTYPE	*lmodpix;		\/* Low resolution pattern pixmaps *\/$/;"	m	struct:__anon12
lmodpix	profit.h	/^  PIXTYPE	*lmodpix;	\/* Low resolution pixmap of the model *\/$/;"	m	struct:__anon23
lng	fitswcs.h	/^  int		lat,lng;		\/* longitude and latitude axes # *\/$/;"	m	struct:wcs
lng	wcs/wcs.h	/^   int lng, lat;$/;"	m	struct:wcsprm
lngtyp	wcs/wcs.h	/^   char lngtyp[5], lattyp[5];$/;"	m	struct:wcsprm
load_assoc	assoc.c	/^assocstruct  *load_assoc(char *filename)$/;"	f
loadstrip	readimage.c	/^void *loadstrip(picstruct *field)$/;"	f
loadtab_bpann	bpro.c	/^bpannstruct	*loadtab_bpann(tabstruct *tab, char *filename)$/;"	f
localback	back.c	/^float	localback(picstruct *field, objstruct *obj)$/;"	f
localedir	Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	fits/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	levmar/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	wcs/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	fits/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	levmar/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	wcs/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
longpole	fitswcs.h	/^  double	longpole,latpole;	\/* FITS LONGPOLE and LATPOLE *\/$/;"	m	struct:wcs
lutz	extract.c	/^int	lutz(objliststruct *objlistroot, int nroot, objstruct *objparent,$/;"	f
lutzalloc	extract.c	/^void	lutzalloc(int width, int height)$/;"	f
lutzfree	extract.c	/^void	lutzfree()$/;"	f
lutzsort	extract.c	/^void  lutzsort(infostruct *info, objliststruct *objlist)$/;"	f
mag_aper	types.h	/^  float		*mag_aper;			\/* APER magnitude vector *\/$/;"	m	struct:__anon7
mag_apersize	prefs.h	/^  int		mag_apersize, magerr_apersize;		\/* requested apert. *\/$/;"	m	struct:__anon44
mag_auto	types.h	/^  float		mag_auto;			\/* AUTO mag *\/$/;"	m	struct:__anon7
mag_best	types.h	/^  float		mag_best;			\/* BEST mag *\/$/;"	m	struct:__anon7
mag_galfit	types.h	/^  float		mag_galfit;			\/* Galaxy tot. mag from fit *\/$/;"	m	struct:__anon7
mag_gamma	prefs.h	/^  double	mag_gamma;				\/* for emulsions *\/$/;"	m	struct:__anon44
mag_growth	types.h	/^  float		*mag_growth;			\/* Cumulated growth_curve *\/$/;"	m	struct:__anon7
mag_growthsize	prefs.h	/^  int		mag_growthsize;       			\/* number of elem. *\/$/;"	m	struct:__anon44
mag_growthstep	types.h	/^  float		mag_growthstep;			\/* Growth-curve step *\/$/;"	m	struct:__anon7
mag_iso	types.h	/^  float		mag_iso;			\/* ISO mag *\/$/;"	m	struct:__anon7
mag_isocor	types.h	/^  float		mag_isocor;			\/* ISOCOR mag *\/$/;"	m	struct:__anon7
mag_petro	types.h	/^  float		mag_petro;			\/* AUTO mag *\/$/;"	m	struct:__anon7
mag_prof	types.h	/^  float		mag_prof;			\/* Mag from model-fitting *\/$/;"	m	struct:__anon7
mag_psf	types.h	/^  float		*mag_psf;			\/* Mag from PSF-fitting *\/$/;"	m	struct:__anon7
mag_somfit	types.h	/^  float		mag_somfit;			\/* Magnitude from SOM fit *\/$/;"	m	struct:__anon7
mag_win	types.h	/^  float		mag_win;			\/* WINdowed magnitude *\/$/;"	m	struct:__anon7
mag_zeropoint	prefs.h	/^  double	mag_zeropoint;				\/* magnitude offsets *\/$/;"	m	struct:__anon44
magerr_aper	types.h	/^  float		*magerr_aper;			\/* APER mag error vector *\/$/;"	m	struct:__anon7
magerr_apersize	prefs.h	/^  int		mag_apersize, magerr_apersize;		\/* requested apert. *\/$/;"	m	struct:__anon44
magerr_auto	types.h	/^  float		magerr_auto;			\/* AUTO mag uncertainty *\/$/;"	m	struct:__anon7
magerr_best	types.h	/^  float		magerr_best;			\/* BEST mag uncertainty *\/$/;"	m	struct:__anon7
magerr_galfit	types.h	/^  float		magerr_galfit;			\/* RMS error on galfit mag *\/$/;"	m	struct:__anon7
magerr_iso	types.h	/^  float		magerr_iso;			\/* ISO mag uncertainty *\/$/;"	m	struct:__anon7
magerr_isocor	types.h	/^  float		magerr_isocor;			\/* ISOCOR mag uncertainty *\/$/;"	m	struct:__anon7
magerr_petro	types.h	/^  float		magerr_petro;			\/* AUTO mag uncertainty *\/$/;"	m	struct:__anon7
magerr_prof	types.h	/^  float		magerr_prof;			\/* RMS mag from model-fitting *\/$/;"	m	struct:__anon7
magerr_psf	types.h	/^  float		*magerr_psf;			\/* RMS mag from PSF-fitting *\/$/;"	m	struct:__anon7
magerr_somfit	types.h	/^  float		magerr_somfit;			\/* Mag. err. from SOM fit *\/$/;"	m	struct:__anon7
magerr_win	types.h	/^  float		magerr_win;			\/* WINdowed magnitude error *\/$/;"	m	struct:__anon7
main	ldactoasc.c	/^int	main(int argc, char *argv[])$/;"	f
main	levmar/lmdemo.c	/^int main()$/;"	f
main	main.c	/^int	main(int argc, char *argv[])$/;"	f
make_kernel	profit.c	/^void	make_kernel(double pos, double *kernel, interpenum interptype)$/;"	f
makeavergrowth	growth.c	/^void	makeavergrowth(picstruct *field, picstruct *wfield, objstruct *obj)$/;"	f
makeback	back.c	/^void	makeback(picstruct *field)$/;"	f
makebackspline	back.c	/^float *makebackspline(picstruct *field, float *map)$/;"	f
makeit	makeit.c	/^void	makeit()$/;"	f
mamaposx	types.h	/^  double	mamaposx,mamaposy;		\/* "MAMA" pos. in pixels *\/$/;"	m	struct:__anon7
mamaposy	types.h	/^  double	mamaposx,mamaposy;		\/* "MAMA" pos. in pixels *\/$/;"	m	struct:__anon7
mandir	Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	fits/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	levmar/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	wcs/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
map_cat	fits/fitscat.c	/^int	map_cat(catstruct *cat)$/;"	f
marker	extract.c	/^static char		*marker;$/;"	v	file:
mask_type	prefs.h	/^  masktype	mask_type;				\/* type of masking *\/$/;"	m	struct:__anon44
maskcomp	psf.h	/^  float		*maskcomp; 	\/* Convolved pix data (principal components) *\/$/;"	m	struct:pc
maskcomp	psf.h	/^  float		*maskcomp;      \/* Complete pix. data (PSF components) *\/$/;"	m	struct:psf
maskcurr	psf.h	/^  double	*maskcurr;	\/* Current model *\/$/;"	m	struct:pc
maskdim	psf.h	/^  int		maskdim;	\/* Dimensionality of the tabulated data *\/$/;"	m	struct:pc
maskdim	psf.h	/^  int		maskdim;	\/* Dimensionality of the tabulated data *\/$/;"	m	struct:psf
maskloc	psf.h	/^  double	*maskloc;	\/* Local PSF *\/$/;"	m	struct:psf
masknpix	psf.h	/^  int		masknpix;	\/* Total number of involved PC pixels *\/$/;"	m	struct:pc
masknpix	psf.h	/^  int		masknpix;	\/* Total number of involved PSF pixels *\/$/;"	m	struct:psf
masksize	psf.h	/^  int		*masksize;	\/* PC mask dimensions *\/$/;"	m	struct:pc
masksize	psf.h	/^  int		*masksize;	\/* PSF mask dimensions *\/$/;"	m	struct:psf
masktype	prefs.h	/^typedef enum 	{MASK_NONE, MASK_BLANK, MASK_CORRECT} masktype;$/;"	t	typeref:enum:__anon41
matinv	wcs/lin.c	/^int matinv(n, mat, inv)$/;"	f
maxmu	types.h	/^  float		maxmu;				\/* max. surface brightnees *\/$/;"	m	struct:__anon7
mcoeff	pattern.h	/^  double	*mcoeff;		\/* Modulus from pattern coefficients *\/$/;"	m	struct:__anon12
mean	back.h	/^  float		mode, mean, sigma;	\/* Background mode, mean and sigma *\/$/;"	m	struct:structback
mefpos	types.h	/^  OFF_T		mefpos;			\/* Position in a MEF file *\/$/;"	m	struct:pic
mem_bufsize	prefs.h	/^  int		mem_bufsize;				\/* strip height *\/$/;"	m	struct:__anon44
mem_pixstack	prefs.h	/^  int		mem_pixstack;				\/* pixel stack size *\/$/;"	m	struct:__anon44
merfwd	wcs/proj.c	/^int merfwd(phi, theta, prj, x, y)$/;"	f
mergeflags	flag.c	/^void	mergeflags(objstruct *objmaster, objstruct *objslave)$/;"	f
mergeobject	clean.c	/^void	mergeobject(objstruct *objslave,objstruct *objmaster)$/;"	f
merrev	wcs/proj.c	/^int merrev(x, y, prj, phi, theta)$/;"	f
merset	wcs/proj.c	/^int merset(prj)$/;"	f
meyer	levmar/lmdemo.c	/^void meyer(double *p, double *x, int m, int n, void *data)$/;"	f
minnorm	retina.h	/^  float		minnorm;	\/* Minimum normalisation factor *\/$/;"	m	struct:structreti
mkdir_p	Makefile	/^mkdir_p = \/bin\/mkdir -p$/;"	m
mkdir_p	fits/Makefile	/^mkdir_p = \/bin\/mkdir -p$/;"	m
mkdir_p	levmar/Makefile	/^mkdir_p = \/bin\/mkdir -p$/;"	m
mkdir_p	wcs/Makefile	/^mkdir_p = \/bin\/mkdir -p$/;"	m
mkinstalldirs	Makefile	/^mkinstalldirs = $(SHELL) $(top_srcdir)\/autoconf\/mkinstalldirs$/;"	m
mkinstalldirs	fits/Makefile	/^mkinstalldirs = $(SHELL) $(top_srcdir)\/autoconf\/mkinstalldirs$/;"	m
mkinstalldirs	levmar/Makefile	/^mkinstalldirs = $(SHELL) $(top_srcdir)\/autoconf\/mkinstalldirs$/;"	m
mkinstalldirs	wcs/Makefile	/^mkinstalldirs = $(SHELL) $(top_srcdir)\/autoconf\/mkinstalldirs$/;"	m
modbt7	levmar/lmdemo.c	/^void modbt7(double *p, double *x, int m, int n, void *data)$/;"	f
mode	back.h	/^  float		mode, mean, sigma;	\/* Background mode, mean and sigma *\/$/;"	m	struct:structback
modhs52	levmar/lmdemo.c	/^void modhs52(double *p, double *x, int m, int n, void *data)$/;"	f
modnaxisn	profit.h	/^  int		modnaxisn[3];	\/* Dimensions along each axis *\/$/;"	m	struct:__anon23
modpix	pattern.h	/^  double	*modpix;		\/* Pattern pixmaps *\/$/;"	m	struct:__anon12
modpix	profit.h	/^  double	*modpix;	\/* Full res. pixmap of the complete model *\/$/;"	m	struct:__anon23
modros	levmar/lmdemo.c	/^void modros(double *p, double *x, int m, int n, void *data)$/;"	f
mods235	levmar/lmdemo.c	/^void mods235(double *p, double *x, int m, int n, void *data)$/;"	f
molfwd	wcs/proj.c	/^int molfwd(phi, theta, prj, x, y)$/;"	f
molrev	wcs/proj.c	/^int molrev(x, y, prj, phi, theta)$/;"	f
molset	wcs/proj.c	/^int molset(prj)$/;"	f
mthresh	cuda/cudatypes.h	/^  float		mthresh;		       	\/* max. threshold (ADU) *\/$/;"	m	struct:__anon1
mthresh	types.h	/^  float		mthresh;		       	\/* max. threshold (ADU) *\/$/;"	m	struct:__anon6
mutex	threads.h	/^  pthread_mutex_t	mutex;		\/* Main MutEx *\/$/;"	m	struct:_threads_gate_t
mx	cuda/cudatypes.h	/^  double       	mx, my;				\/* barycenter *\/$/;"	m	struct:__anon1
mx	types.h	/^  double       	mx, my;				\/* barycenter *\/$/;"	m	struct:__anon6
mx2	cuda/cudatypes.h	/^  double	mx2,my2,mxy;			\/* variances and covariance *\/$/;"	m	struct:__anon1
mx2	psf.h	/^  double	*mx2,*my2,*mxy;	\/* 2nd order moments for each component *\/$/;"	m	struct:pc
mx2	types.h	/^  double	mx2,my2,mxy;			\/* variances and covariance *\/$/;"	m	struct:__anon6
mx2_pc	types.h	/^  double	mx2_pc,my2_pc,mxy_pc;		\/* PC 2nd-order parameters *\/$/;"	m	struct:__anon7
mx2w	types.h	/^  double	mx2w,my2w,mxyw;			\/* WORLD var. and covar. *\/$/;"	m	struct:__anon7
mxw	types.h	/^  double	mxw, myw;			\/* WORLD barycenters *\/$/;"	m	struct:__anon7
mxy	cuda/cudatypes.h	/^  double	mx2,my2,mxy;			\/* variances and covariance *\/$/;"	m	struct:__anon1
mxy	psf.h	/^  double	*mx2,*my2,*mxy;	\/* 2nd order moments for each component *\/$/;"	m	struct:pc
mxy	types.h	/^  double	mx2,my2,mxy;			\/* variances and covariance *\/$/;"	m	struct:__anon6
mxy_pc	types.h	/^  double	mx2_pc,my2_pc,mxy_pc;		\/* PC 2nd-order parameters *\/$/;"	m	struct:__anon7
mxyw	types.h	/^  double	mx2w,my2w,mxyw;			\/* WORLD var. and covar. *\/$/;"	m	struct:__anon7
my	cuda/cudatypes.h	/^  double       	mx, my;				\/* barycenter *\/$/;"	m	struct:__anon1
my	types.h	/^  double       	mx, my;				\/* barycenter *\/$/;"	m	struct:__anon6
my2	cuda/cudatypes.h	/^  double	mx2,my2,mxy;			\/* variances and covariance *\/$/;"	m	struct:__anon1
my2	psf.h	/^  double	*mx2,*my2,*mxy;	\/* 2nd order moments for each component *\/$/;"	m	struct:pc
my2	types.h	/^  double	mx2,my2,mxy;			\/* variances and covariance *\/$/;"	m	struct:__anon6
my2_pc	types.h	/^  double	mx2_pc,my2_pc,mxy_pc;		\/* PC 2nd-order parameters *\/$/;"	m	struct:__anon7
my2w	types.h	/^  double	mx2w,my2w,mxyw;			\/* WORLD var. and covar. *\/$/;"	m	struct:__anon7
myw	types.h	/^  double	mxw, myw;			\/* WORLD barycenters *\/$/;"	m	struct:__anon7
n	levmar/lmbc_core.c	/^  int n, *nfev;$/;"	m	struct:FUNC_STATE	file:
n	neurro.h	/^	double	n[LAYERS][NEURONS];$/;"	m	struct:__anon13
n	wcs/proj.h	/^   int n;$/;"	m	struct:prjprm
name	fits/fitscat.h	/^  char		name[80];		\/* name *\/$/;"	m	struct:structkey
name	key.h	/^  char		name[32];$/;"	m	struct:__anon17
name	psf.h	/^  char		name[MAXCHAR];	\/* Name of the file containing the PSF data *\/$/;"	m	struct:psf
name	psf.h	/^  char		name[MAXCHAR];	\/* PC filename *\/$/;"	m	struct:pc
name_to_key	fits/fitskey.c	/^keystruct	*name_to_key(tabstruct *tab, char *keyname)$/;"	f
name_to_tab	fits/fitstab.c	/^tabstruct	*name_to_tab(catstruct *cat, char *tabname, int seg)$/;"	f
naper	prefs.h	/^  int		naper;					\/* effective apert. *\/$/;"	m	struct:__anon44
nassoc_data	prefs.h	/^  int		nassoc_data;				\/* nb of params *\/$/;"	m	struct:__anon44
nassoc_param	prefs.h	/^  int		nassoc_param;				\/* nb of params *\/$/;"	m	struct:__anon44
nautoaper	prefs.h	/^  int		nautoaper;				\/* nb of min. aperts *\/$/;"	m	struct:__anon44
nautoparam	prefs.h	/^  int		nautoparam;				\/* nb of Kron params *\/$/;"	m	struct:__anon44
naxis	fits/fitscat.h	/^  int		naxis;			\/* number of dimensions *\/$/;"	m	struct:structkey
naxis	fits/fitscat.h	/^  int		naxis;			\/* number of dimensions *\/$/;"	m	struct:structtab
naxis	fitswcs.h	/^  int		naxis;			\/* Number of image axes *\/$/;"	m	struct:wcs
naxis	profit.h	/^  int		naxis;			\/* Number of pixmap dimensions *\/$/;"	m	struct:__anon22
naxis	wcs/lin.h	/^   int naxis;$/;"	m	struct:linprm
naxisn	fits/fitscat.h	/^  int		*naxisn;		\/* array of dimensions *\/$/;"	m	struct:structtab
naxisn	fits/fitscat.h	/^  int		*naxisn;		\/* pointer to an array of dim. *\/$/;"	m	struct:structkey
naxisn	fitswcs.h	/^  int		naxisn[NAXIS];		\/* FITS NAXISx parameters *\/$/;"	m	struct:wcs
naxisn	profit.h	/^  int		naxisn[3];		\/* Pixmap size for each axis *\/$/;"	m	struct:__anon22
nback	types.h	/^  int		nback;			\/* total number of bkgnd meshes *\/$/;"	m	struct:pic
nback_type	prefs.h	/^  int		nback_type;				\/* nb of params *\/$/;"	m	struct:__anon44
nback_val	prefs.h	/^  int		nback_val;				\/* nb of params *\/$/;"	m	struct:__anon44
nbackfsize	prefs.h	/^  int		nbackfsize;				\/* nb of params *\/$/;"	m	struct:__anon44
nbackfx	types.h	/^  int		nbackfx, nbackfy;	\/* x,y size of bkgnd filtering mask *\/$/;"	m	struct:pic
nbackfy	types.h	/^  int		nbackfx, nbackfy;	\/* x,y size of bkgnd filtering mask *\/$/;"	m	struct:pic
nbackp	types.h	/^  int		nbackp;			\/* total nb of pixels per bkgnd mesh *\/$/;"	m	struct:pic
nbacksize	prefs.h	/^  int		nbacksize;				\/* nb of params *\/$/;"	m	struct:__anon44
nbackx	types.h	/^  int		nbackx, nbacky;		\/* x,y number of bkgnd meshes *\/$/;"	m	struct:pic
nbacky	types.h	/^  int		nbackx, nbacky;		\/* x,y number of bkgnd meshes *\/$/;"	m	struct:pic
nbytes	fits/fitscat.h	/^  int		nbytes;			\/* number of bytes per element *\/$/;"	m	struct:structkey
ncheck_name	prefs.h	/^  int		ncheck_name;				\/* nb of params *\/$/;"	m	struct:__anon44
ncheck_type	prefs.h	/^  int		ncheck_type;				\/* nb of params *\/$/;"	m	struct:__anon44
ncnstr	levmar/lmlec_core.c	/^  int ncnstr;$/;"	m	struct:LMLEC_DATA	file:
ncode	psf.h	/^  int		ncode;$/;"	m	struct:code
ncoeff	wcs/poly.h	/^  int		ncoeff;		\/* Number of coefficients *\/$/;"	m	struct:poly
ncoeff	wcs/tnx.h	/^  int		ncoeff;			\/* Number of polynom coefficients *\/$/;"	m	struct:tnxaxis
ncol	assoc.h	/^  int		ncol;			\/* Total number of columns per row *\/$/;"	m	struct:structassoc
ncommand_line	prefs.h	/^  int		ncommand_line;				\/* nb of params *\/$/;"	m	struct:__anon44
ncomp	pattern.h	/^  int		ncomp;			\/* Number of independent components *\/$/;"	m	struct:__anon12
nconv	filter.h	/^  int		nconv;		\/* total number of elements *\/$/;"	m	struct:structfilter
ndata	assoc.h	/^  int		ndata;			\/* Number of retained cols per row *\/$/;"	m	struct:structassoc
ndetect	types.h	/^  int		ndetect;				\/* nb of detections *\/$/;"	m	struct:__anon9
ndetect	xml.h	/^  int		ndetect;$/;"	m	struct:__anon10
ndim	wcs/poly.h	/^  int		ndim;		\/* dimensionality of the polynom *\/$/;"	m	struct:poly
ndthresh	prefs.h	/^  int		ndthresh;				\/* (1 or 2 entries) *\/$/;"	m	struct:__anon44
nerror	fits/fitsmisc.c	/^static int	nwarning = 0, nwarning_history = 0, nerror = 0;$/;"	v	file:
neurclose	neurro.c	/^void	neurclose()$/;"	f
neurdim	som.h	/^  int		neurdim;		\/* Dimensionality of the SOM *\/$/;"	m	struct:__anon25
neurfilter	filter.c	/^void	neurfilter(picstruct *field, PIXTYPE *mscan)$/;"	f
neurinit	neurro.c	/^void	neurinit()$/;"	f
neuron	bpro.h	/^	NFLOAT	**neuron;		\/* Neuron array (layer,pos in layer) *\/$/;"	m	struct:structbpann
neurresp	neurro.c	/^void	neurresp(double *input, double *output)$/;"	f
neursize	som.h	/^  int		*neursize;		\/* Dimensions of the SOM *\/$/;"	m	struct:__anon25
neurstep	som.h	/^  int		*neurstep;		\/* Stepping through the SOM *\/$/;"	m	struct:__anon25
new_cat	fits/fitscat.c	/^catstruct	*new_cat(int ncat)$/;"	f
new_key	fits/fitskey.c	/^keystruct	*new_key(char *keyname)$/;"	f
new_tab	fits/fitstab.c	/^tabstruct	*new_tab(char *tabname)$/;"	f
newfield	field.c	/^picstruct	*newfield(char *filename, int flags, int nok)$/;"	f
newweight	weight.c	/^picstruct	*newweight(char *filename, picstruct *reffield,$/;"	f
next	prefs.h	/^  int		next;			     \/* Number of extensions in file *\/$/;"	m	struct:__anon44
next	types.h	/^  int		next;					\/* Nb of extensions *\/$/;"	m	struct:__anon9
nextkey	fits/fitscat.h	/^  struct structkey	*nextkey;	\/* next key within the chain *\/$/;"	m	struct:structkey	typeref:struct:structkey::structkey
nextpix	plist.h	/^  int		nextpix;$/;"	m	struct:__anon16
nextrainput	som.h	/^  int		nextrainput;		\/* Number of extra inputs *\/$/;"	m	struct:__anon25
nexttab	fits/fitscat.h	/^  struct structtab *prevtab, *nexttab;	\/* previous and next tab in chain *\/$/;"	m	struct:structtab	typeref:struct:structtab::
nfev	levmar/lmbc_core.c	/^  int n, *nfev;$/;"	m	struct:FUNC_STATE	file:
nfilter_thresh	prefs.h	/^  int		nfilter_thresh;				\/* nb of params *\/$/;"	m	struct:__anon44
nfimage_name	prefs.h	/^  int		nfimage_name;				\/* nb of params *\/$/;"	m	struct:__anon44
nflux_frac	prefs.h	/^  int		nflux_frac;       			\/* number of elem. *\/$/;"	m	struct:__anon44
nfreq	pattern.h	/^  int		nfreq;			\/* Number of waves per component *\/$/;"	m	struct:__anon12
ngamma	types.h	/^  double	ngamma;			\/* normalized photo gamma *\/$/;"	m	struct:pic
ngate	threads.h	/^  int			ngate;		\/* Gate counter *\/$/;"	m	struct:_threads_gate_t
ngroup	wcs/poly.h	/^  int		ngroup;		\/* Number of different groups *\/$/;"	m	struct:poly
ngrowth	growth.c	/^static int	ngrowth;$/;"	v	file:
ni	neurro.h	/^	double	ni[NEURONS];$/;"	m	struct:__anon13
nimaflag	prefs.h	/^  int		nimaflag;				\/* effective ima nb *\/$/;"	m	struct:__anon44
nimage_name	prefs.h	/^  int		nimage_name;				\/* nb of params *\/$/;"	m	struct:__anon44
nimaisoflag	prefs.h	/^  int		nimaisoflag;				\/* effective iso nb *\/$/;"	m	struct:__anon44
ninput	som.h	/^  int		ninput;			\/* Total number of inputs *\/$/;"	m	struct:__anon25
ninterp_type	prefs.h	/^  int		ninterp_type;				\/* nb of params *\/$/;"	m	struct:__anon44
ninterp_xtimeout	prefs.h	/^  int		ninterp_xtimeout;       	        \/* nb of params *\/$/;"	m	struct:__anon44
ninterp_ytimeout	prefs.h	/^  int		ninterp_ytimeout;       		\/* nb of params *\/$/;"	m	struct:__anon44
niter	profit.h	/^  int		niter;		\/* Number of iterations *\/$/;"	m	struct:__anon23
niter	psf.h	/^  int		niter;		\/* Number of iterations required *\/$/;"	m	struct:__anon24
niter_psf	types.h	/^  short		niter_psf;			\/* # of PSF-fitting iterat. *\/$/;"	m	struct:__anon7
nkey	fits/fitscat.h	/^  int		nkey;			\/* number of keys *\/$/;"	m	struct:structtab
nlayers	bpro.h	/^	int	nlayers;		\/* Number of "active" layers *\/$/;"	m	struct:structbpann
nlevels	back.h	/^  int		nlevels;		\/* Nb of histogram bins *\/$/;"	m	struct:structback
nlevels	types.h	/^  int		nlevels;		\/* nb of quantification levels *\/$/;"	m	struct:pic
nlistmax	key.h	/^  int           nlistmax; 		\/* Maximum number of list members *\/$/;"	m	struct:__anon17
nlistmin	key.h	/^  int           nlistmin;		\/* Minimum number of list members *\/$/;"	m	struct:__anon17
nlistptr	key.h	/^  int		*nlistptr;		\/* Ptr to store the nb of read params*\/$/;"	m	struct:__anon17
nmodes	pattern.h	/^  int		nmodes;			\/* Number of modes per component *\/$/;"	m	struct:__anon12
nn	bpro.h	/^	int	*nn;			\/* Nb of neurons per "active" layer *\/$/;"	m	struct:structbpann
nn	neurro.h	/^	int	nn[LAYERS];$/;"	m	struct:__anon13
nneur	som.h	/^  int		nneur;			\/* Total number of neurons *\/$/;"	m	struct:__anon25
nnw_name	prefs.h	/^  char		nnw_name[MAXCHAR];			\/* nnw filename *\/$/;"	m	struct:__anon44
nnw_name	types.h	/^  char		nnw_name[MAXCHAR];			\/* NNW name *\/$/;"	m	struct:__anon9
no	neurro.h	/^	double	no[NEURONS];$/;"	m	struct:__anon13
nobj	assoc.h	/^  int		nobj;			\/* Number of data rows *\/$/;"	m	struct:structassoc
nobj	fits/fitscat.h	/^  int		nobj;			\/* number of objects *\/$/;"	m	struct:structkey
nobj	types.h	/^  int		nobj;			\/* number of objects in list *\/$/;"	m	struct:__anon8
noinst_LIBRARIES	cuda/Makefile	/^noinst_LIBRARIES = libcuda.a $/;"	m
noinst_LIBRARIES	fits/Makefile	/^noinst_LIBRARIES = libfits.a$/;"	m
noinst_LIBRARIES	levmar/Makefile	/^noinst_LIBRARIES = liblevmar.a$/;"	m
noinst_LIBRARIES	wcs/Makefile	/^noinst_LIBRARIES = libwcs_c.a$/;"	m
noinst_OBJECTS	cuda/Makefile	/^noinst_OBJECTS = cudaanalyse.o cudadetection.o cudadeblend.o cudafilter.o \\$/;"	m
norm	pattern.h	/^  double	*norm;			\/* Pattern vector norm *\/$/;"	m	struct:__anon12
notokstr	preflist.h	/^const char	notokstr[] = {" \\t=,;\\n\\r\\""};$/;"	v
nparam	profit.h	/^  int		nparam;		\/* Number of parameters to be fitted *\/$/;"	m	struct:__anon23
nparam	psf.h	/^  int		nparam;$/;"	m	struct:code
nparam	types.h	/^  int		nparam;					\/* Nb of parameters *\/$/;"	m	struct:__anon9
npc	psf.h	/^  int		npc;		\/* Number of Principal Components *\/$/;"	m	struct:pc
npcode	wcs/cel.c	/^int  npcode = 26;$/;"	v
npetroparam	prefs.h	/^  int		npetroparam;				\/* nb of Kron params *\/$/;"	m	struct:__anon44
npix	back.h	/^  int		npix;			\/* Number of pixels involved *\/$/;"	m	struct:structback
npix	check.h	/^  size_t	npix;			\/* number of pixels in check-image *\/$/;"	m	struct:structcheck
npix	cuda/cudatypes.h	/^  int		npix;				\/* "" in measured frame *\/$/;"	m	struct:__anon1
npix	retina.h	/^  int		npix;		\/* Number of pixels in the retina *\/$/;"	m	struct:structreti
npix	types.h	/^  KINGSIZE_T	npix;			\/* total number of pixels *\/$/;"	m	struct:pic
npix	types.h	/^  int		npix;				\/* "" in measured frame *\/$/;"	m	struct:__anon6
npix	types.h	/^  int		npix;			\/* number of pixels in pixel-list *\/$/;"	m	struct:__anon8
npixw	types.h	/^  float		npixw, fdnpixw;			\/* WORLD isophotal areas *\/$/;"	m	struct:__anon7
nproc	threads.h	/^ int		nproc;	\/* Number of child threads *\/$/;"	v
nprof	profit.h	/^  int		nprof;		\/* Number of profiles to consider *\/$/;"	m	struct:__anon23
nprojp	fitswcs.h	/^  int		nprojp;			\/* number of useful projp parameters *\/$/;"	m	struct:wcs
npsf	psf.h	/^  int		npsf;		\/* Number of fitted stars for this detection *\/$/;"	m	struct:__anon24
npsf	types.h	/^  short		npsf;				\/* # of fitted PSFs *\/$/;"	m	struct:__anon7
npsf_name	prefs.h	/^  int		npsf_name;				\/* nb of params *\/$/;"	m	struct:__anon44
nresi	profit.h	/^  int		nresi;		\/* Number of residual elements *\/$/;"	m	struct:__anon23
nseg	fits/fitscat.h	/^  int		nseg;			\/* number of tab segments *\/$/;"	m	struct:structtab
nsweep	som.h	/^  int		nsweep;			\/* # of sweeps through the whole set *\/$/;"	m	struct:__anon25
ntab	fits/fitscat.h	/^  int		ntab;			\/* number of tables included *\/$/;"	m	struct:structcat
nthreads	prefs.h	/^  int		nthreads;			\/* Number of active threads *\/$/;"	m	struct:__anon44
nthreads	threads.h	/^  int			nthreads;	\/* Number of threads to manage *\/$/;"	m	struct:_threads_gate_t
nthresh	prefs.h	/^  int		nthresh;				\/* (1 or 2 entries) *\/$/;"	m	struct:__anon44
nthresh_type	prefs.h	/^  int		nthresh_type;				\/* nb of params *\/$/;"	m	struct:__anon44
ntotal	types.h	/^  int		ntotal;					\/* Total object nb *\/$/;"	m	struct:__anon9
ntotal	xml.h	/^  int		ntotal;$/;"	m	struct:__anon10
ntrain	som.h	/^  int		ntrain;			\/* # of training examples so far *\/$/;"	m	struct:__anon25
number	cuda/cudatypes.h	/^  int		number;				\/* ID *\/$/;"	m	struct:__anon1
number	types.h	/^  int		number;				\/* ID *\/$/;"	m	struct:__anon6
nwarning	fits/fitsmisc.c	/^static int	nwarning = 0, nwarning_history = 0, nerror = 0;$/;"	v	file:
nwarning_history	fits/fitsmisc.c	/^static int	nwarning = 0, nwarning_history = 0, nerror = 0;$/;"	v	file:
nweight	som.h	/^  int		nweight;		\/* Total number of weights *\/$/;"	m	struct:__anon25
nweight_thresh	prefs.h	/^  int		nweight_thresh;				\/* nb of params *\/$/;"	m	struct:__anon44
nweight_type	prefs.h	/^  int		nweight_type;				\/* nb of params *\/$/;"	m	struct:__anon44
nwimage_name	prefs.h	/^  int		nwimage_name;				\/* nb of params *\/$/;"	m	struct:__anon44
nxml	xml.c	/^int			nxml=0, nxmlmax=0;$/;"	v
nxmlmax	xml.c	/^int			nxml=0, nxmlmax=0;$/;"	v
obj	profit.h	/^  objstruct	*obj;		\/* Current object *\/$/;"	m	struct:__anon23
obj	types.h	/^  objstruct	*obj;			\/* pointer to the object array *\/$/;"	m	struct:__anon8
obj2	analyse.c	/^static obj2struct	*obj2 = &outobj2;$/;"	v	file:
obj2	astrom.c	/^static obj2struct	*obj2 = &outobj2;$/;"	v	file:
obj2	growth.c	/^static obj2struct	*obj2 = &outobj2;$/;"	v	file:
obj2	pc.c	/^static  obj2struct	*obj2 = &outobj2;$/;"	v	file:
obj2	photom.c	/^static obj2struct *obj2 = &outobj2;$/;"	v	file:
obj2	profit.h	/^  obj2struct	*obj2;		\/* Current object *\/$/;"	m	struct:__anon23
obj2	winpos.c	/^static  obj2struct	*obj2 = &outobj2;$/;"	v	file:
obj2struct	types.h	/^  }	obj2struct;$/;"	t	typeref:struct:__anon7
objkey	param.h	/^keystruct	objkey[] = {$/;"	v
objlist	refine.c	/^static objliststruct *objlist;$/;"	v	file:
objliststruct	types.h	/^  }	objliststruct;$/;"	t	typeref:struct:__anon8
objnaxisn	profit.h	/^  int		objnaxisn[2];	\/* Dimensions along each axis *\/$/;"	m	struct:__anon23
objpix	profit.h	/^  PIXTYPE	*objpix;	\/* Copy of object pixmap *\/$/;"	m	struct:__anon23
objstruct	types.h	/^  }	objstruct;$/;"	t	typeref:struct:__anon6
objstruct_cuda	cuda/cudatypes.h	/^  }	objstruct_cuda;$/;"	t	typeref:struct:__anon1
objtab	catout.c	/^tabstruct	*objtab = NULL;$/;"	v
objweight	profit.h	/^  PIXTYPE	*objweight;	\/* Copy of object weight-map *\/$/;"	m	struct:__anon23
obsdate	fitswcs.h	/^  double	obsdate;		\/* Date of observations *\/$/;"	m	struct:wcs
ok	refine.c	/^static short *son, *ok;$/;"	v	file:
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	fits/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	levmar/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	wcs/Makefile	/^oldincludedir = \/usr\/include$/;"	m
omaskcomp	psf.h	/^  float		*omaskcomp; 	\/* Original pix data (principal components) *\/$/;"	m	struct:pc
omaskdim	psf.h	/^  int		omaskdim;	\/* Dimensionality of the tabulated data *\/$/;"	m	struct:pc
omasknpix	psf.h	/^  int		omasknpix;	\/* Total number of involved PC pixels *\/$/;"	m	struct:pc
omasksize	psf.h	/^  int		*omasksize;	\/* PC mask dimensions *\/$/;"	m	struct:pc
open_cat	fits/fitscat.c	/^int	open_cat(catstruct *cat, access_type at)$/;"	f
outbias	neurro.h	/^	double	outbias[NEURONS];$/;"	m	struct:__anon13
outmax	fitswcs.h	/^  int		outmax[NAXIS];		\/* maximum output pixel coordinate *\/$/;"	m	struct:wcs
outmin	fitswcs.h	/^  int		outmin[NAXIS];		\/* minimum output pixel coordinate *\/$/;"	m	struct:wcs
outobj	param.h	/^objstruct	outobj;$/;"	v
outobj2	param.h	/^obj2struct	outobj2;$/;"	v
output_type	fits/fitscat.h	/^				output_type;    \/* Type of output *\/$/;"	t	typeref:enum:__anon29
outscale	neurro.h	/^	double	outscale[NEURONS];$/;"	m	struct:__anon13
overlay	check.h	/^  PIXTYPE	overlay;		\/* intensity of the overlayed plots *\/$/;"	m	struct:structcheck
p	levmar/lmlec_core.c	/^  LM_REAL *c, *Z, *p, *jac;$/;"	m	struct:LMLEC_DATA	file:
p	wcs/proj.h	/^   double p[200];$/;"	m	struct:prjprm
pad_tab	fits/fitswrite.c	/^int pad_tab(catstruct *cat, KINGSIZE_T size)$/;"	f
padbuf	fits/fitsread.c	/^char	padbuf[FBSIZE];$/;"	v
param	profit.h	/^  double	param[PARAM_NPARAM];	\/* Vector of parameters to be fitted *\/$/;"	m	struct:__anon23
param	psf.h	/^  float		**param;$/;"	m	struct:code
param_name	prefs.h	/^  char		param_name[MAXCHAR];			\/* param. filename *\/$/;"	m	struct:__anon44
paramenum	profit.h	/^		PARAM_NPARAM}	paramenum;$/;"	t	typeref:enum:__anon21
paramerr	profit.h	/^  double	paramerr[PARAM_NPARAM];	\/* Std deviations of parameters *\/$/;"	m	struct:__anon23
paramindex	profit.h	/^  int		paramindex[PARAM_NPARAM];\/* Vector of parameter indices *\/$/;"	m	struct:__anon23
paraminit	profit.h	/^  double	paraminit[PARAM_NPARAM];\/* Parameter initial guesses *\/$/;"	m	struct:__anon23
paramlist	profit.h	/^  double	*paramlist[PARAM_NPARAM];	\/* flat parameter list *\/$/;"	m	struct:__anon23
parammax	profit.h	/^  double	parammax[PARAM_NPARAM];	\/* Parameter upper limits *\/$/;"	m	struct:__anon23
parammin	profit.h	/^  double	parammin[PARAM_NPARAM];	\/* Parameter lower limits *\/$/;"	m	struct:__anon23
parammod	psf.h	/^  int		*parammod;$/;"	m	struct:code
parcelout	refine.c	/^int parcelout(objliststruct *objlistin, objliststruct *objlistout)$/;"	f
parfwd	wcs/proj.c	/^int parfwd(phi, theta, prj, x, y)$/;"	f
parrev	wcs/proj.c	/^int parrev(x, y, prj, phi, theta)$/;"	f
parset	wcs/proj.c	/^int parset(prj)$/;"	f
pasteimage	image.c	/^void	pasteimage(picstruct *field, PIXTYPE *mask, int w,int h,$/;"	f
pattern_compmodarg	pattern.c	/^void	pattern_compmodarg(patternstruct *pattern, profitstruct *profit)$/;"	f
pattern_create	pattern.c	/^void	pattern_create(patternstruct *pattern, profitstruct *profit)$/;"	f
pattern_end	pattern.c	/^void	pattern_end(patternstruct *pattern)$/;"	f
pattern_fit	pattern.c	/^void	pattern_fit(patternstruct *pattern, profitstruct *profit)$/;"	f
pattern_flag	prefs.h	/^  int		pattern_flag;				\/* Pattern-fitting *\/$/;"	m	struct:__anon44
pattern_init	pattern.c	/^patternstruct	*pattern_init(profitstruct *profit, pattypenum ptype, int ncomp)$/;"	f
pattern_spiral	pattern.c	/^float	pattern_spiral(patternstruct *pattern)$/;"	f
pattern_type	prefs.h	/^  pattypenum	pattern_type;				\/* Disk pattern type *\/$/;"	m	struct:__anon44
patternstruct	pattern.h	/^  }	patternstruct;$/;"	t	typeref:struct:__anon12
pattypenum	pattern.h	/^				pattypenum; \/* Pattern code *\/$/;"	t	typeref:enum:__anon11
pback_size	prefs.h	/^  int		pback_size;				\/* rect. ann. width *\/$/;"	m	struct:__anon44
pback_type	prefs.h	/^  pbacktype			pback_type;	\/* phot. bkgnd type *\/$/;"	m	struct:__anon44
pbacktype	prefs.h	/^typedef enum	{GLOBAL, LOCAL}			pbacktype;$/;"	t	typeref:enum:__anon37
pbliststruct	plist.h	/^  }	pbliststruct;$/;"	t	typeref:struct:__anon16
pc	psf.h	/^  float		*pc;$/;"	m	struct:code
pc	psf.h	/^  pcstruct	*pc;		\/* PC components *\/$/;"	m	struct:psf
pc	psf.h	/^typedef struct pc$/;"	s
pc	wcs/lin.h	/^   double *pc;$/;"	m	struct:linprm
pc_end	pc.c	/^void	pc_end(pcstruct *pc)$/;"	f
pc_fit	pc.c	/^void	pc_fit(psfstruct *psf, double *data, double *weight,$/;"	f
pc_flag	prefs.h	/^  int		pc_flag;				\/* PC-fit needed *\/$/;"	m	struct:__anon44
pc_load	pc.c	/^pcstruct	*pc_load(catstruct *cat)$/;"	f
pc_vectorsize	prefs.h	/^  int		pc_vectorsize;				\/* nb of params *\/$/;"	m	struct:__anon44
pcode	wcs/wcs.h	/^   char pcode[4];$/;"	m	struct:wcsprm
pcodes	wcs/cel.c	/^char pcodes[26][4] =$/;"	v
pcofwd	wcs/proj.c	/^int pcofwd(phi, theta, prj, x, y)$/;"	f
pcorev	wcs/proj.c	/^int pcorev(x, y, prj, phi, theta)$/;"	f
pcoset	wcs/proj.c	/^int pcoset(prj)$/;"	f
pcount	fits/fitscat.h	/^  int		pcount, gcount;		\/* alignment of the data *\/$/;"	m	struct:structtab
pcstruct	psf.h	/^  }	pcstruct;$/;"	t	typeref:struct:pc
pdfdir	Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	fits/Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	levmar/Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	wcs/Makefile	/^pdfdir = ${docdir}$/;"	m
peak	cuda/cudatypes.h	/^  PIXTYPE	peak;				\/* peak intensity (ADU) *\/$/;"	m	struct:__anon1
peak	types.h	/^  PIXTYPE	peak;				\/* peak intensity (ADU) *\/$/;"	m	struct:__anon6
peakalpha1950	types.h	/^  double	peakalpha1950, peakdelta1950;	\/* B1950 for brightest pix *\/$/;"	m	struct:__anon7
peakalpha2000	types.h	/^  double	peakalpha2000, peakdelta2000;	\/* J2000 for brightest pix *\/$/;"	m	struct:__anon7
peakalphas	types.h	/^  double	peakalphas, peakdeltas;		\/* native for brightest pix *\/$/;"	m	struct:__anon7
peakdelta1950	types.h	/^  double	peakalpha1950, peakdelta1950;	\/* B1950 for brightest pix *\/$/;"	m	struct:__anon7
peakdelta2000	types.h	/^  double	peakalpha2000, peakdelta2000;	\/* J2000 for brightest pix *\/$/;"	m	struct:__anon7
peakdeltas	types.h	/^  double	peakalphas, peakdeltas;		\/* native for brightest pix *\/$/;"	m	struct:__anon7
peakx	cuda/cudatypes.h	/^  int		peakx,peaky;			\/* pos of brightest pix *\/$/;"	m	struct:__anon1
peakx	types.h	/^  int		peakx,peaky;			\/* pos of brightest pix *\/$/;"	m	struct:__anon6
peakxw	types.h	/^  double	peakxw, peakyw;			\/* WORLD of brightest pix *\/$/;"	m	struct:__anon7
peaky	cuda/cudatypes.h	/^  int		peakx,peaky;			\/* pos of brightest pix *\/$/;"	m	struct:__anon1
peaky	types.h	/^  int		peakx,peaky;			\/* pos of brightest pix *\/$/;"	m	struct:__anon6
peakyw	types.h	/^  double	peakxw, peakyw;			\/* WORLD of brightest pix *\/$/;"	m	struct:__anon7
petrofactor	types.h	/^  float		petrofactor;			\/* kron parameter *\/$/;"	m	struct:__anon7
petroparam	prefs.h	/^  double	petroparam[2];				\/* Kron parameters *\/$/;"	m	struct:__anon44
pic	types.h	/^typedef struct pic$/;"	s
picstruct	types.h	/^  }	picstruct;$/;"	t	typeref:struct:pic
pipe_flag	prefs.h	/^  int		pipe_flag;				\/* allow piping ? *\/$/;"	m	struct:__anon44
pix	check.h	/^  void		*pix;			\/* ptr to check-image pixmap *\/$/;"	m	struct:structcheck
pix	profit.h	/^  double	*pix;			\/* Full pixmap of the model *\/$/;"	m	struct:__anon22
pix	retina.h	/^  float		*pix;		\/* Pointer to the copy of the pixel array *\/$/;"	m	struct:structreti
pixel_scale	prefs.h	/^  double	pixel_scale;				\/* in arcsec *\/$/;"	m	struct:__anon44
piximg	wcs/lin.h	/^   double *piximg;$/;"	m	struct:linprm
pixmax	types.h	/^  float		pixmin, pixmax;		\/* min and max values in frame *\/$/;"	m	struct:pic
pixmin	types.h	/^  float		pixmin, pixmax;		\/* min and max values in frame *\/$/;"	m	struct:pic
pixnb	extract.h	/^  LONG		pixnb;			\/* Number of pixels included *\/$/;"	m	struct:structinfo
pixscale	fitswcs.h	/^  double	pixscale;		\/* (Local) pixel scale *\/$/;"	m	struct:wcs
pixscale	types.h	/^   double	pixscale;		\/* pixel size in arcsec.pix-1 *\/$/;"	m	struct:pic
pixscale	xml.h	/^  double	pixscale[2];				\/* pixel scale (deg2) *\/$/;"	m	struct:__anon10
pixstep	profit.h	/^  double	pixstep;	\/* Model\/PSF sampling step *\/$/;"	m	struct:__anon23
pixstep	psf.h	/^  float		pixstep;	\/* PSF sampling step *\/$/;"	m	struct:psf
pkeystruct	key.h	/^  }	pkeystruct;$/;"	t	typeref:struct:__anon17
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/sextractor$/;"	m
pkgdatadir	fits/Makefile	/^pkgdatadir = $(datadir)\/sextractor$/;"	m
pkgdatadir	levmar/Makefile	/^pkgdatadir = $(datadir)\/sextractor$/;"	m
pkgdatadir	wcs/Makefile	/^pkgdatadir = $(datadir)\/sextractor$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/sextractor$/;"	m
pkgincludedir	fits/Makefile	/^pkgincludedir = $(includedir)\/sextractor$/;"	m
pkgincludedir	levmar/Makefile	/^pkgincludedir = $(includedir)\/sextractor$/;"	m
pkgincludedir	wcs/Makefile	/^pkgincludedir = $(includedir)\/sextractor$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/sextractor$/;"	m
pkglibdir	fits/Makefile	/^pkglibdir = $(libdir)\/sextractor$/;"	m
pkglibdir	levmar/Makefile	/^pkglibdir = $(libdir)\/sextractor$/;"	m
pkglibdir	wcs/Makefile	/^pkglibdir = $(libdir)\/sextractor$/;"	m
pkglibexecdir	Makefile	/^pkglibexecdir = $(libexecdir)\/sextractor$/;"	m
play_bpann	bpro.c	/^void	play_bpann(bpannstruct *bpann, NFLOAT *invec, NFLOAT *outvec)$/;"	f
plist	types.h	/^  pliststruct	*plist;			\/* pointer to the pixel-list *\/$/;"	m	struct:__anon8
plistexist_cdvalue	plist.h	/^int	plistexist_value, plistexist_dvalue, plistexist_cdvalue,$/;"	v
plistexist_dthresh	plist.h	/^	plistexist_flag, plistexist_wflag, plistexist_dthresh, plistexist_var,$/;"	v
plistexist_dvalue	plist.h	/^int	plistexist_value, plistexist_dvalue, plistexist_cdvalue,$/;"	v
plistexist_flag	plist.h	/^	plistexist_flag, plistexist_wflag, plistexist_dthresh, plistexist_var,$/;"	v
plistexist_value	plist.h	/^int	plistexist_value, plistexist_dvalue, plistexist_cdvalue,$/;"	v
plistexist_var	plist.h	/^	plistexist_flag, plistexist_wflag, plistexist_dthresh, plistexist_var,$/;"	v
plistexist_wflag	plist.h	/^	plistexist_flag, plistexist_wflag, plistexist_dthresh, plistexist_var,$/;"	v
plistoff_cdvalue	plist.h	/^	plistoff_value, plistoff_dvalue, plistoff_cdvalue,$/;"	v
plistoff_dthresh	plist.h	/^	plistoff_flag[MAXFLAG], plistoff_wflag, plistoff_dthresh, plistoff_var,$/;"	v
plistoff_dvalue	plist.h	/^	plistoff_value, plistoff_dvalue, plistoff_cdvalue,$/;"	v
plistoff_flag	plist.h	/^	plistoff_flag[MAXFLAG], plistoff_wflag, plistoff_dthresh, plistoff_var,$/;"	v
plistoff_value	plist.h	/^	plistoff_value, plistoff_dvalue, plistoff_cdvalue,$/;"	v
plistoff_var	plist.h	/^	plistoff_flag[MAXFLAG], plistoff_wflag, plistoff_dthresh, plistoff_var,$/;"	v
plistoff_wflag	plist.h	/^	plistoff_flag[MAXFLAG], plistoff_wflag, plistoff_dthresh, plistoff_var,$/;"	v
plistsize	plist.h	/^	plistsize;$/;"	v
pliststruct	types.h	/^typedef	char		pliststruct;		\/* Dummy type for plist *\/$/;"	t
pmodpix	profit.h	/^  float		*pmodpix;	\/* Full res. pixmap of the partial model *\/$/;"	m	struct:__anon23
polar	types.h	/^  float		polar;				\/* Kaiser's "polarization" *\/$/;"	m	struct:__anon7
polarw	types.h	/^  float		polarw;				\/* WORLD "polarization" *\/$/;"	m	struct:__anon7
poly	psf.h	/^  struct poly	*poly;		\/* Polynom describing the PSF variations *\/$/;"	m	struct:psf	typeref:struct:psf::poly
poly	wcs/poly.h	/^typedef struct poly$/;"	s
poly_addcste	wcs/poly.c	/^void	poly_addcste(polystruct *poly, double *cste)$/;"	f
poly_end	wcs/poly.c	/^void	poly_end(polystruct *poly)$/;"	f
poly_fit	wcs/poly.c	/^void	poly_fit(polystruct *poly, double *x, double *y, double *w, int ndata,$/;"	f
poly_func	wcs/poly.c	/^double	poly_func(polystruct *poly, double *pos)$/;"	f
poly_init	wcs/poly.c	/^polystruct	*poly_init(int *group, int ndim, int *degree, int ngroup)$/;"	f
poly_powers	wcs/poly.c	/^int	*poly_powers(polystruct *poly)$/;"	f
poly_solve	wcs/poly.c	/^void	poly_solve(double *a, double *b, int n)$/;"	f
polystruct	wcs/poly.h	/^  }	polystruct;$/;"	t	typeref:struct:poly
pos	fits/fitscat.h	/^  long		pos;			\/* position within file *\/$/;"	m	struct:structkey
pos_to_key	fits/fitskey.c	/^keystruct	*pos_to_key(tabstruct *tab, int pos)$/;"	f
pos_to_tab	fits/fitstab.c	/^tabstruct	*pos_to_tab(catstruct *cat, int pos, int seg)$/;"	f
posangle	profit.h	/^  double	*posangle;		\/* Position angle (CCW\/NAXIS1)*\/$/;"	m	struct:__anon22
poserr_a	types.h	/^  float		poserr_a, poserr_b,$/;"	m	struct:__anon7
poserr_aw	types.h	/^  float		poserr_aw, poserr_bw,$/;"	m	struct:__anon7
poserr_b	types.h	/^  float		poserr_a, poserr_b,$/;"	m	struct:__anon7
poserr_bw	types.h	/^  float		poserr_aw, poserr_bw,$/;"	m	struct:__anon7
poserr_cxx	types.h	/^  float		poserr_cxx, poserr_cyy,$/;"	m	struct:__anon7
poserr_cxxw	types.h	/^  float		poserr_cxxw, poserr_cyyw,$/;"	m	struct:__anon7
poserr_cxy	types.h	/^		poserr_cxy;			\/* pos. error ellipse *\/$/;"	m	struct:__anon7
poserr_cxyw	types.h	/^		poserr_cxyw;			\/* WORLD error ellipse *\/$/;"	m	struct:__anon7
poserr_cyy	types.h	/^  float		poserr_cxx, poserr_cyy,$/;"	m	struct:__anon7
poserr_cyyw	types.h	/^  float		poserr_cxxw, poserr_cyyw,$/;"	m	struct:__anon7
poserr_mx2	cuda/cudatypes.h	/^  double	poserr_mx2, poserr_my2,$/;"	m	struct:__anon1
poserr_mx2	types.h	/^  double	poserr_mx2, poserr_my2,$/;"	m	struct:__anon6
poserr_mx2w	types.h	/^  double	poserr_mx2w, poserr_my2w,$/;"	m	struct:__anon7
poserr_mxy	cuda/cudatypes.h	/^		poserr_mxy;			\/* Error ellips moments *\/$/;"	m	struct:__anon1
poserr_mxy	types.h	/^		poserr_mxy;			\/* Error ellips moments *\/$/;"	m	struct:__anon6
poserr_mxyw	types.h	/^		poserr_mxyw;			\/* WORLD error moments *\/$/;"	m	struct:__anon7
poserr_my2	cuda/cudatypes.h	/^  double	poserr_mx2, poserr_my2,$/;"	m	struct:__anon1
poserr_my2	types.h	/^  double	poserr_mx2, poserr_my2,$/;"	m	struct:__anon6
poserr_my2w	types.h	/^  double	poserr_mx2w, poserr_my2w,$/;"	m	struct:__anon7
poserr_theta	types.h	/^		poserr_theta;			\/* Error ellips parameters *\/$/;"	m	struct:__anon7
poserr_theta1950	types.h	/^  float		poserr_theta1950;		\/* B1950 error pos. angle *\/$/;"	m	struct:__anon7
poserr_theta2000	types.h	/^  float		poserr_theta2000;		\/* J2000 error pos. angle *\/$/;"	m	struct:__anon7
poserr_thetas	types.h	/^  float		poserr_thetas;			\/* native error pos. angle *\/$/;"	m	struct:__anon7
poserr_thetaw	types.h	/^		poserr_thetaw;			\/* WORLD error parameters *\/$/;"	m	struct:__anon7
poserra_prof	types.h	/^  float		poserra_prof, poserrb_prof,$/;"	m	struct:__anon7
poserra_psf	types.h	/^  float		poserra_psf, poserrb_psf,$/;"	m	struct:__anon7
poserraw_prof	types.h	/^  float		poserraw_prof, poserrbw_prof,$/;"	m	struct:__anon7
poserraw_psf	types.h	/^  float		poserraw_psf, poserrbw_psf,$/;"	m	struct:__anon7
poserrb_prof	types.h	/^  float		poserra_prof, poserrb_prof,$/;"	m	struct:__anon7
poserrb_psf	types.h	/^  float		poserra_psf, poserrb_psf,$/;"	m	struct:__anon7
poserrbw_prof	types.h	/^  float		poserraw_prof, poserrbw_prof,$/;"	m	struct:__anon7
poserrbw_psf	types.h	/^  float		poserraw_psf, poserrbw_psf,$/;"	m	struct:__anon7
poserrcxx_prof	types.h	/^  float		poserrcxx_prof, poserrcyy_prof,$/;"	m	struct:__anon7
poserrcxx_psf	types.h	/^  float		poserrcxx_psf, poserrcyy_psf,$/;"	m	struct:__anon7
poserrcxxw_prof	types.h	/^  float		poserrcxxw_prof, poserrcyyw_prof,$/;"	m	struct:__anon7
poserrcxxw_psf	types.h	/^  float		poserrcxxw_psf, poserrcyyw_psf,$/;"	m	struct:__anon7
poserrcxy_prof	types.h	/^		poserrcxy_prof;			\/* pos. error ellipse *\/$/;"	m	struct:__anon7
poserrcxy_psf	types.h	/^		poserrcxy_psf;			\/* pos. error ellipse *\/$/;"	m	struct:__anon7
poserrcxyw_prof	types.h	/^		poserrcxyw_prof;		\/* WORLD error ellipse *\/$/;"	m	struct:__anon7
poserrcxyw_psf	types.h	/^		poserrcxyw_psf;			\/* WORLD error ellipse *\/$/;"	m	struct:__anon7
poserrcyy_prof	types.h	/^  float		poserrcxx_prof, poserrcyy_prof,$/;"	m	struct:__anon7
poserrcyy_psf	types.h	/^  float		poserrcxx_psf, poserrcyy_psf,$/;"	m	struct:__anon7
poserrcyyw_prof	types.h	/^  float		poserrcxxw_prof, poserrcyyw_prof,$/;"	m	struct:__anon7
poserrcyyw_psf	types.h	/^  float		poserrcxxw_psf, poserrcyyw_psf,$/;"	m	struct:__anon7
poserrmx2_prof	types.h	/^  double	poserrmx2_prof, poserrmy2_prof,$/;"	m	struct:__anon7
poserrmx2_psf	types.h	/^  double	poserrmx2_psf, poserrmy2_psf,$/;"	m	struct:__anon7
poserrmx2w_prof	types.h	/^  double	poserrmx2w_prof, poserrmy2w_prof,$/;"	m	struct:__anon7
poserrmx2w_psf	types.h	/^  double	poserrmx2w_psf, poserrmy2w_psf,$/;"	m	struct:__anon7
poserrmxy_prof	types.h	/^		poserrmxy_prof;			\/* Error ellips moments *\/$/;"	m	struct:__anon7
poserrmxy_psf	types.h	/^		poserrmxy_psf;			\/* Error ellips moments *\/$/;"	m	struct:__anon7
poserrmxyw_prof	types.h	/^		poserrmxyw_prof;		\/* WORLD error moments *\/$/;"	m	struct:__anon7
poserrmxyw_psf	types.h	/^		poserrmxyw_psf;			\/* WORLD error moments *\/$/;"	m	struct:__anon7
poserrmy2_prof	types.h	/^  double	poserrmx2_prof, poserrmy2_prof,$/;"	m	struct:__anon7
poserrmy2_psf	types.h	/^  double	poserrmx2_psf, poserrmy2_psf,$/;"	m	struct:__anon7
poserrmy2w_prof	types.h	/^  double	poserrmx2w_prof, poserrmy2w_prof,$/;"	m	struct:__anon7
poserrmy2w_psf	types.h	/^  double	poserrmx2w_psf, poserrmy2w_psf,$/;"	m	struct:__anon7
poserrtheta1950_prof	types.h	/^  float		poserrtheta1950_prof;		\/* B1950 error pos. angle *\/$/;"	m	struct:__anon7
poserrtheta1950_psf	types.h	/^  float		poserrtheta1950_psf;		\/* B1950 error pos. angle *\/$/;"	m	struct:__anon7
poserrtheta2000_prof	types.h	/^  float		poserrtheta2000_prof;		\/* J2000 error pos. angle *\/$/;"	m	struct:__anon7
poserrtheta2000_psf	types.h	/^  float		poserrtheta2000_psf;		\/* J2000 error pos. angle *\/$/;"	m	struct:__anon7
poserrtheta_prof	types.h	/^		poserrtheta_prof;		\/* Error ellips parameters *\/$/;"	m	struct:__anon7
poserrtheta_psf	types.h	/^		poserrtheta_psf;		\/* Error ellips parameters *\/$/;"	m	struct:__anon7
poserrthetas_prof	types.h	/^  float		poserrthetas_prof;		\/* native error pos. angle *\/$/;"	m	struct:__anon7
poserrthetas_psf	types.h	/^  float		poserrthetas_psf;		\/* native error pos. angle *\/$/;"	m	struct:__anon7
poserrthetaw_prof	types.h	/^		poserrthetaw_prof;		\/* WORLD error parameters *\/$/;"	m	struct:__anon7
poserrthetaw_psf	types.h	/^		poserrthetaw_psf;		\/* WORLD error parameters *\/$/;"	m	struct:__anon7
posx	types.h	/^  double	posx,posy;			\/* "FITS" pos. in pixels *\/$/;"	m	struct:__anon7
posy	types.h	/^  double	posx,posy;			\/* "FITS" pos. in pixels *\/$/;"	m	struct:__anon7
powell	levmar/lmdemo.c	/^void powell(double *p, double *x, int m, int n, void *data)$/;"	f
ppsf	psf.h	/^psfstruct	*psf,*ppsf,*thepsf;$/;"	v
ppsfit	psf.h	/^psfitstruct	*thepsfit,*ppsfit,*psfit;$/;"	v
preanalyse	scan.c	/^void  preanalyse(int no, objliststruct *objlist, int analyse_type)$/;"	f
precess	fitswcs.c	/^void	precess(double yearin, double alphain, double deltain,$/;"	f
precess_wcs	fitswcs.c	/^void	precess_wcs(wcsstruct *wcs, double yearin, double yearout)$/;"	f
prefix	Makefile	/^prefix = \/usr\/local$/;"	m
prefix	fits/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	levmar/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	wcs/Makefile	/^prefix = \/usr\/local$/;"	m
prefs	prefs.h	/^  prefstruct		prefs;$/;"	v
prefs_name	prefs.h	/^  char		prefs_name[MAXCHAR];			\/* prefs filename*\/$/;"	m	struct:__anon44
prefs_name	types.h	/^  char		prefs_name[MAXCHAR];			\/* Prefs filename*\/$/;"	m	struct:__anon9
prefstruct	prefs.h	/^  }	prefstruct;$/;"	t	typeref:struct:__anon44
preprefs	prefs.c	/^void	preprefs()$/;"	f
prevkey	fits/fitscat.h	/^  struct structkey	*prevkey;	\/* previous key within the chain *\/$/;"	m	struct:structkey	typeref:struct:structkey::structkey
prevtab	fits/fitscat.h	/^  struct structtab *prevtab, *nexttab;	\/* previous and next tab in chain *\/$/;"	m	struct:structtab	typeref:struct:structtab::structtab
prim_head	fits/fitshead.c	/^int	prim_head(tabstruct *tab)$/;"	f
print_obj	fits/fitswrite.c	/^void	print_obj(FILE *stream, tabstruct *tab)$/;"	f
printf	fits/fitscat.h	/^  char		printf[80];		\/* printing format (C Convention) *\/$/;"	m	struct:structkey
printftotdisp	fits/fitshead.c	/^char	*printftotdisp(char *cprintf, char *str)$/;"	f
prj	fitswcs.h	/^  struct prjprm *prj;			\/* WCSLIB's prjprm structure *\/$/;"	m	struct:wcs	typeref:struct:wcs::prjprm
prjfwd	wcs/cel.h	/^   int (*prjfwd)();$/;"	m	struct:celprm
prjfwd	wcs/cel.h	/^   int (*prjfwd)(const double, const double,$/;"	m	struct:celprm
prjfwd_errmsg	wcs/proj.c	/^const char *prjfwd_errmsg[] = {$/;"	v
prjprm	wcs/proj.h	/^struct prjprm {$/;"	s
prjrev	wcs/cel.h	/^   int (*prjrev)();$/;"	m	struct:celprm
prjrev	wcs/cel.h	/^   int (*prjrev)(const double, const double,$/;"	m	struct:celprm
prjrev_errmsg	wcs/proj.c	/^const char *prjrev_errmsg[] = {$/;"	v
prjset_errmsg	wcs/proj.c	/^const char *prjset_errmsg[] = {$/;"	v
prof	profit.h	/^  profstruct	**prof;		\/* Array of pointers to profiles *\/$/;"	m	struct:__anon23
prof_add	profit.c	/^void	prof_add(profstruct *prof, profitstruct *profit)$/;"	f
prof_arms_flux	types.h	/^  float		prof_arms_flux;			\/* Spiral arms total flux *\/$/;"	m	struct:__anon7
prof_arms_fluxerr	types.h	/^  float		prof_arms_fluxerr;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_arms_mag	types.h	/^  float		prof_arms_mag;			\/* Arms "total" magnitude *\/$/;"	m	struct:__anon7
prof_arms_magerr	types.h	/^  float		prof_arms_magerr;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_arms_pitch	types.h	/^  float		prof_arms_pitch;		\/* Arms pitch angle *\/$/;"	m	struct:__anon7
prof_arms_pitcherr	types.h	/^  float		prof_arms_pitcherr;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_arms_posang	types.h	/^  float		prof_arms_posang;		\/* Arms true position angle *\/$/;"	m	struct:__anon7
prof_arms_posangerr	types.h	/^  float		prof_arms_posangerr;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_arms_quadfrac	types.h	/^  float		prof_arms_quadfrac;		\/* Arms quadrature fraction *\/$/;"	m	struct:__anon7
prof_arms_quadfracerr	types.h	/^  float		prof_arms_quadfracerr;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_arms_scale	types.h	/^  float		prof_arms_scale;		\/* Arms scalelength *\/$/;"	m	struct:__anon7
prof_arms_scaleerr	types.h	/^  float		prof_arms_scaleerr;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_arms_scaleerrw	types.h	/^  float		prof_arms_scaleerrw;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_arms_scalew	types.h	/^  float		prof_arms_scalew;		\/* WORLD arms scalelength *\/$/;"	m	struct:__anon7
prof_arms_start	types.h	/^  float		prof_arms_start;		\/* Arms starting radius *\/$/;"	m	struct:__anon7
prof_arms_starterr	types.h	/^  float		prof_arms_starterr;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_arms_starterrw	types.h	/^  float		prof_arms_starterrw;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_arms_startw	types.h	/^  float		prof_arms_startw;		\/* WORLD arms starting radius *\/$/;"	m	struct:__anon7
prof_bar_aspect	types.h	/^  float		prof_bar_aspect;		\/* Bar aspect ratio *\/$/;"	m	struct:__anon7
prof_bar_aspecterr	types.h	/^  float		prof_bar_aspecterr;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_bar_aspecterrw	types.h	/^  float		prof_bar_aspecterrw;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_bar_aspectw	types.h	/^  float		prof_bar_aspectw;		\/* WORLD bar aspect ratio *\/$/;"	m	struct:__anon7
prof_bar_flux	types.h	/^  float		prof_bar_flux;			\/* Galactic bar total flux *\/$/;"	m	struct:__anon7
prof_bar_fluxerr	types.h	/^  float		prof_bar_fluxerr;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_bar_length	types.h	/^  float		prof_bar_length;		\/* Bar length *\/$/;"	m	struct:__anon7
prof_bar_lengtherr	types.h	/^  float		prof_bar_lengtherr;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_bar_lengtherrw	types.h	/^  float		prof_bar_lengtherrw;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_bar_lengthw	types.h	/^  float		prof_bar_lengthw;		\/* WORLD bar length *\/$/;"	m	struct:__anon7
prof_bar_mag	types.h	/^  float		prof_bar_mag;			\/* Bar "total" magnitude *\/$/;"	m	struct:__anon7
prof_bar_magerr	types.h	/^  float		prof_bar_magerr;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_bar_posang	types.h	/^  float		prof_bar_posang;		\/* Bar true prosition angle *\/$/;"	m	struct:__anon7
prof_bar_posangerr	types.h	/^  float		prof_bar_posangerr;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_bar_theta	types.h	/^  float		prof_bar_theta;			\/* Bar projected angle *\/$/;"	m	struct:__anon7
prof_bar_theta1950	types.h	/^  float		prof_bar_theta1950;		\/* B1950 bar projected angle *\/$/;"	m	struct:__anon7
prof_bar_theta2000	types.h	/^  float		prof_bar_theta2000;		\/* J2000 bar projected angle *\/$/;"	m	struct:__anon7
prof_bar_thetaerr	types.h	/^  float		prof_bar_thetaerr;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_bar_thetaerrw	types.h	/^  float		prof_bar_thetaerrw;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_bar_thetas	types.h	/^  float		prof_bar_thetas;		\/* Sky bar projected angle *\/$/;"	m	struct:__anon7
prof_bar_thetaw	types.h	/^  float		prof_bar_thetaw;		\/* WORLD bar projected angle *\/$/;"	m	struct:__anon7
prof_chi2	types.h	/^  float		prof_chi2;			\/* Reduced chi2 *\/$/;"	m	struct:__anon7
prof_class_star	types.h	/^  float		prof_class_star;		\/* Model-fitting star\/gal class*\/$/;"	m	struct:__anon7
prof_concentration	types.h	/^  float		prof_concentration;		\/* Model-fitting concentration*\/$/;"	m	struct:__anon7
prof_disk_aspect	types.h	/^  float		prof_disk_aspect;		\/* Disk aspect ratio *\/$/;"	m	struct:__anon7
prof_disk_aspecterr	types.h	/^  float		prof_disk_aspecterr;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_disk_aspecterrw	types.h	/^  float		prof_disk_aspecterrw;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_disk_aspectw	types.h	/^  float		prof_disk_aspectw;		\/* WORLD disk aspect ratio *\/$/;"	m	struct:__anon7
prof_disk_flux	types.h	/^  float		prof_disk_flux;			\/* Disk total flux *\/$/;"	m	struct:__anon7
prof_disk_fluxerr	types.h	/^  float		prof_disk_fluxerr;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_disk_inclination	types.h	/^  float		prof_disk_inclination;		\/* Disk inclination *\/$/;"	m	struct:__anon7
prof_disk_inclinationerr	types.h	/^  float		prof_disk_inclinationerr;	\/* RMS error *\/$/;"	m	struct:__anon7
prof_disk_mag	types.h	/^  float		prof_disk_mag;			\/* Disk "total" mag *\/$/;"	m	struct:__anon7
prof_disk_magerr	types.h	/^  float		prof_disk_magerr;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_disk_patternargncomp	prefs.h	/^  int		prof_disk_patternargncomp;		\/* nb of params *\/$/;"	m	struct:__anon44
prof_disk_patternargvector	types.h	/^  float		*prof_disk_patternargvector;	\/* Disk pattern arguments *\/$/;"	m	struct:__anon7
prof_disk_patternargvectorsize	prefs.h	/^  int		prof_disk_patternargvectorsize;		\/* nb of params *\/$/;"	m	struct:__anon44
prof_disk_patternmodncomp	prefs.h	/^  int		prof_disk_patternmodncomp;		\/* nb of params *\/$/;"	m	struct:__anon44
prof_disk_patternmodvector	types.h	/^  float		*prof_disk_patternmodvector;	\/* Disk pattern moduli *\/$/;"	m	struct:__anon7
prof_disk_patternmodvectorsize	prefs.h	/^  int		prof_disk_patternmodvectorsize;		\/* nb of params *\/$/;"	m	struct:__anon44
prof_disk_patternncomp	prefs.h	/^  int		prof_disk_patternncomp;			\/* nb of params *\/$/;"	m	struct:__anon44
prof_disk_patternspiral	types.h	/^  float		prof_disk_patternspiral;	\/* Disk pattern spiral index *\/$/;"	m	struct:__anon7
prof_disk_patternvector	types.h	/^  float		*prof_disk_patternvector;	\/* Disk pattern coefficients *\/$/;"	m	struct:__anon7
prof_disk_patternvectorsize	prefs.h	/^  int		prof_disk_patternvectorsize;		\/* nb of params *\/$/;"	m	struct:__anon44
prof_disk_scale	types.h	/^  float		prof_disk_scale;		\/* Disk scale length *\/$/;"	m	struct:__anon7
prof_disk_scaleerr	types.h	/^  float		prof_disk_scaleerr;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_disk_scaleerrw	types.h	/^  float		prof_disk_scaleerrw;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_disk_scalew	types.h	/^  float		prof_disk_scalew;		\/* WORLD disk scale length *\/$/;"	m	struct:__anon7
prof_disk_theta	types.h	/^  float		prof_disk_theta;		\/* Disk position angle *\/$/;"	m	struct:__anon7
prof_disk_theta1950	types.h	/^  float		prof_disk_theta1950;		\/* B1950 disk position angle *\/$/;"	m	struct:__anon7
prof_disk_theta2000	types.h	/^  float		prof_disk_theta2000;		\/* J2000 disk position angle *\/$/;"	m	struct:__anon7
prof_disk_thetaerr	types.h	/^  float		prof_disk_thetaerr;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_disk_thetaerrw	types.h	/^  float		prof_disk_thetaerrw;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_disk_thetas	types.h	/^  float		prof_disk_thetas;		\/* Sky disk position angle *\/$/;"	m	struct:__anon7
prof_disk_thetaw	types.h	/^  float		prof_disk_thetaw;		\/* WORLD disk position angle *\/$/;"	m	struct:__anon7
prof_e1	types.h	/^  float		prof_e1, prof_e2;		\/* Profile model ellip.vector *\/$/;"	m	struct:__anon7
prof_e2	types.h	/^  float		prof_e1, prof_e2;		\/* Profile model ellip.vector *\/$/;"	m	struct:__anon7
prof_end	profit.c	/^void	prof_end(profstruct *prof)$/;"	f
prof_eps1	types.h	/^  float		prof_eps1, prof_eps2;		\/* Profile model ellip.vector *\/$/;"	m	struct:__anon7
prof_eps2	types.h	/^  float		prof_eps1, prof_eps2;		\/* Profile model ellip.vector *\/$/;"	m	struct:__anon7
prof_errvector	types.h	/^  float		*prof_errvector;		\/* Profile parameter errors *\/$/;"	m	struct:__anon7
prof_errvectorsize	prefs.h	/^  int		prof_errvectorsize;			\/* nb of params *\/$/;"	m	struct:__anon44
prof_flag	prefs.h	/^  int		prof_flag;				\/* Profile-fitting *\/$/;"	m	struct:__anon44
prof_flag	types.h	/^  BYTE		prof_flag;			\/* Model-fitting flags *\/$/;"	m	struct:__anon7
prof_flagw	types.h	/^  BYTE		prof_flagw;			\/* Model-fitting WORLD flag *\/$/;"	m	struct:__anon7
prof_init	profit.c	/^profstruct	*prof_init(profitstruct *profit, proftypenum profcode)$/;"	f
prof_interpolate	profit.c	/^static double	prof_interpolate(profstruct *prof, double *posin)$/;"	f	file:
prof_mx2	types.h	/^  double	prof_mx2, prof_my2, prof_mxy;	\/* Profile model moments *\/$/;"	m	struct:__anon7
prof_mx2w	types.h	/^  double	prof_mx2w, prof_my2w, prof_mxyw;\/* WORLD profile model moments*\/$/;"	m	struct:__anon7
prof_mxy	types.h	/^  double	prof_mx2, prof_my2, prof_mxy;	\/* Profile model moments *\/$/;"	m	struct:__anon7
prof_mxyw	types.h	/^  double	prof_mx2w, prof_my2w, prof_mxyw;\/* WORLD profile model moments*\/$/;"	m	struct:__anon7
prof_my2	types.h	/^  double	prof_mx2, prof_my2, prof_mxy;	\/* Profile model moments *\/$/;"	m	struct:__anon7
prof_my2w	types.h	/^  double	prof_mx2w, prof_my2w, prof_mxyw;\/* WORLD profile model moments*\/$/;"	m	struct:__anon7
prof_niter	types.h	/^  short		prof_niter;			\/* # of model-fitting iter. *\/$/;"	m	struct:__anon7
prof_offset_flux	types.h	/^  float		prof_offset_flux;		\/* Background offset *\/$/;"	m	struct:__anon7
prof_offset_fluxerr	types.h	/^  float		prof_offset_fluxerr;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_spheroid_aspect	types.h	/^  float		prof_spheroid_aspect;		\/* Spheroid aspect ratio *\/$/;"	m	struct:__anon7
prof_spheroid_aspecterr	types.h	/^  float		prof_spheroid_aspecterr;	\/* RMS error *\/$/;"	m	struct:__anon7
prof_spheroid_aspecterrw	types.h	/^  float		prof_spheroid_aspecterrw;	\/* RMS error *\/$/;"	m	struct:__anon7
prof_spheroid_aspectw	types.h	/^  float		prof_spheroid_aspectw;		\/* WORLD spheroid aspect ratio*\/$/;"	m	struct:__anon7
prof_spheroid_flux	types.h	/^  float		prof_spheroid_flux;		\/* Spheroid total flux *\/$/;"	m	struct:__anon7
prof_spheroid_fluxerr	types.h	/^  float		prof_spheroid_fluxerr;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_spheroid_mag	types.h	/^  float		prof_spheroid_mag;		\/* Spheroid "total" mag *\/$/;"	m	struct:__anon7
prof_spheroid_magerr	types.h	/^  float		prof_spheroid_magerr;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_spheroid_reff	types.h	/^  float		prof_spheroid_reff;		\/* Spheroid effective radius *\/$/;"	m	struct:__anon7
prof_spheroid_refferr	types.h	/^  float		prof_spheroid_refferr;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_spheroid_refferrw	types.h	/^  float		prof_spheroid_refferrw;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_spheroid_reffw	types.h	/^  float		prof_spheroid_reffw;		\/* WORLD spheroid eff. radius *\/$/;"	m	struct:__anon7
prof_spheroid_sersicn	types.h	/^  float		prof_spheroid_sersicn;		\/* Spheroid Sersic index *\/$/;"	m	struct:__anon7
prof_spheroid_sersicnerr	types.h	/^  float		prof_spheroid_sersicnerr;	\/* RMS error *\/$/;"	m	struct:__anon7
prof_spheroid_theta	types.h	/^  float		prof_spheroid_theta;		\/* Spheroid position angle *\/$/;"	m	struct:__anon7
prof_spheroid_theta1950	types.h	/^  float		prof_spheroid_theta1950;	\/* B1950 spheroid pos. angle *\/$/;"	m	struct:__anon7
prof_spheroid_theta2000	types.h	/^  float		prof_spheroid_theta2000;	\/* J2000 spheroid pos. angle *\/$/;"	m	struct:__anon7
prof_spheroid_thetaerr	types.h	/^  float		prof_spheroid_thetaerr;		\/* RMS error *\/$/;"	m	struct:__anon7
prof_spheroid_thetaerrw	types.h	/^  float		prof_spheroid_thetaerrw;	\/* RMS error *\/$/;"	m	struct:__anon7
prof_spheroid_thetas	types.h	/^  float		prof_spheroid_thetas;		\/* Sky spheroid pos. angle *\/$/;"	m	struct:__anon7
prof_spheroid_thetaw	types.h	/^  float		prof_spheroid_thetaw;		\/* WORLD spheroid pos. angle *\/$/;"	m	struct:__anon7
prof_vector	types.h	/^  float		*prof_vector;			\/* Profile parameters *\/$/;"	m	struct:__anon7
prof_vectorsize	prefs.h	/^  int		prof_vectorsize;			\/* nb of params *\/$/;"	m	struct:__anon44
profit_addparam	profit.c	/^void	profit_addparam(profitstruct *profit, paramenum paramindex,$/;"	f
profit_boundtounbound	profit.c	/^void	profit_boundtounbound(profitstruct *profit, double *param)$/;"	f
profit_compresi	profit.c	/^double	*profit_compresi(profitstruct *profit, double dynparam, double *resi)$/;"	f
profit_convolve	profit.c	/^void	profit_convolve(profitstruct *profit, double *modpix)$/;"	f
profit_copyobjpix	profit.c	/^int	profit_copyobjpix(profitstruct *profit, picstruct *field,$/;"	f
profit_covarunboundtobound	profit.c	/^void	profit_covarunboundtobound(profitstruct *profit)$/;"	f
profit_end	profit.c	/^void	profit_end(profitstruct *profit)$/;"	f
profit_evaluate	profit.c	/^void	profit_evaluate(double *par, double *fvec, int m, int n,$/;"	f
profit_findinit	profit.c	/^void	profit_findinit(profitstruct *profit)$/;"	f
profit_fit	profit.c	/^void	profit_fit(profitstruct *profit,$/;"	f
profit_init	profit.c	/^profitstruct	*profit_init(psfstruct *psf)$/;"	f
profit_makedft	profit.c	/^void	profit_makedft(profitstruct *profit)$/;"	f
profit_minimize	profit.c	/^int	profit_minimize(profitstruct *profit, int niter)$/;"	f
profit_moments	profit.c	/^void	 profit_moments(profitstruct *profit)$/;"	f
profit_printout	profit.c	/^void	profit_printout(int n_par, double* par, int m_dat, double* fvec,$/;"	f
profit_psf	profit.c	/^void	profit_psf(profitstruct *profit)$/;"	f
profit_resample	profit.c	/^void	profit_resample(profitstruct *profit, double *inpix, PIXTYPE *outpix,$/;"	f
profit_resetparam	profit.c	/^void	profit_resetparam(profitstruct *profit, paramenum paramtype)$/;"	f
profit_resetparams	profit.c	/^void	profit_resetparams(profitstruct *profit)$/;"	f
profit_residuals	profit.c	/^double	*profit_residuals(profitstruct *profit, picstruct *field,$/;"	f
profit_setparam	profit.c	/^int	profit_setparam(profitstruct *profit, paramenum paramtype,$/;"	f
profit_spiralindex	profit.c	/^double profit_spiralindex(profitstruct *profit)$/;"	f
profit_unboundtobound	profit.c	/^void	profit_unboundtobound(profitstruct *profit, double *param)$/;"	f
profitstruct	profit.h	/^  }	profitstruct;$/;"	t	typeref:struct:__anon23
profname	profit.c	/^char		profname[][32]={"background offset", "Sersic spheroid",$/;"	v
profstruct	profit.h	/^  }	profstruct;$/;"	t	typeref:struct:__anon22
proftypenum	profit.h	/^				proftypenum; \/* Profile code *\/$/;"	t	typeref:enum:__anon19
program_transform_name	Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	fits/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	levmar/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	wcs/Makefile	/^program_transform_name = s,x,x,$/;"	m
projp	fitswcs.h	/^  double	*projp;			\/* FITS PV\/PROJP mapping parameters *\/$/;"	m	struct:wcs
proto	som.h	/^  float		*proto;			\/* Current composite prototype *\/$/;"	m	struct:__anon25
psdir	Makefile	/^psdir = ${docdir}$/;"	m
psdir	fits/Makefile	/^psdir = ${docdir}$/;"	m
psdir	levmar/Makefile	/^psdir = ${docdir}$/;"	m
psdir	wcs/Makefile	/^psdir = ${docdir}$/;"	m
psf	profit.h	/^  struct psf	*psf;		\/* PSF *\/$/;"	m	struct:__anon23	typeref:struct:__anon23::psf
psf	psf.h	/^psfstruct	*psf,*ppsf,*thepsf;$/;"	v
psf	psf.h	/^typedef struct psf$/;"	s
psf_alpha1950size	prefs.h	/^  int		psf_alpha1950size,psf_delta1950size;	\/* nb of params *\/$/;"	m	struct:__anon44
psf_alpha2000size	prefs.h	/^  int		psf_alpha2000size,psf_delta2000size;	\/* nb of params *\/$/;"	m	struct:__anon44
psf_alphassize	prefs.h	/^  int		psf_alphassize,psf_deltassize;		\/* nb of params *\/$/;"	m	struct:__anon44
psf_build	psf.c	/^void	psf_build(psfstruct *psf)$/;"	f
psf_delta1950size	prefs.h	/^  int		psf_alpha1950size,psf_delta1950size;	\/* nb of params *\/$/;"	m	struct:__anon44
psf_delta2000size	prefs.h	/^  int		psf_alpha2000size,psf_delta2000size;	\/* nb of params *\/$/;"	m	struct:__anon44
psf_deltassize	prefs.h	/^  int		psf_alphassize,psf_deltassize;		\/* nb of params *\/$/;"	m	struct:__anon44
psf_end	psf.c	/^void	psf_end(psfstruct *psf, psfitstruct *psfit)$/;"	f
psf_fit	psf.c	/^void	psf_fit(psfstruct *psf, picstruct *field, picstruct *wfield,$/;"	f
psf_flag	prefs.h	/^  int		psf_flag;				\/* PSF-fit needed *\/$/;"	m	struct:__anon44
psf_fluxerrsize	prefs.h	/^  int		psf_fluxerrsize;			\/* nb of params *\/$/;"	m	struct:__anon44
psf_fluxsize	prefs.h	/^  int		psf_fluxsize;				\/* nb of params *\/$/;"	m	struct:__anon44
psf_init	psf.c	/^void	psf_init(psfstruct *psf)$/;"	f
psf_laguerre	pattern.c	/^static double	psf_laguerre(double x, int p, int q)$/;"	f	file:
psf_load	psf.c	/^psfstruct	*psf_load(char *filename)$/;"	f
psf_magerrsize	prefs.h	/^  int		psf_magerrsize;				\/* nb of params *\/$/;"	m	struct:__anon44
psf_magsize	prefs.h	/^  int		psf_magsize;				\/* nb of params *\/$/;"	m	struct:__anon44
psf_name	prefs.h	/^  char		*(psf_name[2]);				\/* PSF filename *\/$/;"	m	struct:__anon44
psf_name	types.h	/^  char		psf_name[MAXCHAR];			\/* PSF filename*\/$/;"	m	struct:__anon9
psf_npsfmax	prefs.h	/^  int		psf_npsfmax;				\/* Max # of PSFs *\/$/;"	m	struct:__anon44
psf_readcontext	psf.c	/^void	psf_readcontext(psfstruct *psf, picstruct *field)$/;"	f
psf_xsize	prefs.h	/^  int		psf_xsize,psf_ysize;			\/* nb of params *\/$/;"	m	struct:__anon44
psf_xwsize	prefs.h	/^  int		psf_xwsize,psf_ywsize;			\/* nb of params *\/$/;"	m	struct:__anon44
psf_ysize	prefs.h	/^  int		psf_xsize,psf_ysize;			\/* nb of params *\/$/;"	m	struct:__anon44
psf_ywsize	prefs.h	/^  int		psf_xwsize,psf_ywsize;			\/* nb of params *\/$/;"	m	struct:__anon44
psfdft	profit.h	/^  double	*psfdft;	\/* Compressed Fourier Transform of the PSF *\/$/;"	m	struct:__anon23
psfdisplay_type	prefs.h	/^  psfdisplaytype psfdisplay_type;			\/* PSF display type *\/$/;"	m	struct:__anon44
psfdisplaytype	prefs.h	/^typedef enum	{PSFDISPLAY_SPLIT, PSFDISPLAY_VECTOR} psfdisplaytype;$/;"	t	typeref:enum:__anon43
psfit	psf.h	/^psfitstruct	*thepsfit,*ppsfit,*psfit;$/;"	v
psfitstruct	psf.h	/^  }	psfitstruct;$/;"	t	typeref:struct:__anon24
psfpix	profit.h	/^  double	*psfpix;	\/* Full res. pixmap of the PSF *\/$/;"	m	struct:__anon23
psfstruct	psf.h	/^  }	psfstruct;$/;"	t	typeref:struct:psf
psstack	extract.c	/^static status		*psstack;$/;"	v	file:
ptr	fits/fitscat.h	/^  void		*ptr;			\/* pointer to the data *\/$/;"	m	struct:structkey
ptr	key.h	/^  void		*ptr;			\/* Pointer to the keyword value *\/$/;"	m	struct:__anon17
qerror	wcs/poly.c	/^void	qerror(char *msg1, char *msg2)$/;"	f
qscale	back.h	/^  float		qzero, qscale;		\/* Position of histogram *\/$/;"	m	struct:structback
qscfwd	wcs/proj.c	/^int qscfwd(phi, theta, prj, x, y)$/;"	f
qscrev	wcs/proj.c	/^int qscrev(x, y, prj, phi, theta)$/;"	f
qscset	wcs/proj.c	/^int qscset(prj)$/;"	f
qzero	back.h	/^  float		qzero, qscale;		\/* Position of histogram *\/$/;"	m	struct:structback
r	pattern.h	/^  double	*r;			\/* Reduced radius *\/$/;"	m	struct:__anon12
r0	fitswcs.h	/^  double	r0;			\/* projection "radius" *\/$/;"	m	struct:wcs
r0	wcs/proj.h	/^   double r0;$/;"	m	struct:prjprm
r2d	wcs/wcstrig.c	/^const double r2d = 180.0 \/ PI;$/;"	v
radecsys	fitswcs.h	/^		radecsys;		\/* FITS RADECSYS reference frame *\/$/;"	m	struct:wcs	typeref:enum:wcs::__anon15
radius	assoc.h	/^  float		radius;			\/* Radius of search for association *\/$/;"	m	struct:structassoc
range_wcs	fitswcs.c	/^void	range_wcs(wcsstruct *wcs)$/;"	f
raw_to_pv	wcs/proj.c	/^int raw_to_pv(struct prjprm *prj, double x, double y, double *xo, double *yo)$/;"	f
raw_to_red	fitswcs.c	/^int	raw_to_red(wcsstruct *wcs, double *pixpos, double *redpos)$/;"	f
raw_to_tnxaxis	wcs/tnx.c	/^double	raw_to_tnxaxis(tnxaxisstruct *axis, double x, double y)$/;"	f
raw_to_wcs	fitswcs.c	/^int	raw_to_wcs(wcsstruct *wcs, double *pixpos, double *wcspos)$/;"	f
read_body	fits/fitsbody.c	/^void	read_body(tabstruct *tab, PIXTYPE *ptr, size_t size)$/;"	f
read_cat	fits/fitsread.c	/^catstruct	*read_cat(char *filename)$/;"	f
read_cats	fits/fitsread.c	/^catstruct	*read_cats(char **filenames, int ncat)$/;"	f
read_ibody	fits/fitsbody.c	/^void	read_ibody(tabstruct *tab, FLAGTYPE *ptr, size_t size)$/;"	f
read_key	fits/fitskey.c	/^keystruct *read_key(tabstruct *tab, char *keyname)$/;"	f
read_keys	fits/fitskey.c	/^void	read_keys(tabstruct *tab, char **keynames, keystruct **keys, int nkeys,$/;"	f
read_obj	fits/fitsread.c	/^int	read_obj(tabstruct *keytab, tabstruct *tab, char *buf)$/;"	f
read_obj_at	fits/fitsread.c	/^int	read_obj_at(tabstruct *keytab, tabstruct *tab, char *buf, long pos)$/;"	f
read_tnxaxis	wcs/tnx.c	/^tnxaxisstruct	*read_tnxaxis(char *tnxstr)$/;"	f
read_wcs	fitswcs.c	/^wcsstruct	*read_wcs(tabstruct *tab)$/;"	f
readbasic_head	fits/fitshead.c	/^void	readbasic_head(tabstruct *tab)$/;"	f
readbintabparam_head	fits/fitshead.c	/^int	readbintabparam_head(tabstruct *tab)$/;"	f
readcatparams	catout.c	/^void	readcatparams(char *filename)$/;"	f
readimagehead	readimage.c	/^void readimagehead(picstruct *field) {$/;"	f
readprefs	prefs.c	/^void    readprefs(char *filename, char **argkey, char **argval, int narg)$/;"	f
readretina	retina.c	/^float    readretina(picstruct *field, retistruct *retina, float x, float y)$/;"	f
reaxe_wcs	fitswcs.c	/^int	reaxe_wcs(wcsstruct *wcs, int lng, int lat)$/;"	f
red_to_raw	fitswcs.c	/^int	red_to_raw(wcsstruct *wcs, double *redpos, double *pixpos)$/;"	f
reendcat	catout.c	/^void	reendcat()$/;"	f
reendcheck	check.c	/^void	reendcheck(picstruct *field, checkstruct *check)$/;"	f
ref	wcs/cel.h	/^   double ref[4];$/;"	m	struct:celprm
reffield	types.h	/^  struct pic	*reffield;	       	\/* pointer to a reference field *\/$/;"	m	struct:pic	typeref:struct:pic::pic
reinitcat	catout.c	/^void	reinitcat(picstruct *field)$/;"	f
reinitcheck	check.c	/^void	reinitcheck(picstruct *field, checkstruct *check)$/;"	f
remove_cleanupfilename	fits/fitscleanup.c	/^void	remove_cleanupfilename(char *filename)$/;"	f
remove_key	fits/fitskey.c	/^int	remove_key(tabstruct *tab, char *keyname)$/;"	f
remove_keys	fits/fitskey.c	/^int	remove_keys(tabstruct *tab)$/;"	f
remove_tab	fits/fitstab.c	/^int	remove_tab(catstruct *cat, char *tabname, int seg)$/;"	f
remove_tabs	fits/fitstab.c	/^int	remove_tabs(catstruct *cat)$/;"	f
removekeywordfrom_head	fits/fitshead.c	/^int	removekeywordfrom_head(tabstruct *tab, char *keyword)$/;"	f
resi	profit.h	/^  double	*resi;		\/* Vector of residuals *\/$/;"	m	struct:__anon23
retina_name	prefs.h	/^  char		retina_name[MAXCHAR];			\/* retina filename *\/$/;"	m	struct:__anon44
retistruct	retina.h	/^  }     retistruct;$/;"	t	typeref:struct:structreti
rfilename	types.h	/^  char		*rfilename;		\/* pointer to the reduced image name *\/$/;"	m	struct:pic
rident	types.h	/^  char		rident[MAXCHAR];	\/* field identifier (relative) *\/$/;"	m	struct:pic
rmax	pattern.h	/^  double	rmax;			\/* Largest radius in units of scale *\/$/;"	m	struct:__anon12
ros	levmar/lmdemo.c	/^void ros(double *p, double *x, int m, int n, void *data)$/;"	f
satur_key	prefs.h	/^  char		satur_key[8];				\/* saturation keyword *\/$/;"	m	struct:__anon44
satur_level	prefs.h	/^  double	satur_level;				\/* saturation level *\/$/;"	m	struct:__anon44
satur_level	types.h	/^   double	satur_level;		\/* saturation level in ADUs *\/$/;"	m	struct:pic
satur_level	xml.h	/^  double	satur_level[2];				\/* saturation level *\/$/;"	m	struct:__anon10
save_cat	fits/fitswrite.c	/^void	save_cat(catstruct *cat, char *filename)$/;"	f
save_head	fits/fitswrite.c	/^int	save_head(catstruct *cat, tabstruct *tab)$/;"	f
save_tab	fits/fitswrite.c	/^void	save_tab(catstruct *cat, tabstruct *tab)$/;"	f
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	fits/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	levmar/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	wcs/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
scale	profit.h	/^  double	*scale;			\/* Scaling vector *\/$/;"	m	struct:__anon22
scanimage	scan.c	/^void	scanimage(picstruct *field, picstruct **pffield, int nffield)$/;"	f
sdate_end	prefs.h	/^  char		sdate_end[12];				\/* SCAMP end date *\/$/;"	m	struct:__anon44
sdate_start	prefs.h	/^  char		sdate_start[12];			\/* SCAMP start date *\/$/;"	m	struct:__anon44
seeing_fwhm	prefs.h	/^  double	seeing_fwhm;				\/* in arcsec *\/$/;"	m	struct:__anon44
seg	fits/fitscat.h	/^  int		seg;			\/* segment position *\/$/;"	m	struct:structtab
selectext	makeit.c	/^static int	selectext(char *filename)$/;"	f	file:
set_maxram	fits/fitsbody.c	/^int set_maxram(size_t maxram)$/;"	f
set_maxvram	fits/fitsbody.c	/^int set_maxvram(size_t maxvram)$/;"	f
set_swapdir	fits/fitsbody.c	/^int set_swapdir(char *dirname)$/;"	f
sex_DEPENDENCIES	Makefile	/^sex_DEPENDENCIES = $(top_builddir)\/src\/fits\/libfits.a \\$/;"	m
sex_LDADD	Makefile	/^sex_LDADD = $(top_builddir)\/src\/fits\/libfits.a \\$/;"	m
sex_OBJECTS	Makefile	/^sex_OBJECTS = $(am_sex_OBJECTS)$/;"	m
sex_SOURCES	Makefile	/^sex_SOURCES = analyse.c assoc.c astrom.c back.c bpro.c catout.c \\$/;"	m
sexcatstruct	types.h	/^  }		sexcatstruct;$/;"	t	typeref:struct:__anon9
sexcircle	graph.c	/^void	sexcircle(PIXTYPE *bmp, int w, int h, double x, double y, double r,$/;"	f
sexdraw	graph.c	/^void	sexdraw(PIXTYPE *bmp, int w, int h, double sexx2, double sexy2,$/;"	f
sexellips	graph.c	/^void	sexellips(PIXTYPE *bmp, int w, int h, double x, double y, double a,$/;"	f
sexmove	graph.c	/^void	sexmove(double x, double y)$/;"	f
sextodegal	fitswcs.c	/^double  sextodegal(char *hms)$/;"	f
sextodegde	fitswcs.c	/^double  sextodegde(char *dms)$/;"	f
sexx1	graph.c	/^double	sexx1, sexy1;$/;"	v
sexy1	graph.c	/^double	sexx1, sexy1;$/;"	v
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	fits/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	levmar/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	wcs/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
show_keys	fits/fitskey.c	/^void	show_keys(tabstruct *tab, char **keynames, keystruct **keys, int nkeys,$/;"	f
sigamp	som.h	/^  float		amp, sigamp;		\/* Best fitting amplitude and error *\/$/;"	m	struct:__anon25
sigbkg	cuda/cudatypes.h	/^  float		bkg, dbkg, sigbkg;		\/* Background stats (ADU) *\/$/;"	m	struct:__anon1
sigbkg	types.h	/^  float		bkg, dbkg, sigbkg;		\/* Background stats (ADU) *\/$/;"	m	struct:__anon6
sigfac	types.h	/^  float		sigfac;			\/* scaling RMS factor (for WEIGHTs) *\/$/;"	m	struct:pic
sigfac	xml.h	/^  float		sigfac[2];				\/* mean weight scaling*\/$/;"	m	struct:__anon10
sigma	back.h	/^  float		mode, mean, sigma;	\/* Background mode, mean and sigma *\/$/;"	m	struct:structback
sigma	profit.h	/^  double	sigma;		\/* Standard deviation of the pixel values *\/$/;"	m	struct:__anon23
sigma	types.h	/^  float		*sigma;			\/* ptr to the sigma map *\/$/;"	m	struct:pic
signal_function	fits/fitscleanup.c	/^void	signal_function(int signum)$/;"	f
sinfwd	wcs/proj.c	/^int sinfwd(phi, theta, prj, x, y)$/;"	f
singuflag	cuda/cudatypes.h	/^  BYTE		singuflag;			\/* flags for singularities *\/$/;"	m	struct:__anon1
singuflag	types.h	/^  BYTE		singuflag;			\/* flags for singularities *\/$/;"	m	struct:__anon6
sinrev	wcs/proj.c	/^int sinrev (x, y, prj, phi, theta)$/;"	f
sinset	wcs/proj.c	/^int sinset(prj)$/;"	f
size	pattern.h	/^  int		size[3];		\/* Pixmap size for each axis *\/$/;"	m	struct:__anon12
skycathead	sexheadsc.h	/^char	skycathead[] = "QueryResult\\n\\n"$/;"	v
skycattail	sexheadsc.h	/^char	skycattail[] = "[EOD]";$/;"	v
soft_name	types.h	/^  char		soft_name[MAXCHAR];			\/* Sextractor version*\/$/;"	m	struct:__anon9
som_conjgrad	som.c	/^void som_conjgrad(somstruct *som, float ftol)$/;"	f
som_end	som.c	/^void	som_end(somstruct *som)$/;"	f
som_err	som.c	/^float	som_err(somstruct *som, float dist, int flags)$/;"	f
som_linmin	som.c	/^float	som_linmin(somstruct *som)$/;"	f
som_load	som.c	/^somstruct	*som_load(char *filename)$/;"	f
som_mkweight	som.c	/^int	som_mkweight(somstruct *som, float back, float backnoise, float gain)$/;"	f
som_name	prefs.h	/^  char		som_name[MAXCHAR];			\/* SOM filename *\/$/;"	m	struct:__anon44
som_phot	som.c	/^void	som_phot(somstruct *som, float back, float backnoise, float gain,$/;"	f
somfit_flag	prefs.h	/^  int		somfit_flag;				\/* ASSOCiation flag *\/$/;"	m	struct:__anon44
somfit_vectorsize	prefs.h	/^  int		somfit_vectorsize;			\/* SOMfit vec. size *\/$/;"	m	struct:__anon44
somstruct	som.h	/^  }	somstruct;$/;"	t	typeref:struct:__anon25
son	refine.c	/^static short *son, *ok;$/;"	v	file:
sort_assoc	assoc.c	/^void  sort_assoc(picstruct *field, assocstruct *assoc)$/;"	f
sortit	scan.c	/^void  sortit(picstruct *field, picstruct *dfield, picstruct *wfield,$/;"	f
sphfwd	wcs/sph.c	/^int sphfwd (lng, lat, eul, phi, theta)$/;"	f
sphrev	wcs/sph.c	/^int sphrev (phi, theta, eul, lng, lat)$/;"	f
spirindex	profit.h	/^  double	spirindex;	\/* Spiral index (>0 for CCW) *\/$/;"	m	struct:__anon23
sposx	types.h	/^  float		sposx,sposy;			\/* single precision pos. *\/$/;"	m	struct:__anon7
sposy	types.h	/^  float		sposx,sposy;			\/* single precision pos. *\/$/;"	m	struct:__anon7
sprob	types.h	/^  float		sprob;				\/* Stellarity index *\/$/;"	m	struct:__anon7
srcdir	Makefile	/^srcdir = .$/;"	m
srcdir	fits/Makefile	/^srcdir = .$/;"	m
srcdir	levmar/Makefile	/^srcdir = .$/;"	m
srcdir	wcs/Makefile	/^srcdir = .$/;"	m
start	extract.c	/^static int		*start, *end, *discan, xmin,ymin,xmax,ymax;$/;"	v	file:
start	makeit.c	/^clock_t			start, end;$/;"	v
start_endobj	scan.c	/^clock_t start_endobj, end_endobj;$/;"	v
status	extract.h	/^				status;	\/* Extraction status *\/$/;"	t	typeref:enum:__anon2
stderr_somfit	types.h	/^  float		stderr_somfit;			\/* Fitting reduced error *\/$/;"	m	struct:__anon7
stderror	som.h	/^  float		stderror;		\/* Global reduced error *\/$/;"	m	struct:__anon25
stg	globals.h	/^float			ctg[37], stg[37];$/;"	v
stgfwd	wcs/proj.c	/^int stgfwd(phi, theta, prj, x, y)$/;"	f
stgrev	wcs/proj.c	/^int stgrev(x, y, prj, phi, theta)$/;"	f
stgset	wcs/proj.c	/^int stgset(prj)$/;"	f
stime_end	prefs.h	/^  char		stime_end[12];				\/* SCAMP end time *\/$/;"	m	struct:__anon44
stime_start	prefs.h	/^  char		stime_start[12];			\/* SCAMP start time *\/$/;"	m	struct:__anon44
store	extract.c	/^static infostruct	*info, *store;$/;"	v	file:
strip	types.h	/^  PIXTYPE	*strip;			\/* pointer to the image buffer *\/$/;"	m	struct:pic
stripheight	types.h	/^  int		stripheight;		\/* height  of a strip (in lines) *\/$/;"	m	struct:pic
stripmargin	types.h	/^  int		stripmargin;		\/* number of lines in margin *\/$/;"	m	struct:pic
stripstep	types.h	/^  int		stripstep;		\/* number of lines at each read *\/$/;"	m	struct:pic
stripy	types.h	/^  int		stripy;			\/* y position in buffer *\/$/;"	m	struct:pic
stripylim	types.h	/^  int		stripylim;		\/* y limit in buffer *\/$/;"	m	struct:pic
stripysclim	types.h	/^  int		stripysclim;		\/* y scroll limit in buffer *\/$/;"	m	struct:pic
structassoc	assoc.h	/^typedef struct structassoc$/;"	s
structback	back.h	/^typedef struct structback$/;"	s
structbpann	bpro.h	/^typedef	struct structbpann$/;"	s
structcat	fits/fitscat.h	/^typedef struct structcat$/;"	s
structcheck	check.h	/^typedef struct structcheck$/;"	s
structfilter	filter.h	/^typedef struct structfilter$/;"	s
structinfo	extract.h	/^typedef struct structinfo$/;"	s
structkey	fits/fitscat.h	/^typedef struct structkey$/;"	s
structreti	retina.h	/^typedef struct structreti$/;"	s
structtab	fits/fitscat.h	/^typedef struct structtab$/;"	s
subbackline	back.c	/^void	subbackline(picstruct *field, int y, PIXTYPE *line)$/;"	f
subcleanobj	clean.c	/^void	subcleanobj(int objnb)$/;"	f
subdir	Makefile	/^subdir = src$/;"	m
subdir	fits/Makefile	/^subdir = src\/fits$/;"	m
subdir	levmar/Makefile	/^subdir = src\/levmar$/;"	m
subdir	wcs/Makefile	/^subdir = src\/wcs$/;"	m
subh	cuda/cudatypes.h	/^  int		subx,suby, subw,subh;		\/* sub-image pos. and size *\/$/;"	m	struct:__anon1
subh	types.h	/^  int		subx,suby, subw,subh;		\/* sub-image pos. and size *\/$/;"	m	struct:__anon6
submap	cuda/cudatypes.h	/^  int		*submap;			\/* Pixel-index sub-map *\/$/;"	m	struct:__anon1
submap	types.h	/^  int		*submap;			\/* Pixel-index sub-map *\/$/;"	m	struct:__anon6
subw	cuda/cudatypes.h	/^  int		subx,suby, subw,subh;		\/* sub-image pos. and size *\/$/;"	m	struct:__anon1
subw	types.h	/^  int		subx,suby, subw,subh;		\/* sub-image pos. and size *\/$/;"	m	struct:__anon6
subx	cuda/cudatypes.h	/^  int		subx,suby, subw,subh;		\/* sub-image pos. and size *\/$/;"	m	struct:__anon1
subx	types.h	/^  int		subx,suby, subw,subh;		\/* sub-image pos. and size *\/$/;"	m	struct:__anon6
suby	cuda/cudatypes.h	/^  int		subx,suby, subw,subh;		\/* sub-image pos. and size *\/$/;"	m	struct:__anon1
suby	types.h	/^  int		subx,suby, subw,subh;		\/* sub-image pos. and size *\/$/;"	m	struct:__anon6
sum_endobj	scan.c	/^clock_t sum_endobj = 0;$/;"	v
svdfit	psf.c	/^void svdfit(double *a, double *b, int m, int n, double *sol,$/;"	f
svdsolve	wcs/poly.c	/^void svdsolve(double *a, double *b, int m, int n, double *vmat, double *wmat)$/;"	f
svdvar	psf.c	/^void svdvar(double *v, double *w, int n, double *cov)$/;"	f
swapbytes	fits/fitsmisc.c	/^void    swapbytes(void *ptr, int nb, int n)$/;"	f
swapflag	fits/fitscat.h	/^  int		swapflag;		\/* mapped to a swap file ? *\/$/;"	m	struct:structtab
swapname	fits/fitscat.h	/^  char		swapname[MAXCHARS];	\/* name of the swapfile *\/$/;"	m	struct:structtab
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	fits/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	levmar/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	wcs/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
t_size	fits/fitshead.c	/^const int	t_size[] = {1, 2, 4, 4, 8, 1};	\/* size in bytes per t_type *\/$/;"	v
t_type	fits/fitscat.h	/^				t_type;		\/* Type of data *\/$/;"	t	typeref:enum:__anon27
tab	fits/fitscat.h	/^  struct structtab	*tab;		\/* (original) parent tab *\/$/;"	m	struct:structkey	typeref:struct:structkey::structtab
tab	fits/fitscat.h	/^  struct structtab *tab;		\/* pointer to the first table *\/$/;"	m	struct:structcat	typeref:struct:structcat::structtab
tab	types.h	/^  tabstruct	*tab;			\/* FITS extension structure *\/$/;"	m	struct:pic
tab_row_len	fits/fitstab.c	/^int tab_row_len(char *file, char *tabname)$/;"	f
tabs_list	fits/fitstab.c	/^char **tabs_list(catstruct *cat, int *n)$/;"	f
tabsize	fits/fitscat.h	/^  KINGSIZE_T	tabsize;		\/* total table size (bytes) *\/$/;"	m	struct:structtab
tabstruct	fits/fitscat.h	/^  }		tabstruct;$/;"	t	typeref:struct:structtab
tanfwd	wcs/proj.c	/^int tanfwd(phi, theta, prj, x, y)$/;"	f
tanrev	wcs/proj.c	/^int tanrev(x, y, prj, phi, theta)$/;"	f
tanset	wcs/proj.c	/^int tanset(prj)$/;"	f
target_alias	Makefile	/^target_alias = $/;"	m
target_alias	fits/Makefile	/^target_alias = $/;"	m
target_alias	levmar/Makefile	/^target_alias = $/;"	m
target_alias	wcs/Makefile	/^target_alias = $/;"	m
tdisptoprintf	fits/fitshead.c	/^char	*tdisptoprintf(char *tdisp, char *str)$/;"	f
tfields	fits/fitscat.h	/^  int		tfields;		\/* number of fields *\/$/;"	m	struct:structtab
tformof	fits/fitshead.c	/^int	tformof(char *str, t_type ttype, int n)$/;"	f
the_field	profit.c	/^static picstruct	*the_field, *the_wfield;$/;"	v	file:
the_gal	profit.c	/^int theniter, the_gal;$/;"	v
the_wfield	profit.c	/^static picstruct	*the_field, *the_wfield;$/;"	v	file:
thecat	globals.h	/^sexcatstruct		thecat;$/;"	v
thefield1	globals.h	/^picstruct		thefield1,thefield2, thewfield1,thewfield2;$/;"	v
thefield2	globals.h	/^picstruct		thefield1,thefield2, thewfield1,thewfield2;$/;"	v
thefilter	filter.h	/^filterstruct	*thefilter;$/;"	v
theniter	profit.c	/^int theniter, the_gal;$/;"	v
theprofit	profit.c	/^profitstruct		*theprofit;$/;"	v
thepsf	psf.h	/^psfstruct	*psf,*ppsf,*thepsf;$/;"	v
thepsfit	psf.h	/^psfitstruct	*thepsfit,*ppsfit,*psfit;$/;"	v
theretina	retina.h	/^retistruct	*theretina;$/;"	v
thesom	som.h	/^somstruct	*thesom;$/;"	v
theta	cuda/cudatypes.h	/^  float		a, b, theta, abcor;		\/* moments and angle *\/$/;"	m	struct:__anon1
theta	types.h	/^  float		a, b, theta, abcor;		\/* moments and angle *\/$/;"	m	struct:__anon6
theta1950	types.h	/^  float		theta1950;			\/* B1950 position angle E\/N *\/$/;"	m	struct:__anon7
theta2000	types.h	/^  float		theta2000;			\/* J2000 position angle E\/N *\/$/;"	m	struct:__anon7
theta_pc	types.h	/^  float		a_pc,b_pc,theta_pc;		\/* PC shape parameters *\/$/;"	m	struct:__anon7
thetas	types.h	/^  float		thetas;				\/* native position angle E\/N*\/$/;"	m	struct:__anon7
thetaw	types.h	/^  float		thetaw;				\/* WORLD position angle *\/$/;"	m	struct:__anon7
thetimet	makeit.c	/^time_t			thetimet, thetimet2;$/;"	v
thetimet2	makeit.c	/^time_t			thetimet, thetimet2;$/;"	v
thewfield1	globals.h	/^picstruct		thefield1,thefield2, thewfield1,thewfield2;$/;"	v
thewfield2	globals.h	/^picstruct		thefield1,thefield2, thewfield1,thewfield2;$/;"	v
threads_gate_t	threads.h	/^  } threads_gate_t;$/;"	t	typeref:struct:_threads_gate_t
thresh	cuda/cudatypes.h	/^  float		thresh;				\/* measur. threshold (ADU) *\/$/;"	m	struct:__anon1
thresh	prefs.h	/^  double	thresh[2];				\/* analysis thresh. *\/$/;"	m	struct:__anon44
thresh	types.h	/^  PIXTYPE	thresh;			\/* analysis threshold *\/$/;"	m	struct:__anon8
thresh	types.h	/^  PIXTYPE	thresh;			\/* analysis threshold *\/$/;"	m	struct:pic
thresh	types.h	/^  float		thresh;				\/* measur. threshold (ADU) *\/$/;"	m	struct:__anon6
thresh	xml.h	/^  float		thresh[2];				\/* thresholds (ADU) *\/$/;"	m	struct:__anon10
thresh_type	prefs.h	/^  threshtype	thresh_type[2];		\/* bkgnd type *\/$/;"	m	struct:__anon44
threshmu	types.h	/^  float		threshmu;			\/* det. surface brightnees *\/$/;"	m	struct:__anon7
threshtype	prefs.h	/^typedef enum	{THRESH_RELATIVE, THRESH_ABSOLUTE} threshtype;$/;"	t	typeref:enum:__anon33
time_diff	prefs.h	/^  double	time_diff;				\/* Execution time *\/$/;"	m	struct:__anon44
tnx_latcor	fitswcs.h	/^  struct tnxaxis *tnx_latcor;		\/* IRAF's TNX latitude corrections *\/$/;"	m	struct:wcs	typeref:struct:wcs::tnxaxis
tnx_latcor	wcs/proj.h	/^   struct tnxaxis	*tnx_latcor;$/;"	m	struct:prjprm	typeref:struct:prjprm::tnxaxis
tnx_lngcor	fitswcs.h	/^  struct tnxaxis *tnx_lngcor;		\/* IRAF's TNX longitude corrections *\/$/;"	m	struct:wcs	typeref:struct:wcs::tnxaxis
tnx_lngcor	wcs/proj.h	/^   struct tnxaxis	*tnx_lngcor;$/;"	m	struct:prjprm	typeref:struct:prjprm::tnxaxis
tnxaxis	wcs/tnx.h	/^typedef struct tnxaxis$/;"	s
tnxaxisstruct	wcs/tnx.h	/^  }	tnxaxisstruct;$/;"	t	typeref:struct:tnxaxis
tnxfwd	wcs/proj.c	/^int tnxfwd(phi, theta, prj, x, y)$/;"	f
tnxrev	wcs/proj.c	/^int tnxrev(x, y, prj, phi, theta)$/;"	f
tnxset	wcs/proj.c	/^int tnxset(prj)$/;"	f
tol	wcs/sph.c	/^const double tol = 1.0e-5;$/;"	v
top_build_prefix	Makefile	/^top_build_prefix = @top_build_prefix@$/;"	m
top_builddir	Makefile	/^top_builddir = ..$/;"	m
top_builddir	fits/Makefile	/^top_builddir = ..\/..$/;"	m
top_builddir	levmar/Makefile	/^top_builddir = ..\/..$/;"	m
top_builddir	wcs/Makefile	/^top_builddir = ..\/..$/;"	m
top_srcdir	Makefile	/^top_srcdir = ..$/;"	m
top_srcdir	fits/Makefile	/^top_srcdir = ..\/..$/;"	m
top_srcdir	levmar/Makefile	/^top_srcdir = ..\/..$/;"	m
top_srcdir	wcs/Makefile	/^top_srcdir = ..\/..$/;"	m
transform	Makefile	/^transform = $(program_transform_name)$/;"	m
transform	fits/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	levmar/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	wcs/Makefile	/^transform = $(program_transform_name)$/;"	m
tscfwd	wcs/proj.c	/^int tscfwd(phi, theta, prj, x, y)$/;"	f
tscrev	wcs/proj.c	/^int tscrev(x, y, prj, phi, theta)$/;"	f
tscset	wcs/proj.c	/^int tscset(prj)$/;"	f
tsizeof	fits/fitshead.c	/^int	tsizeof(char *str)$/;"	f
ttype	fits/fitscat.h	/^  t_type	ttype;			\/* standard ``t_type'' (storage) *\/$/;"	m	struct:structkey
ttypeconv	fits/fitsconv.c	/^void	ttypeconv(void *ptrin, void *ptrout, t_type ttypein, t_type ttypeout)$/;"	f
ttypeof	fits/fitshead.c	/^t_type	ttypeof(char *str)$/;"	f
type	check.h	/^  checkenum	type;			\/* CHECKIMAGE_TYPE *\/$/;"	m	struct:structcheck
type	key.h	/^	P_BOOLLIST, P_KEYLIST, P_STRINGLIST} type;$/;"	m	struct:__anon17	typeref:enum:__anon17::__anon18
type	pattern.h	/^  pattypenum	type;			\/* Pattern code *\/$/;"	m	struct:__anon12
type	wcs/tnx.h	/^  int		type;			\/* Projection correction type *\/$/;"	m	struct:tnxaxis
typscale	profit.h	/^  double	typscale;		\/* Typical scale in prof pixels *\/$/;"	m	struct:__anon22
ub	levmar/lmblec_core.c	/^  LM_REAL *x, *lb, *ub, *w;$/;"	m	struct:LMBLEC_DATA	file:
unit	fits/fitscat.h	/^  char		unit[80];		\/* physical unit *\/$/;"	m	struct:structkey
update	scan.c	/^void  update(infostruct *infoptr1, infostruct *infoptr2, pliststruct *pixel)$/;"	f
update_head	fits/fitshead.c	/^int	update_head(tabstruct *tab)$/;"	f
update_tab	fits/fitstab.c	/^int	update_tab(tabstruct *tab)$/;"	f
update_xml	xml.c	/^int	update_xml(sexcatstruct *sexcat, picstruct *dfield, picstruct *field,$/;"	f
updateparamflags	catout.c	/^void	updateparamflags()$/;"	f
useprefs	prefs.c	/^void	useprefs()$/;"	f
value	plist.h	/^  PIXTYPE       value;$/;"	m	struct:__anon16
varnorm	filter.h	/^  float		varnorm;$/;"	m	struct:structfilter
vector	som.h	/^  float		*vector;		\/* Current SOM coordinates *\/$/;"	m	struct:__anon25
vector_pc	types.h	/^  float		*vector_pc;			\/* Principal components *\/$/;"	m	struct:__anon7
vector_somfit	types.h	/^  float		*vector_somfit;			\/* SOM fit vector position *\/$/;"	m	struct:__anon7
verbose_type	prefs.h	/^  verbosetype      	verbose_type;	\/* display type *\/$/;"	m	struct:__anon44
verbosetype	prefs.h	/^typedef enum	{QUIET, NORM, WARN, FULL} verbosetype;$/;"	t	typeref:enum:__anon38
verify_checksum	fits/fitscheck.c	/^int	verify_checksum(tabstruct *tab)$/;"	f
vignet	types.h	/^  float		*vignet;			\/* Pixel data *\/$/;"	m	struct:__anon7
vignet_resample	image.c	/^int	vignet_resample(double *pix1, int w1, int h1,$/;"	f
vignetsize	prefs.h	/^  int		vignetsize[2];				\/* vignet size *\/$/;"	m	struct:__anon44
vigshift	types.h	/^  float		*vigshift;			\/* (Shifted) pixel data *\/$/;"	m	struct:__anon7
vigshiftsize	prefs.h	/^  int		vigshiftsize[2];			\/* shift-vignet size *\/$/;"	m	struct:__anon44
voprint_obj	fits/fitswrite.c	/^void	voprint_obj(FILE *stream, tabstruct *tab)$/;"	f
voucd	fits/fitscat.h	/^  char		voucd[80];		\/* VO ucd *\/$/;"	m	struct:structkey
vounit	fits/fitscat.h	/^  char		vounit[80];		\/* VO unit *\/$/;"	m	struct:structkey
w	levmar/lmblec_core.c	/^  LM_REAL *x, *lb, *ub, *w;$/;"	m	struct:LMBLEC_DATA	file:
w	neurro.h	/^	double	w[CONNEX][NEURONS][NEURONS];$/;"	m	struct:__anon13
w	wcs/proj.h	/^   double w[10];$/;"	m	struct:prjprm
warning	fits/fitsmisc.c	/^void    warning(char *msg1, char *msg2)$/;"	f
warning_history	fits/fitsmisc.c	/^char    *warning_history(void)$/;"	f
warning_historystr	fits/fitsmisc.c	/^static char	warning_historystr[WARNING_NMAX][192]={""};$/;"	v	file:
wcs	fitswcs.h	/^typedef struct wcs$/;"	s
wcs	types.h	/^  struct wcs	*wcs;			\/* astrometric data *\/$/;"	m	struct:pic	typeref:struct:pic::wcs
wcs_acosd	wcs/wcstrig.c	/^double wcs_acosd(v)$/;"	f
wcs_acosd	wcs/wcstrig.h	49;"	d
wcs_asind	wcs/wcstrig.c	/^double wcs_asind(v)$/;"	f
wcs_asind	wcs/wcstrig.h	50;"	d
wcs_atan2d	wcs/wcstrig.c	/^double wcs_atan2d(y, x)$/;"	f
wcs_atan2d	wcs/wcstrig.h	52;"	d
wcs_atand	wcs/wcstrig.c	/^double wcs_atand(v)$/;"	f
wcs_atand	wcs/wcstrig.h	51;"	d
wcs_chirality	fitswcs.c	/^int	wcs_chirality(wcsstruct *wcs)$/;"	f
wcs_copysign	wcs/proj.c	230;"	d	file:
wcs_copysign	wcs/sph.c	110;"	d	file:
wcs_cosd	wcs/wcstrig.c	/^double wcs_cosd(angle)$/;"	f
wcs_cosd	wcs/wcstrig.h	46;"	d
wcs_dist	fitswcs.c	/^double	wcs_dist(wcsstruct *wcs, double *wcspos1, double *wcspos2)$/;"	f
wcs_jacobian	fitswcs.c	/^double	wcs_jacobian(wcsstruct *wcs, double *pixpos, double *jacob)$/;"	f
wcs_scale	fitswcs.c	/^double	wcs_scale(wcsstruct *wcs, double *pixpos)$/;"	f
wcs_signbit	wcs/wcs.c	425;"	d	file:
wcs_sind	wcs/wcstrig.c	/^double wcs_sind(angle)$/;"	f
wcs_sind	wcs/wcstrig.h	47;"	d
wcs_supproj	fitswcs.c	/^int	wcs_supproj(char *name)$/;"	f
wcs_tand	wcs/wcstrig.c	/^double wcs_tand(angle)$/;"	f
wcs_tand	wcs/wcstrig.h	48;"	d
wcs_to_raw	fitswcs.c	/^int	wcs_to_raw(wcsstruct *wcs, double *wcspos, double *pixpos)$/;"	f
wcsfwd	wcs/wcs.c	/^int wcsfwd(ctype, wcs, world, crval, cel, phi, theta, prj, imgcrd, lin,$/;"	f
wcsfwd_errmsg	wcs/wcs.c	/^const char *wcsfwd_errmsg[] = {$/;"	v
wcsmax	fitswcs.h	/^  double	wcsmax[NAXIS];		\/* maximum values of WCS coords *\/$/;"	m	struct:wcs
wcsmaxradius	fitswcs.h	/^  double	wcsmaxradius;		\/* Maximum distance to wcsscalepos *\/$/;"	m	struct:wcs
wcsmin	fitswcs.h	/^  double	wcsmin[NAXIS];		\/* minimum values of WCS coords *\/$/;"	m	struct:wcs
wcsmix	wcs/wcs.c	/^int wcsmix(ctype, wcs, mixpix, mixcel, vspan, vstep, viter, world, crval, cel,$/;"	f
wcsmix_errmsg	wcs/wcs.c	/^const char *wcsmix_errmsg[] = {$/;"	v
wcsprm	fitswcs.h	/^  struct wcsprm	*wcsprm;		\/* WCSLIB's wcsprm structure *\/$/;"	m	struct:wcs	typeref:struct:wcs::wcsprm
wcsprm	wcs/wcs.h	/^struct wcsprm {$/;"	s
wcsrev	wcs/wcs.c	/^int wcsrev(ctype, wcs, pixcrd, lin, imgcrd, prj, phi, theta, crval, cel,$/;"	f
wcsrev_errmsg	wcs/wcs.c	/^const char *wcsrev_errmsg[] = {$/;"	v
wcsscale	fitswcs.h	/^  double	wcsscale[NAXIS];	\/* typical pixel scale at center *\/$/;"	m	struct:wcs
wcsscalepos	fitswcs.h	/^  double	wcsscalepos[NAXIS];	\/* WCS coordinates of scaling point *\/$/;"	m	struct:wcs
wcsset	wcs/wcs.c	/^int wcsset (naxis, ctype, wcs)$/;"	f
wcsset_errmsg	wcs/wcs.c	/^const char *wcsset_errmsg[] = {$/;"	v
wcsstruct	fitswcs.h	/^  }	wcsstruct;$/;"	t	typeref:struct:wcs
weight	bpro.h	/^	NFLOAT	**weight;		\/* Weight array (layer,pos in layer) *\/$/;"	m	struct:structbpann
weight	som.h	/^  float		*weight;		\/* Weights *\/$/;"	m	struct:__anon25
weight_flag	prefs.h	/^  int		weight_flag;				\/* do we weight ? *\/$/;"	m	struct:__anon44
weight_thresh	prefs.h	/^  double	weight_thresh[2];      			\/* weight threshlds *\/$/;"	m	struct:__anon44
weight_thresh	types.h	/^  PIXTYPE	weight_thresh;		\/* interpolation threshold *\/$/;"	m	struct:pic
weight_to_var	weight.c	/^void	weight_to_var(picstruct *wfield, PIXTYPE *data, int npix)$/;"	f
weight_type	prefs.h	/^  weightenum	weight_type[2];				\/* weighting scheme *\/$/;"	m	struct:__anon44
weightenum	types.h	/^		weightenum;				\/* WEIGHT_IMAGE type *\/$/;"	t	typeref:enum:__anon5
weightgain_flag	prefs.h	/^  int		weightgain_flag;			\/* weight gain? *\/$/;"	m	struct:__anon44
wflag	cuda/cudatypes.h	/^  BYTE		wflag;				\/* weighted extraction flags *\/$/;"	m	struct:__anon1
wflag	types.h	/^  BYTE		wflag;				\/* weighted extraction flags *\/$/;"	m	struct:__anon6
width	check.h	/^  int		width, height, depth;	\/* size of check-image *\/$/;"	m	struct:structcheck
width	retina.h	/^  int		width, height;	\/* x,y size of the mask *\/$/;"	m	struct:structreti
width	types.h	/^  int		width, height;		\/* x,y size of the field *\/$/;"	m	struct:pic
wimage_name	prefs.h	/^  char		*(wimage_name[2]);       		\/* weight filenames *\/$/;"	m	struct:__anon44
win_a	types.h	/^  float		win_a, win_b,$/;"	m	struct:__anon7
win_aw	types.h	/^  float		win_aw, win_bw,$/;"	m	struct:__anon7
win_b	types.h	/^  float		win_a, win_b,$/;"	m	struct:__anon7
win_bw	types.h	/^  float		win_aw, win_bw,$/;"	m	struct:__anon7
win_cxx	types.h	/^  float		win_cxx, win_cyy,$/;"	m	struct:__anon7
win_cxxw	types.h	/^  float		win_cxxw, win_cyyw,$/;"	m	struct:__anon7
win_cxy	types.h	/^		win_cxy;			\/* Windowed ellipse parameters*\/$/;"	m	struct:__anon7
win_cxyw	types.h	/^		win_cxyw;			\/* WORLD ellipse parameters *\/$/;"	m	struct:__anon7
win_cyy	types.h	/^  float		win_cxx, win_cyy,$/;"	m	struct:__anon7
win_cyyw	types.h	/^  float		win_cxxw, win_cyyw,$/;"	m	struct:__anon7
win_flag	types.h	/^  short		win_flag;			\/* 1:x2<0 2:xy=x2 4:flux<0 *\/$/;"	m	struct:__anon7
win_mx2	types.h	/^  double	win_mx2, win_my2,$/;"	m	struct:__anon7
win_mx2w	types.h	/^  double	win_mx2w, win_my2w,$/;"	m	struct:__anon7
win_mxy	types.h	/^		win_mxy;			\/* Windowed moments *\/$/;"	m	struct:__anon7
win_mxyw	types.h	/^		win_mxyw;			\/* WORLD windowed moments *\/$/;"	m	struct:__anon7
win_my2	types.h	/^  double	win_mx2, win_my2,$/;"	m	struct:__anon7
win_my2w	types.h	/^  double	win_mx2w, win_my2w,$/;"	m	struct:__anon7
win_polar	types.h	/^  float		win_polar;			\/* Windowed "polarization" *\/$/;"	m	struct:__anon7
win_polarw	types.h	/^  float		win_polarw;			\/* WORLD WIN "polarization" *\/$/;"	m	struct:__anon7
win_theta	types.h	/^		win_theta;			\/* Windowed ellipse parameters*\/$/;"	m	struct:__anon7
win_theta1950	types.h	/^  float		win_theta1950;		\/* B1950 error pos. angle *\/$/;"	m	struct:__anon7
win_theta2000	types.h	/^  float		win_theta2000;		\/* J2000 error pos. angle *\/$/;"	m	struct:__anon7
win_thetas	types.h	/^  float		win_thetas;		\/* native error pos. angle *\/$/;"	m	struct:__anon7
win_thetaw	types.h	/^		win_thetaw;			\/* WORLD ellipse parameters *\/$/;"	m	struct:__anon7
winpos_alpha1950	types.h	/^  double	winpos_alpha1950, winpos_delta1950;	\/* B1950 alpha, delta *\/$/;"	m	struct:__anon7
winpos_alpha2000	types.h	/^  double	winpos_alpha2000, winpos_delta2000;	\/* J2000 alpha, delta *\/$/;"	m	struct:__anon7
winpos_alphas	types.h	/^  double	winpos_alphas, winpos_deltas;	\/* native alpha, delta *\/$/;"	m	struct:__anon7
winpos_delta1950	types.h	/^  double	winpos_alpha1950, winpos_delta1950;	\/* B1950 alpha, delta *\/$/;"	m	struct:__anon7
winpos_delta2000	types.h	/^  double	winpos_alpha2000, winpos_delta2000;	\/* J2000 alpha, delta *\/$/;"	m	struct:__anon7
winpos_deltas	types.h	/^  double	winpos_alphas, winpos_deltas;	\/* native alpha, delta *\/$/;"	m	struct:__anon7
winpos_niter	types.h	/^  short		winpos_niter;			\/* Number of WIN iterations *\/$/;"	m	struct:__anon7
winpos_x	types.h	/^  double	winpos_x,winpos_y;		\/* Windowed barycenter *\/$/;"	m	struct:__anon7
winpos_xw	types.h	/^  double	winpos_xw, winpos_yw;		\/* WORLD coordinates *\/$/;"	m	struct:__anon7
winpos_y	types.h	/^  double	winpos_x,winpos_y;		\/* Windowed barycenter *\/$/;"	m	struct:__anon7
winpos_yw	types.h	/^  double	winpos_xw, winpos_yw;		\/* WORLD coordinates *\/$/;"	m	struct:__anon7
winposerr_a	types.h	/^  float		winposerr_a, winposerr_b,$/;"	m	struct:__anon7
winposerr_aw	types.h	/^  float		winposerr_aw, winposerr_bw,$/;"	m	struct:__anon7
winposerr_b	types.h	/^  float		winposerr_a, winposerr_b,$/;"	m	struct:__anon7
winposerr_bw	types.h	/^  float		winposerr_aw, winposerr_bw,$/;"	m	struct:__anon7
winposerr_cxx	types.h	/^  float		winposerr_cxx, winposerr_cyy,$/;"	m	struct:__anon7
winposerr_cxxw	types.h	/^  float		winposerr_cxxw, winposerr_cyyw,$/;"	m	struct:__anon7
winposerr_cxy	types.h	/^		winposerr_cxy;			\/* pos. error ellipse *\/$/;"	m	struct:__anon7
winposerr_cxyw	types.h	/^		winposerr_cxyw;			\/* WORLD error ellipse *\/$/;"	m	struct:__anon7
winposerr_cyy	types.h	/^  float		winposerr_cxx, winposerr_cyy,$/;"	m	struct:__anon7
winposerr_cyyw	types.h	/^  float		winposerr_cxxw, winposerr_cyyw,$/;"	m	struct:__anon7
winposerr_mx2	types.h	/^  double	winposerr_mx2, winposerr_my2,$/;"	m	struct:__anon7
winposerr_mx2w	types.h	/^  double	winposerr_mx2w, winposerr_my2w,$/;"	m	struct:__anon7
winposerr_mxy	types.h	/^		winposerr_mxy;			\/* Error ellips moments *\/$/;"	m	struct:__anon7
winposerr_mxyw	types.h	/^		winposerr_mxyw;			\/* WORLD error moments *\/$/;"	m	struct:__anon7
winposerr_my2	types.h	/^  double	winposerr_mx2, winposerr_my2,$/;"	m	struct:__anon7
winposerr_my2w	types.h	/^  double	winposerr_mx2w, winposerr_my2w,$/;"	m	struct:__anon7
winposerr_theta	types.h	/^		winposerr_theta;		\/* Error ellips parameters *\/$/;"	m	struct:__anon7
winposerr_theta1950	types.h	/^  float		winposerr_theta1950;		\/* B1950 error pos. angle *\/$/;"	m	struct:__anon7
winposerr_theta2000	types.h	/^  float		winposerr_theta2000;		\/* J2000 error pos. angle *\/$/;"	m	struct:__anon7
winposerr_thetas	types.h	/^  float		winposerr_thetas;		\/* native error pos. angle *\/$/;"	m	struct:__anon7
winposerr_thetaw	types.h	/^		winposerr_thetaw;		\/* WORLD error parameters *\/$/;"	m	struct:__anon7
wood	levmar/lmdemo.c	/^void wood(double *p, double *x, int m, int n, void *data)$/;"	f
world_flag	prefs.h	/^  int		world_flag;				\/* WORLD required *\/$/;"	m	struct:__anon44
write_body	fits/fitsbody.c	/^void	write_body(tabstruct *tab, PIXTYPE *ptr, size_t size)$/;"	f
write_checksum	fits/fitscheck.c	/^void	write_checksum(tabstruct *tab)$/;"	f
write_error	makeit.c	/^void	write_error(char *msg1, char *msg2)$/;"	f
write_obj	fits/fitswrite.c	/^int	write_obj(tabstruct *tab, char *buf)$/;"	f
write_vo_fields	catout.c	/^void	write_vo_fields(FILE *file)$/;"	f
write_wcs	fitswcs.c	/^void	write_wcs(tabstruct *tab, wcsstruct *wcs)$/;"	f
write_xml	xml.c	/^int	write_xml(char *filename)$/;"	f
write_xml_header	xml.c	/^int	write_xml_header(FILE *file)$/;"	f
write_xml_meta	xml.c	/^int	write_xml_meta(FILE *file, char *error)$/;"	f
write_xmlerror	xml.c	/^void	write_xmlerror(char *filename, char *error)$/;"	f
writecat	catout.c	/^void	writecat(objstruct *outobj1)$/;"	f
writecheck	check.c	/^void	writecheck(checkstruct *check, PIXTYPE *data, int w)$/;"	f
wstrncmp	fits/fitsmisc.c	/^int	wstrncmp(char *cs, char *ct, int n)$/;"	f
x	levmar/lmbc_core.c	/^  LM_REAL *hx, *x;$/;"	m	struct:FUNC_STATE	file:
x	levmar/lmblec_core.c	/^  LM_REAL *x, *lb, *ub, *w;$/;"	m	struct:LMBLEC_DATA	file:
x	pattern.h	/^  double	x[2];			\/* Coordinate vector *\/$/;"	m	struct:__anon12
x	plist.h	/^  int		x, y;$/;"	m	struct:__anon16
x	profit.h	/^  double	*x[2];			\/* Coordinate vector *\/$/;"	m	struct:__anon22
x	psf.h	/^  float		*x,*y;		\/* Position derived from the PSF-fitting *\/$/;"	m	struct:__anon24
x_prof	types.h	/^  float		x_prof, y_prof;			\/* Coords from model-fitting*\/$/;"	m	struct:__anon7
x_psf	types.h	/^  float		*x_psf, *y_psf;			\/* Coords from PSF-fitting *\/$/;"	m	struct:__anon7
xbasis	wcs/tnx.h	/^  double	*xbasis,*ybasis;	\/* Basis function values *\/$/;"	m	struct:tnxaxis
xmax	cuda/cudatypes.h	/^  int		xmin,xmax,ymin,ymax,ycmin,ycmax;\/* x,y limits *\/$/;"	m	struct:__anon1
xmax	extract.c	/^static int		*start, *end, *discan, xmin,ymin,xmax,ymax;$/;"	v	file:
xmax	types.h	/^  int		xmin,xmax,ymin,ymax,ycmin,ycmax;\/* x,y limits *\/$/;"	m	struct:__anon6
xmaxmin	wcs/tnx.h	/^  double	xmaxmin,ymaxmin;	\/* Well... *\/$/;"	m	struct:tnxaxis
xmin	cuda/cudatypes.h	/^  int		xmin,xmax,ymin,ymax,ycmin,ycmax;\/* x,y limits *\/$/;"	m	struct:__anon1
xmin	extract.c	/^static int		*start, *end, *discan, xmin,ymin,xmax,ymax;$/;"	v	file:
xmin	types.h	/^  int		xmin,xmax,ymin,ymax,ycmin,ycmax;\/* x,y limits *\/$/;"	m	struct:__anon6
xml_flag	prefs.h	/^  int		xml_flag;				\/* Write XML file? *\/$/;"	m	struct:__anon44
xml_name	prefs.h	/^  char		xml_name[MAXCHAR];			\/* XML file name *\/$/;"	m	struct:__anon44
xmlstack	xml.c	/^xmlstruct		*xmlstack = NULL;$/;"	v
xmlstruct	xml.h	/^  }	xmlstruct;$/;"	t	typeref:struct:__anon10
xorder	wcs/tnx.h	/^  int		xorder,yorder;		\/* Polynomial orders *\/$/;"	m	struct:tnxaxis
xrange	wcs/tnx.h	/^  double	xrange,yrange;		\/* Coordinate ranges *\/$/;"	m	struct:tnxaxis
xsl_name	prefs.h	/^  char		xsl_name[MAXCHAR];			\/* XSL file name (or URL) *\/$/;"	m	struct:__anon44
xtension	fits/fitscat.h	/^  char		xtension[82];		\/* FITS extension type *\/$/;"	m	struct:structtab
xterms	wcs/tnx.h	/^  int		xterms;			\/* Well... *\/$/;"	m	struct:tnxaxis
xw_prof	types.h	/^  double	xw_prof, yw_prof;		\/* WORLD coords *\/$/;"	m	struct:__anon7
xw_psf	types.h	/^  double	xw_psf, yw_psf;			\/* WORLD coords *\/$/;"	m	struct:__anon7
xy_stiff	som.h	/^  float		xy_stiff;		\/* Stiffness of the X\/Y mapping *\/$/;"	m	struct:__anon25
y	check.h	/^  int		y;			\/* current line in check-image *\/$/;"	m	struct:structcheck
y	plist.h	/^  int		x, y;$/;"	m	struct:__anon16
y	psf.h	/^  float		*x,*y;		\/* Position derived from the PSF-fitting *\/$/;"	m	struct:__anon24
y	types.h	/^  int		y;			\/* y current position in field *\/$/;"	m	struct:pic
y_prof	types.h	/^  float		x_prof, y_prof;			\/* Coords from model-fitting*\/$/;"	m	struct:__anon7
y_psf	types.h	/^  float		*x_psf, *y_psf;			\/* Coords from PSF-fitting *\/$/;"	m	struct:__anon7
ybasis	wcs/tnx.h	/^  double	*xbasis,*ybasis;	\/* Basis function values *\/$/;"	m	struct:tnxaxis
yblank	types.h	/^  int		yblank;			\/* y blanking limit (highest+1) *\/$/;"	m	struct:pic
ycmax	cuda/cudatypes.h	/^  int		xmin,xmax,ymin,ymax,ycmin,ycmax;\/* x,y limits *\/$/;"	m	struct:__anon1
ycmax	types.h	/^  int		xmin,xmax,ymin,ymax,ycmin,ycmax;\/* x,y limits *\/$/;"	m	struct:__anon6
ycmin	cuda/cudatypes.h	/^  int		xmin,xmax,ymin,ymax,ycmin,ycmax;\/* x,y limits *\/$/;"	m	struct:__anon1
ycmin	types.h	/^  int		xmin,xmax,ymin,ymax,ycmin,ycmax;\/* x,y limits *\/$/;"	m	struct:__anon6
ymax	cuda/cudatypes.h	/^  int		xmin,xmax,ymin,ymax,ycmin,ycmax;\/* x,y limits *\/$/;"	m	struct:__anon1
ymax	extract.c	/^static int		*start, *end, *discan, xmin,ymin,xmax,ymax;$/;"	v	file:
ymax	types.h	/^  int		xmin,xmax,ymin,ymax,ycmin,ycmax;\/* x,y limits *\/$/;"	m	struct:__anon6
ymax	types.h	/^  int		ymax;			\/* y limit (highest accessible+1) *\/$/;"	m	struct:pic
ymaxmin	wcs/tnx.h	/^  double	xmaxmin,ymaxmin;	\/* Well... *\/$/;"	m	struct:tnxaxis
ymin	cuda/cudatypes.h	/^  int		xmin,xmax,ymin,ymax,ycmin,ycmax;\/* x,y limits *\/$/;"	m	struct:__anon1
ymin	extract.c	/^static int		*start, *end, *discan, xmin,ymin,xmax,ymax;$/;"	v	file:
ymin	types.h	/^  int		xmin,xmax,ymin,ymax,ycmin,ycmax;\/* x,y limits *\/$/;"	m	struct:__anon6
ymin	types.h	/^  int		ymin;			\/* y limit (lowest accessible) *\/$/;"	m	struct:pic
yorder	wcs/tnx.h	/^  int		xorder,yorder;		\/* Polynomial orders *\/$/;"	m	struct:tnxaxis
yrange	wcs/tnx.h	/^  double	xrange,yrange;		\/* Coordinate ranges *\/$/;"	m	struct:tnxaxis
yw_prof	types.h	/^  double	xw_prof, yw_prof;		\/* WORLD coords *\/$/;"	m	struct:__anon7
yw_psf	types.h	/^  double	xw_psf, yw_psf;			\/* WORLD coords *\/$/;"	m	struct:__anon7
zeafwd	wcs/proj.c	/^int zeafwd(phi, theta, prj, x, y)$/;"	f
zearev	wcs/proj.c	/^int zearev(x, y, prj, phi, theta)$/;"	f
zeaset	wcs/proj.c	/^int zeaset(prj)$/;"	f
zpnfwd	wcs/proj.c	/^int zpnfwd(phi, theta, prj, x, y)$/;"	f
zpnrev	wcs/proj.c	/^int zpnrev(x, y, prj, phi, theta)$/;"	f
zpnset	wcs/proj.c	/^int zpnset(prj)$/;"	f
